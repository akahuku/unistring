/**
 * Unistring: breaks a native string into an array of grapheme cluster,
 *            and provides native string like manipulation methods.
 * =============================================================================
 *
 *
 * @author akahuku@gmail.com
 * @license MIT
 */

(function (global) {
	'use strict';

	/*
	 * data table, taken from:
	 * http://www.unicode.org/Public/8.0.0/ucd/auxiliary/GraphemeBreakProperty.txt
	 */

	// GENERATED CODE START <<<1
	// This data was generated by the command 'node mkdata.js -g'.
	var GRAPHEME_BREAK_PROPS = '\
000000000A0005000A000000010004000B000000020005000D000000010003000E00000012000500\
7F00000021000500AD0000000100050000030000700006008304000007000600910500002D000600\
BF05000001000600C105000002000600C405000002000600C7050000010006000006000006000500\
100600000B0006001C060000010005004B060000150006007006000001000600D606000007000600\
DD06000001000500DF06000006000600E706000002000600EA060000040006000F07000001000500\
1107000001000600300700001B000600A60700000B000600EB070000090006001608000004000600\
1B08000009000600250800000300060029080000050006005908000003000600E308000020000600\
03090000010008003A090000010006003B090000010008003C090000010006003E09000003000800\
410900000800060049090000040008004D090000010006004E090000020008005109000007000600\
620900000200060081090000010006008209000002000800BC09000001000600BE09000001000600\
BF09000002000800C109000004000600C709000002000800CB09000002000800CD09000001000600\
D709000001000600E209000002000600010A000002000600030A0000010008003C0A000001000600\
3E0A000003000800410A000002000600470A0000020006004B0A000003000600510A000001000600\
700A000002000600750A000001000600810A000002000600830A000001000800BC0A000001000600\
BE0A000003000800C10A000005000600C70A000002000600C90A000001000800CB0A000002000800\
CD0A000001000600E20A000002000600010B000001000600020B0000020008003C0B000001000600\
3E0B000002000600400B000001000800410B000004000600470B0000020008004B0B000002000800\
4D0B000001000600560B000002000600620B000002000600820B000001000600BE0B000001000600\
BF0B000001000800C00B000001000600C10B000002000800C60B000003000800CA0B000003000800\
CD0B000001000600D70B000001000600000C000001000600010C0000030008003E0C000003000600\
410C000004000800460C0000030006004A0C000004000600550C000002000600620C000002000600\
810C000001000600820C000002000800BC0C000001000600BE0C000001000800BF0C000001000600\
C00C000002000800C20C000001000600C30C000002000800C60C000001000600C70C000002000800\
CA0C000002000800CC0C000002000600D50C000002000600E20C000002000600010D000001000600\
020D0000020008003E0D0000010006003F0D000002000800410D000004000600460D000003000800\
4A0D0000030008004D0D000001000600570D000001000600620D000002000600820D000002000800\
CA0D000001000600CF0D000001000600D00D000002000800D20D000003000600D60D000001000600\
D80D000007000800DF0D000001000600F20D000002000800310E000001000600330E000001000800\
340E000007000600470E000008000600B10E000001000600B30E000001000800B40E000006000600\
BB0E000002000600C80E000006000600180F000002000600350F000001000600370F000001000600\
390F0000010006003E0F000002000800710F00000E0006007F0F000001000800800F000005000600\
860F0000020006008D0F00000B000600990F000024000600C60F0000010006002D10000004000600\
3110000001000800321000000600060039100000020006003B100000020008003D10000002000600\
561000000200080058100000020006005E1000000300060071100000040006008210000001000600\
841000000100080085100000020006008D100000010006009D100000010006000011000060000900\
6011000048000A00A811000058000B005D1300000300060012170000030006003217000003000600\
52170000020006007217000002000600B417000002000600B617000001000800B717000007000600\
BE17000008000800C617000001000600C717000002000800C91700000B000600DD17000001000600\
0B180000030006000E18000001000500A91800000100060020190000030006002319000004000800\
27190000020006002919000003000800301900000200080032190000010006003319000006000800\
3919000003000600171A000002000600191A0000020008001B1A000001000600551A000001000800\
561A000001000600571A000001000800581A000007000600601A000001000600621A000001000600\
651A0000080006006D1A000006000800731A00000A0006007F1A000001000600B01A00000F000600\
001B000004000600041B000001000800341B000001000600351B000001000800361B000005000600\
3B1B0000010008003C1B0000010006003D1B000005000800421B000001000600431B000002000800\
6B1B000009000600801B000002000600821B000001000800A11B000001000800A21B000004000600\
A61B000002000800A81B000002000600AA1B000001000800AB1B000003000600E61B000001000600\
E71B000001000800E81B000002000600EA1B000003000800ED1B000001000600EE1B000001000800\
EF1B000003000600F21B000002000800241C0000080008002C1C000008000600341C000002000800\
361C000002000600D01C000003000600D41C00000D000600E11C000001000800E21C000007000600\
ED1C000001000600F21C000002000800F41C000001000600F81C000002000600C01D000036000600\
FC1D0000040006000B200000010005000C200000020006000E200000020005002820000007000500\
6020000010000500D020000021000600EF2C0000030006007F2D000001000600E02D000020000600\
2A3000000600060099300000020006006FA600000400060074A600000A0006009EA6000002000600\
F0A600000200060002A800000100060006A80000010006000BA800000100060023A8000002000800\
25A800000200060027A800000100080080A8000002000800B4A8000010000800C4A8000001000600\
E0A800001200060026A900000800060047A900000B00060052A900000200080060A900001D000900\
80A900000300060083A9000001000800B3A9000001000600B4A9000002000800B6A9000004000600\
BAA9000002000800BCA9000001000600BDA9000004000800E5A900000100060029AA000006000600\
2FAA00000200080031AA00000200060033AA00000200080035AA00000200060043AA000001000600\
4CAA0000010006004DAA0000010008007CAA000001000600B0AA000001000600B2AA000003000600\
B7AA000002000600BEAA000002000600C1AA000001000600EBAA000001000800ECAA000002000600\
EEAA000002000800F5AA000001000800F6AA000001000600E3AB000002000800E5AB000001000600\
E6AB000002000800E8AB000001000600E9AB000002000800ECAB000001000800EDAB000001000600\
00AC000001000C0001AC00001B000D001CAC000001000C001DAC00001B000D0038AC000001000C00\
39AC00001B000D0054AC000001000C0055AC00001B000D0070AC000001000C0071AC00001B000D00\
8CAC000001000C008DAC00001B000D00A8AC000001000C00A9AC00001B000D00C4AC000001000C00\
C5AC00001B000D00E0AC000001000C00E1AC00001B000D00FCAC000001000C00FDAC00001B000D00\
18AD000001000C0019AD00001B000D0034AD000001000C0035AD00001B000D0050AD000001000C00\
51AD00001B000D006CAD000001000C006DAD00001B000D0088AD000001000C0089AD00001B000D00\
A4AD000001000C00A5AD00001B000D00C0AD000001000C00C1AD00001B000D00DCAD000001000C00\
DDAD00001B000D00F8AD000001000C00F9AD00001B000D0014AE000001000C0015AE00001B000D00\
30AE000001000C0031AE00001B000D004CAE000001000C004DAE00001B000D0068AE000001000C00\
69AE00001B000D0084AE000001000C0085AE00001B000D00A0AE000001000C00A1AE00001B000D00\
BCAE000001000C00BDAE00001B000D00D8AE000001000C00D9AE00001B000D00F4AE000001000C00\
F5AE00001B000D0010AF000001000C0011AF00001B000D002CAF000001000C002DAF00001B000D00\
48AF000001000C0049AF00001B000D0064AF000001000C0065AF00001B000D0080AF000001000C00\
81AF00001B000D009CAF000001000C009DAF00001B000D00B8AF000001000C00B9AF00001B000D00\
D4AF000001000C00D5AF00001B000D00F0AF000001000C00F1AF00001B000D000CB0000001000C00\
0DB000001B000D0028B0000001000C0029B000001B000D0044B0000001000C0045B000001B000D00\
60B0000001000C0061B000001B000D007CB0000001000C007DB000001B000D0098B0000001000C00\
99B000001B000D00B4B0000001000C00B5B000001B000D00D0B0000001000C00D1B000001B000D00\
ECB0000001000C00EDB000001B000D0008B1000001000C0009B100001B000D0024B1000001000C00\
25B100001B000D0040B1000001000C0041B100001B000D005CB1000001000C005DB100001B000D00\
78B1000001000C0079B100001B000D0094B1000001000C0095B100001B000D00B0B1000001000C00\
B1B100001B000D00CCB1000001000C00CDB100001B000D00E8B1000001000C00E9B100001B000D00\
04B2000001000C0005B200001B000D0020B2000001000C0021B200001B000D003CB2000001000C00\
3DB200001B000D0058B2000001000C0059B200001B000D0074B2000001000C0075B200001B000D00\
90B2000001000C0091B200001B000D00ACB2000001000C00ADB200001B000D00C8B2000001000C00\
C9B200001B000D00E4B2000001000C00E5B200001B000D0000B3000001000C0001B300001B000D00\
1CB3000001000C001DB300001B000D0038B3000001000C0039B300001B000D0054B3000001000C00\
55B300001B000D0070B3000001000C0071B300001B000D008CB3000001000C008DB300001B000D00\
A8B3000001000C00A9B300001B000D00C4B3000001000C00C5B300001B000D00E0B3000001000C00\
E1B300001B000D00FCB3000001000C00FDB300001B000D0018B4000001000C0019B400001B000D00\
34B4000001000C0035B400001B000D0050B4000001000C0051B400001B000D006CB4000001000C00\
6DB400001B000D0088B4000001000C0089B400001B000D00A4B4000001000C00A5B400001B000D00\
C0B4000001000C00C1B400001B000D00DCB4000001000C00DDB400001B000D00F8B4000001000C00\
F9B400001B000D0014B5000001000C0015B500001B000D0030B5000001000C0031B500001B000D00\
4CB5000001000C004DB500001B000D0068B5000001000C0069B500001B000D0084B5000001000C00\
85B500001B000D00A0B5000001000C00A1B500001B000D00BCB5000001000C00BDB500001B000D00\
D8B5000001000C00D9B500001B000D00F4B5000001000C00F5B500001B000D0010B6000001000C00\
11B600001B000D002CB6000001000C002DB600001B000D0048B6000001000C0049B600001B000D00\
64B6000001000C0065B600001B000D0080B6000001000C0081B600001B000D009CB6000001000C00\
9DB600001B000D00B8B6000001000C00B9B600001B000D00D4B6000001000C00D5B600001B000D00\
F0B6000001000C00F1B600001B000D000CB7000001000C000DB700001B000D0028B7000001000C00\
29B700001B000D0044B7000001000C0045B700001B000D0060B7000001000C0061B700001B000D00\
7CB7000001000C007DB700001B000D0098B7000001000C0099B700001B000D00B4B7000001000C00\
B5B700001B000D00D0B7000001000C00D1B700001B000D00ECB7000001000C00EDB700001B000D00\
08B8000001000C0009B800001B000D0024B8000001000C0025B800001B000D0040B8000001000C00\
41B800001B000D005CB8000001000C005DB800001B000D0078B8000001000C0079B800001B000D00\
94B8000001000C0095B800001B000D00B0B8000001000C00B1B800001B000D00CCB8000001000C00\
CDB800001B000D00E8B8000001000C00E9B800001B000D0004B9000001000C0005B900001B000D00\
20B9000001000C0021B900001B000D003CB9000001000C003DB900001B000D0058B9000001000C00\
59B900001B000D0074B9000001000C0075B900001B000D0090B9000001000C0091B900001B000D00\
ACB9000001000C00ADB900001B000D00C8B9000001000C00C9B900001B000D00E4B9000001000C00\
E5B900001B000D0000BA000001000C0001BA00001B000D001CBA000001000C001DBA00001B000D00\
38BA000001000C0039BA00001B000D0054BA000001000C0055BA00001B000D0070BA000001000C00\
71BA00001B000D008CBA000001000C008DBA00001B000D00A8BA000001000C00A9BA00001B000D00\
C4BA000001000C00C5BA00001B000D00E0BA000001000C00E1BA00001B000D00FCBA000001000C00\
FDBA00001B000D0018BB000001000C0019BB00001B000D0034BB000001000C0035BB00001B000D00\
50BB000001000C0051BB00001B000D006CBB000001000C006DBB00001B000D0088BB000001000C00\
89BB00001B000D00A4BB000001000C00A5BB00001B000D00C0BB000001000C00C1BB00001B000D00\
DCBB000001000C00DDBB00001B000D00F8BB000001000C00F9BB00001B000D0014BC000001000C00\
15BC00001B000D0030BC000001000C0031BC00001B000D004CBC000001000C004DBC00001B000D00\
68BC000001000C0069BC00001B000D0084BC000001000C0085BC00001B000D00A0BC000001000C00\
A1BC00001B000D00BCBC000001000C00BDBC00001B000D00D8BC000001000C00D9BC00001B000D00\
F4BC000001000C00F5BC00001B000D0010BD000001000C0011BD00001B000D002CBD000001000C00\
2DBD00001B000D0048BD000001000C0049BD00001B000D0064BD000001000C0065BD00001B000D00\
80BD000001000C0081BD00001B000D009CBD000001000C009DBD00001B000D00B8BD000001000C00\
B9BD00001B000D00D4BD000001000C00D5BD00001B000D00F0BD000001000C00F1BD00001B000D00\
0CBE000001000C000DBE00001B000D0028BE000001000C0029BE00001B000D0044BE000001000C00\
45BE00001B000D0060BE000001000C0061BE00001B000D007CBE000001000C007DBE00001B000D00\
98BE000001000C0099BE00001B000D00B4BE000001000C00B5BE00001B000D00D0BE000001000C00\
D1BE00001B000D00ECBE000001000C00EDBE00001B000D0008BF000001000C0009BF00001B000D00\
24BF000001000C0025BF00001B000D0040BF000001000C0041BF00001B000D005CBF000001000C00\
5DBF00001B000D0078BF000001000C0079BF00001B000D0094BF000001000C0095BF00001B000D00\
B0BF000001000C00B1BF00001B000D00CCBF000001000C00CDBF00001B000D00E8BF000001000C00\
E9BF00001B000D0004C0000001000C0005C000001B000D0020C0000001000C0021C000001B000D00\
3CC0000001000C003DC000001B000D0058C0000001000C0059C000001B000D0074C0000001000C00\
75C000001B000D0090C0000001000C0091C000001B000D00ACC0000001000C00ADC000001B000D00\
C8C0000001000C00C9C000001B000D00E4C0000001000C00E5C000001B000D0000C1000001000C00\
01C100001B000D001CC1000001000C001DC100001B000D0038C1000001000C0039C100001B000D00\
54C1000001000C0055C100001B000D0070C1000001000C0071C100001B000D008CC1000001000C00\
8DC100001B000D00A8C1000001000C00A9C100001B000D00C4C1000001000C00C5C100001B000D00\
E0C1000001000C00E1C100001B000D00FCC1000001000C00FDC100001B000D0018C2000001000C00\
19C200001B000D0034C2000001000C0035C200001B000D0050C2000001000C0051C200001B000D00\
6CC2000001000C006DC200001B000D0088C2000001000C0089C200001B000D00A4C2000001000C00\
A5C200001B000D00C0C2000001000C00C1C200001B000D00DCC2000001000C00DDC200001B000D00\
F8C2000001000C00F9C200001B000D0014C3000001000C0015C300001B000D0030C3000001000C00\
31C300001B000D004CC3000001000C004DC300001B000D0068C3000001000C0069C300001B000D00\
84C3000001000C0085C300001B000D00A0C3000001000C00A1C300001B000D00BCC3000001000C00\
BDC300001B000D00D8C3000001000C00D9C300001B000D00F4C3000001000C00F5C300001B000D00\
10C4000001000C0011C400001B000D002CC4000001000C002DC400001B000D0048C4000001000C00\
49C400001B000D0064C4000001000C0065C400001B000D0080C4000001000C0081C400001B000D00\
9CC4000001000C009DC400001B000D00B8C4000001000C00B9C400001B000D00D4C4000001000C00\
D5C400001B000D00F0C4000001000C00F1C400001B000D000CC5000001000C000DC500001B000D00\
28C5000001000C0029C500001B000D0044C5000001000C0045C500001B000D0060C5000001000C00\
61C500001B000D007CC5000001000C007DC500001B000D0098C5000001000C0099C500001B000D00\
B4C5000001000C00B5C500001B000D00D0C5000001000C00D1C500001B000D00ECC5000001000C00\
EDC500001B000D0008C6000001000C0009C600001B000D0024C6000001000C0025C600001B000D00\
40C6000001000C0041C600001B000D005CC6000001000C005DC600001B000D0078C6000001000C00\
79C600001B000D0094C6000001000C0095C600001B000D00B0C6000001000C00B1C600001B000D00\
CCC6000001000C00CDC600001B000D00E8C6000001000C00E9C600001B000D0004C7000001000C00\
05C700001B000D0020C7000001000C0021C700001B000D003CC7000001000C003DC700001B000D00\
58C7000001000C0059C700001B000D0074C7000001000C0075C700001B000D0090C7000001000C00\
91C700001B000D00ACC7000001000C00ADC700001B000D00C8C7000001000C00C9C700001B000D00\
E4C7000001000C00E5C700001B000D0000C8000001000C0001C800001B000D001CC8000001000C00\
1DC800001B000D0038C8000001000C0039C800001B000D0054C8000001000C0055C800001B000D00\
70C8000001000C0071C800001B000D008CC8000001000C008DC800001B000D00A8C8000001000C00\
A9C800001B000D00C4C8000001000C00C5C800001B000D00E0C8000001000C00E1C800001B000D00\
FCC8000001000C00FDC800001B000D0018C9000001000C0019C900001B000D0034C9000001000C00\
35C900001B000D0050C9000001000C0051C900001B000D006CC9000001000C006DC900001B000D00\
88C9000001000C0089C900001B000D00A4C9000001000C00A5C900001B000D00C0C9000001000C00\
C1C900001B000D00DCC9000001000C00DDC900001B000D00F8C9000001000C00F9C900001B000D00\
14CA000001000C0015CA00001B000D0030CA000001000C0031CA00001B000D004CCA000001000C00\
4DCA00001B000D0068CA000001000C0069CA00001B000D0084CA000001000C0085CA00001B000D00\
A0CA000001000C00A1CA00001B000D00BCCA000001000C00BDCA00001B000D00D8CA000001000C00\
D9CA00001B000D00F4CA000001000C00F5CA00001B000D0010CB000001000C0011CB00001B000D00\
2CCB000001000C002DCB00001B000D0048CB000001000C0049CB00001B000D0064CB000001000C00\
65CB00001B000D0080CB000001000C0081CB00001B000D009CCB000001000C009DCB00001B000D00\
B8CB000001000C00B9CB00001B000D00D4CB000001000C00D5CB00001B000D00F0CB000001000C00\
F1CB00001B000D000CCC000001000C000DCC00001B000D0028CC000001000C0029CC00001B000D00\
44CC000001000C0045CC00001B000D0060CC000001000C0061CC00001B000D007CCC000001000C00\
7DCC00001B000D0098CC000001000C0099CC00001B000D00B4CC000001000C00B5CC00001B000D00\
D0CC000001000C00D1CC00001B000D00ECCC000001000C00EDCC00001B000D0008CD000001000C00\
09CD00001B000D0024CD000001000C0025CD00001B000D0040CD000001000C0041CD00001B000D00\
5CCD000001000C005DCD00001B000D0078CD000001000C0079CD00001B000D0094CD000001000C00\
95CD00001B000D00B0CD000001000C00B1CD00001B000D00CCCD000001000C00CDCD00001B000D00\
E8CD000001000C00E9CD00001B000D0004CE000001000C0005CE00001B000D0020CE000001000C00\
21CE00001B000D003CCE000001000C003DCE00001B000D0058CE000001000C0059CE00001B000D00\
74CE000001000C0075CE00001B000D0090CE000001000C0091CE00001B000D00ACCE000001000C00\
ADCE00001B000D00C8CE000001000C00C9CE00001B000D00E4CE000001000C00E5CE00001B000D00\
00CF000001000C0001CF00001B000D001CCF000001000C001DCF00001B000D0038CF000001000C00\
39CF00001B000D0054CF000001000C0055CF00001B000D0070CF000001000C0071CF00001B000D00\
8CCF000001000C008DCF00001B000D00A8CF000001000C00A9CF00001B000D00C4CF000001000C00\
C5CF00001B000D00E0CF000001000C00E1CF00001B000D00FCCF000001000C00FDCF00001B000D00\
18D0000001000C0019D000001B000D0034D0000001000C0035D000001B000D0050D0000001000C00\
51D000001B000D006CD0000001000C006DD000001B000D0088D0000001000C0089D000001B000D00\
A4D0000001000C00A5D000001B000D00C0D0000001000C00C1D000001B000D00DCD0000001000C00\
DDD000001B000D00F8D0000001000C00F9D000001B000D0014D1000001000C0015D100001B000D00\
30D1000001000C0031D100001B000D004CD1000001000C004DD100001B000D0068D1000001000C00\
69D100001B000D0084D1000001000C0085D100001B000D00A0D1000001000C00A1D100001B000D00\
BCD1000001000C00BDD100001B000D00D8D1000001000C00D9D100001B000D00F4D1000001000C00\
F5D100001B000D0010D2000001000C0011D200001B000D002CD2000001000C002DD200001B000D00\
48D2000001000C0049D200001B000D0064D2000001000C0065D200001B000D0080D2000001000C00\
81D200001B000D009CD2000001000C009DD200001B000D00B8D2000001000C00B9D200001B000D00\
D4D2000001000C00D5D200001B000D00F0D2000001000C00F1D200001B000D000CD3000001000C00\
0DD300001B000D0028D3000001000C0029D300001B000D0044D3000001000C0045D300001B000D00\
60D3000001000C0061D300001B000D007CD3000001000C007DD300001B000D0098D3000001000C00\
99D300001B000D00B4D3000001000C00B5D300001B000D00D0D3000001000C00D1D300001B000D00\
ECD3000001000C00EDD300001B000D0008D4000001000C0009D400001B000D0024D4000001000C00\
25D400001B000D0040D4000001000C0041D400001B000D005CD4000001000C005DD400001B000D00\
78D4000001000C0079D400001B000D0094D4000001000C0095D400001B000D00B0D4000001000C00\
B1D400001B000D00CCD4000001000C00CDD400001B000D00E8D4000001000C00E9D400001B000D00\
04D5000001000C0005D500001B000D0020D5000001000C0021D500001B000D003CD5000001000C00\
3DD500001B000D0058D5000001000C0059D500001B000D0074D5000001000C0075D500001B000D00\
90D5000001000C0091D500001B000D00ACD5000001000C00ADD500001B000D00C8D5000001000C00\
C9D500001B000D00E4D5000001000C00E5D500001B000D0000D6000001000C0001D600001B000D00\
1CD6000001000C001DD600001B000D0038D6000001000C0039D600001B000D0054D6000001000C00\
55D600001B000D0070D6000001000C0071D600001B000D008CD6000001000C008DD600001B000D00\
A8D6000001000C00A9D600001B000D00C4D6000001000C00C5D600001B000D00E0D6000001000C00\
E1D600001B000D00FCD6000001000C00FDD600001B000D0018D7000001000C0019D700001B000D00\
34D7000001000C0035D700001B000D0050D7000001000C0051D700001B000D006CD7000001000C00\
6DD700001B000D0088D7000001000C0089D700001B000D00B0D7000017000A00CBD7000031000B00\
00D80000000805001EFB00000100060000FE00001000060020FE000010000600FFFE000001000500\
9EFF000002000600F0FF00000C000500FD01010001000600E0020100010006007603010005000600\
010A010003000600050A0100020006000C0A010004000600380A0100030006003F0A010001000600\
E50A010002000600001001000100080001100100010006000210010001000800381001000F000600\
7F100100030006008210010001000800B010010003000800B310010004000600B710010002000800\
B910010002000600BD10010001000500001101000300060027110100050006002C11010001000800\
2D11010008000600731101000100060080110100020006008211010001000800B311010003000800\
B611010009000600BF11010002000800CA110100030006002C120100030008002F12010003000600\
3212010002000800341201000100060035120100010008003612010002000600DF12010001000600\
E012010003000800E312010008000600001301000200060002130100020008003C13010001000600\
3E130100010006003F13010001000800401301000100060041130100040008004713010002000800\
4B130100030008005713010001000600621301000200080066130100070006007013010005000600\
B014010001000600B114010002000800B314010006000600B914010001000800BA14010001000600\
BB14010002000800BD14010001000600BE14010001000800BF14010002000600C114010001000800\
C214010002000600AF15010001000600B015010002000800B215010004000600B815010004000800\
BC15010002000600BE15010001000800BF15010002000600DC150100020006003016010003000800\
33160100080006003B160100020008003D160100010006003E160100010008003F16010002000600\
AB16010001000600AC16010001000800AD16010001000600AE16010002000800B016010006000600\
B616010001000800B7160100010006001D1701000300060020170100020008002217010004000600\
26170100010008002717010005000600F06A010005000600306B010007000600516F01002E000800\
8F6F0100040006009DBC010002000600A0BC01000400050065D101000100060066D1010001000800\
67D10100030006006DD10100010008006ED101000500060073D10100080005007BD1010008000600\
85D1010007000600AAD101000400060042D201000300060000DA0100370006003BDA010032000600\
75DA01000100060084DA0100010006009BDA010005000600A1DA01000F000600D0E8010007000600\
E6F101001A00070000000E000001050000010E00F0000600F0010E00100E0500'.replace(
	/[0-9A-F]{2}/g,
	function($0){return String.fromCharCode(parseInt($0, 16))});

	var GBP_Other = 0;
	var GBP_SOT = 1;
	var GBP_EOT = 2;
	var GBP_CR = 3;
	var GBP_LF = 4;
	var GBP_Control = 5;
	var GBP_Extend = 6;
	var GBP_Regional_Indicator = 7;
	var GBP_SpacingMark = 8;
	var GBP_L = 9;
	var GBP_V = 10;
	var GBP_T = 11;
	var GBP_LV = 12;
	var GBP_LVT = 13;

	var GRAPHEME_BREAK_PROP_UNIT_LENGTH = 8;

	function getGBPCodeFromName (name) {
		switch (name) {
		case 'Other': return GBP_Other;
		case 'SOT': return GBP_SOT;
		case 'EOT': return GBP_EOT;
		case 'CR': return GBP_CR;
		case 'LF': return GBP_LF;
		case 'Control': return GBP_Control;
		case 'Extend': return GBP_Extend;
		case 'Regional_Indicator': return GBP_Regional_Indicator;
		case 'SpacingMark': return GBP_SpacingMark;
		case 'L': return GBP_L;
		case 'V': return GBP_V;
		case 'T': return GBP_T;
		case 'LV': return GBP_LV;
		case 'LVT': return GBP_LVT;
		}
		return undefined;
	}
	// GENERATED CODE END
	// >>>

	/*
	 * data table, taken from:
	 * http://www.unicode.org/Public/8.0.0/ucd/auxiliary/WordBreakProperty.txt
	 */

	// GENERATED CODE START <<<1
	// This data was generated by the command 'node mkdata.js -w'.
	var WORD_BREAK_PROPS = '\
0A000000010007000B000000020008000D0000000100060020000000010015002200000001000300\
27000000010004002C00000001000E002E00000001000F00300000000A0010003A00000001000D00\
3B00000001000E00410000001A000C005F00000001001100610000001A000C008500000001000800\
A000000001001500AA00000001000C00AD00000001000B00B500000001000C00B700000001000D00\
BA00000001000C00C000000017000C00D80000001F000C00F8000000CA010C00C60200000C000C00\
D702000001000D00E002000005000C00EC02000001000C00EE02000001000C000003000070000900\
7003000005000C007603000002000C007A03000004000C007E03000001000E007F03000001000C00\
8603000001000C008703000001000D008803000003000C008C03000001000C008E03000014000C00\
A303000053000C00F70300008B000C0083040000070009008A040000A6000C003105000026000C00\
5905000001000C006105000027000C008905000001000E00910500002D000900BF05000001000900\
C105000002000900C405000002000900C705000001000900D00500001B000500F005000003000500\
F305000001000C00F405000001000D000006000006000B000C06000002000E00100600000B000900\
1C06000001000B00200600002B000C004B06000015000900600600000A0010006B06000001001000\
6C06000001000E006E06000002000C0070060000010009007106000063000C00D506000001000C00\
D606000007000900DD06000001000B00DF06000006000900E506000002000C00E706000002000900\
EA06000004000900EE06000002000C00F00600000A001000FA06000003000C00FF06000001000C00\
0F07000001000B001007000001000C001107000001000900120700001E000C00300700001B000900\
4D07000059000C00A60700000B000900B107000001000C00C00700000A001000CA07000021000C00\
EB07000009000900F407000002000C00F807000001000E00FA07000001000C000008000016000C00\
16080000040009001A08000001000C001B080000090009002408000001000C002508000003000900\
2808000001000C0029080000050009004008000019000C005908000003000900A008000015000C00\
E3080000210009000409000036000C003A090000030009003D09000001000C003E09000012000900\
5009000001000C005109000007000900580900000A000C006209000002000900660900000A001000\
7109000010000C0081090000030009008509000008000C008F09000002000C009309000016000C00\
AA09000007000C00B209000001000C00B609000004000C00BC09000001000900BD09000001000C00\
BE09000007000900C709000002000900CB09000003000900CE09000001000C00D709000001000900\
DC09000002000C00DF09000003000C00E209000002000900E60900000A001000F009000002000C00\
010A000003000900050A000006000C000F0A000002000C00130A000016000C002A0A000007000C00\
320A000002000C00350A000002000C00380A000002000C003C0A0000010009003E0A000005000900\
470A0000020009004B0A000003000900510A000001000900590A000004000C005E0A000001000C00\
660A00000A001000700A000002000900720A000003000C00750A000001000900810A000003000900\
850A000009000C008F0A000003000C00930A000016000C00AA0A000007000C00B20A000002000C00\
B50A000005000C00BC0A000001000900BD0A000001000C00BE0A000008000900C70A000003000900\
CB0A000003000900D00A000001000C00E00A000002000C00E20A000002000900E60A00000A001000\
F90A000001000C00010B000003000900050B000008000C000F0B000002000C00130B000016000C00\
2A0B000007000C00320B000002000C00350B000005000C003C0B0000010009003D0B000001000C00\
3E0B000007000900470B0000020009004B0B000003000900560B0000020009005C0B000002000C00\
5F0B000003000C00620B000002000900660B00000A001000710B000001000C00820B000001000900\
830B000001000C00850B000006000C008E0B000003000C00920B000004000C00990B000002000C00\
9C0B000001000C009E0B000002000C00A30B000002000C00A80B000003000C00AE0B00000C000C00\
BE0B000005000900C60B000003000900CA0B000004000900D00B000001000C00D70B000001000900\
E60B00000A001000000C000004000900050C000008000C000E0C000003000C00120C000017000C00\
2A0C000010000C003D0C000001000C003E0C000007000900460C0000030009004A0C000004000900\
550C000002000900580C000003000C00600C000002000C00620C000002000900660C00000A001000\
810C000003000900850C000008000C008E0C000003000C00920C000017000C00AA0C00000A000C00\
B50C000005000C00BC0C000001000900BD0C000001000C00BE0C000007000900C60C000003000900\
CA0C000004000900D50C000002000900DE0C000001000C00E00C000002000C00E20C000002000900\
E60C00000A001000F10C000002000C00010D000003000900050D000008000C000E0D000003000C00\
120D000029000C003D0D000001000C003E0D000007000900460D0000030009004A0D000004000900\
4E0D000001000C00570D0000010009005F0D000003000C00620D000002000900660D00000A001000\
7A0D000006000C00820D000002000900850D000012000C009A0D000018000C00B30D000009000C00\
BD0D000001000C00C00D000007000C00CA0D000001000900CF0D000006000900D60D000001000900\
D80D000008000900E60D00000A001000F20D000002000900310E000001000900340E000007000900\
470E000008000900500E00000A001000B10E000001000900B40E000006000900BB0E000002000900\
C80E000006000900D00E00000A001000000F000001000C00180F000002000900200F00000A001000\
350F000001000900370F000001000900390F0000010009003E0F000002000900400F000008000C00\
490F000024000C00710F000014000900860F000002000900880F000005000C008D0F00000B000900\
990F000024000900C60F0000010009002B10000014000900401000000A0010005610000004000900\
5E10000003000900621000000300090067100000070009007110000004000900821000000C000900\
8F10000001000900901000000A0010009A10000004000900A010000026000C00C710000001000C00\
CD10000001000C00D01000002B000C00FC1000004D010C004A12000004000C005012000007000C00\
5812000001000C005A12000004000C006012000029000C008A12000004000C009012000021000C00\
B212000004000C00B812000007000C00C012000001000C00C212000004000C00C81200000F000C00\
D812000039000C001213000004000C001813000043000C005D130000030009008013000010000C00\
A013000056000C00F813000006000C00011400006C020C006F16000011000C00811600001A000C00\
A01600004B000C00EE1600000B000C00001700000D000C000E17000004000C001217000003000900\
2017000012000C0032170000030009004017000012000C005217000002000900601700000D000C00\
6E17000003000C007217000002000900B417000020000900DD17000001000900E01700000A001000\
0B180000030009000E18000001000B00101800000A0010002018000058000C008018000029000C00\
A918000001000900AA18000001000C00B018000046000C00001900001F000C00201900000C000900\
301900000C000900461900000A001000D01900000A001000001A000017000C00171A000005000900\
551A00000A000900601A00001D0009007F1A000001000900801A00000A001000901A00000A001000\
B01A00000F000900001B000005000900051B00002F000C00341B000011000900451B000007000C00\
501B00000A0010006B1B000009000900801B000003000900831B00001E000C00A11B00000D000900\
AE1B000002000C00B01B00000A001000BA1B00002C000C00E61B00000E000900001C000024000C00\
241C000014000900401C00000A0010004D1C000003000C00501C00000A0010005A1C000024000C00\
D01C000003000900D41C000015000900E91C000004000C00ED1C000001000900EE1C000004000C00\
F21C000003000900F51C000002000C00F81C000002000900001D0000C0000C00C01D000036000900\
FC1D000004000900001E000016010C00181F000006000C00201F000026000C00481F000006000C00\
501F000008000C00591F000001000C005B1F000001000C005D1F000001000C005F1F00001F000C00\
801F000035000C00B61F000007000C00BE1F000001000C00C21F000003000C00C61F000007000C00\
D01F000004000C00D61F000006000C00E01F00000D000C00F21F000003000C00F61F000007000C00\
002000000C0015000C200000020009000E20000002000B001820000002000F002420000001000F00\
2720000001000D0028200000020008002A20000005000B002F200000010015003F20000002001100\
4420000001000E0054200000010011005F200000010015006020000005000B00662000000A000B00\
7120000001000C007F20000001000C00902000000D000C00D0200000210009000221000001000C00\
0721000001000C000A2100000A000C001521000001000C001921000005000C002421000001000C00\
2621000001000C002821000001000C002A21000004000C002F2100000B000C003C21000004000C00\
4521000005000C004E21000001000C006021000029000C00B624000034000C00002C00002F000C00\
302C00002F000C00602C000085000C00EB2C000004000C00EF2C000003000900F22C000002000C00\
002D000026000C00272D000001000C002D2D000001000C00302D000038000C006F2D000001000C00\
7F2D000001000900802D000017000C00A02D000007000C00A82D000007000C00B02D000007000C00\
B82D000007000C00C02D000007000C00C82D000007000C00D02D000007000C00D82D000007000C00\
E02D0000200009002F2E000001000C0000300000010015000530000001000C002A30000006000900\
31300000050014003B30000002000C00413000005600130099300000020009009B30000004001400\
9F30000001001300A030000001001400A13000005A001200FC30000003001400FF30000001001200\
0531000029000C00313100005E000C00A03100001B000C00F031000010001200D03200002F001200\
003300005800120000A000008D040C00D0A400002E000C0000A500000D010C0010A6000010000C00\
20A600000A0010002AA6000002000C0040A600002F000C006FA600000400090074A600000A000900\
7FA600001F000C009EA6000002000900A0A6000050000C00F0A600000200090017A7000009000C00\
22A7000067000C008BA7000023000C00B0A7000008000C00F7A700000B000C0002A8000001000900\
03A8000003000C0006A800000100090007A8000004000C000BA80000010009000CA8000017000C00\
23A800000500090040A8000034000C0080A800000200090082A8000032000C00B4A8000011000900\
D0A800000A001000E0A8000012000900F2A8000006000C00FBA8000001000C00FDA8000001000C00\
00A900000A0010000AA900001C000C0026A900000800090030A9000017000C0047A900000D000900\
60A900001D000C0080A900000400090084A900002F000C00B3A900000E000900CFA9000001000C00\
D0A900000A001000E5A9000001000900F0A900000A00100000AA000029000C0029AA00000E000900\
40AA000003000C0043AA00000100090044AA000008000C004CAA00000200090050AA00000A001000\
7BAA000003000900B0AA000001000900B2AA000003000900B7AA000002000900BEAA000002000900\
C1AA000001000900E0AA00000B000C00EBAA000005000900F2AA000003000C00F5AA000002000900\
01AB000006000C0009AB000006000C0011AB000006000C0020AB000007000C0028AB000007000C00\
30AB00002B000C005CAB00000A000C0070AB000073000C00E3AB000008000900ECAB000002000900\
F0AB00000A00100000AC0000A42B0C00B0D7000017000C00CBD7000031000C0000FB000007000C00\
13FB000005000C001DFB0000010005001EFB0000010009001FFB00000A0005002AFB00000D000500\
38FB0000050005003EFB00000100050040FB00000200050043FB00000200050046FB00000A000500\
50FB000062000C00D3FB00006B010C0050FD000040000C0092FD000036000C00F0FD00000C000C00\
00FE00001000090010FE000001000E0013FE000001000D0014FE000001000E0020FE000010000900\
33FE0000020011004DFE00000300110050FE000001000E0052FE000001000F0054FE000001000E00\
55FE000001000D0070FE000005000C0076FE000087000C00FFFE000001000B0007FF000001000F00\
0CFF000001000E000EFF000001000F001AFF000001000D001BFF000001000E0021FF00001A000C00\
3FFF00000100110041FF00001A000C0066FF00000A00120070FF00000100140071FF00002D001200\
9EFF000002000900A0FF00001F000C00C2FF000006000C00CAFF000006000C00D2FF000006000C00\
DAFF000003000C00F9FF000003000B00000001000C000C000D0001001A000C002800010013000C00\
3C00010002000C003F0001000F000C00500001000E000C00800001007B000C004001010035000C00\
FD01010001000900800201001D000C00A002010031000C00E0020100010009000003010020000C00\
300301001B000C005003010026000C007603010005000900800301001E000C00A003010024000C00\
C803010008000C00D103010005000C00000401009E000C00A00401000A0010000005010028000C00\
3005010034000C000006010037010C004007010016000C006007010008000C000008010006000C00\
0808010001000C000A0801002C000C003708010002000C003C08010001000C003F08010017000C00\
6008010017000C00800801001F000C00E008010013000C00F408010002000C000009010016000C00\
200901001A000C008009010038000C00BE09010002000C00000A010001000C00010A010003000900\
050A0100020009000C0A010004000900100A010004000C00150A010003000C00190A01001B000C00\
380A0100030009003F0A010001000900600A01001D000C00800A01001D000C00C00A010008000C00\
C90A01001C000C00E50A010002000900000B010036000C00400B010016000C00600B010013000C00\
800B010012000C00000C010049000C00800C010033000C00C00C010033000C000010010003000900\
0310010035000C00381001000F000900661001000A0010007F10010004000900831001002D000C00\
B01001000B000900BD10010001000B00D010010019000C00F01001000A0010000011010003000900\
0311010024000C00271101000E000900361101000A0010005011010023000C007311010001000900\
7611010001000C0080110100030009008311010030000C00B31101000E000900C111010004000C00\
CA11010003000900D01101000A001000DA11010001000C00DC11010001000C000012010012000C00\
1312010019000C002C1201000C0009008012010007000C008812010001000C008A12010004000C00\
8F1201000F000C009F1201000A000C00B01201002F000C00DF1201000C000900F01201000A001000\
00130100040009000513010008000C000F13010002000C001313010016000C002A13010007000C00\
3213010002000C003513010005000C003C130100010009003D13010001000C003E13010007000900\
47130100020009004B130100030009005013010001000C0057130100010009005D13010005000C00\
6213010002000900661301000700090070130100050009008014010030000C00B014010014000900\
C414010002000C00C714010001000C00D01401000A001000801501002F000C00AF15010007000900\
B815010009000900D815010004000C00DC150100020009000016010030000C003016010011000900\
4416010001000C00501601000A001000801601002B000C00AB1601000D000900C01601000A001000\
1D1701000F000900301701000A001000A018010040000C00E01801000A001000FF18010001000C00\
C01A010039000C00002001009A030C00002401006F000C0080240100C4000C00003001002F040C00\
0044010047020C000068010039020C00406A01001F000C00606A01000A001000D06A01001E000C00\
F06A010005000900006B010030000C00306B010007000900406B010004000C00506B01000A001000\
636B010015000C007D6B010013000C00006F010045000C00506F010001000C00516F01002E000900\
8F6F010004000900936F01000D000C0000B001000100120000BC01006B000C0070BC01000D000C00\
80BC010009000C0090BC01000A000C009DBC010002000900A0BC010004000B0065D1010005000900\
6DD101000600090073D1010008000B007BD101000800090085D1010007000900AAD1010004000900\
42D201000300090000D4010055000C0056D4010047000C009ED4010002000C00A2D4010001000C00\
A5D4010002000C00A9D4010004000C00AED401000C000C00BBD4010001000C00BDD4010007000C00\
C5D4010041000C0007D5010004000C000DD5010008000C0016D5010007000C001ED501001C000C00\
3BD5010004000C0040D5010005000C0046D5010001000C004AD5010007000C0052D5010054010C00\
A8D6010019000C00C2D6010019000C00DCD601001F000C00FCD6010019000C0016D701001F000C00\
36D7010019000C0050D701001F000C0070D7010019000C008AD701001F000C00AAD7010019000C00\
C4D7010008000C00CED701003200100000DA0100370009003BDA01003200090075DA010001000900\
84DA0100010009009BDA010005000900A1DA01000F00090000E80100C5000C00D0E8010007000900\
00EE010004000C0005EE01001B000C0021EE010002000C0024EE010001000C0027EE010001000C00\
29EE01000A000C0034EE010004000C0039EE010001000C003BEE010001000C0042EE010001000C00\
47EE010001000C0049EE010001000C004BEE010001000C004DEE010003000C0051EE010002000C00\
54EE010001000C0057EE010001000C0059EE010001000C005BEE010001000C005DEE010001000C00\
5FEE010001000C0061EE010002000C0064EE010001000C0067EE010004000C006CEE010007000C00\
74EE010004000C0079EE010004000C007EEE010001000C0080EE01000A000C008BEE010011000C00\
A1EE010003000C00A5EE010005000C00ABEE010011000C0030F101001A000C0050F101001A000C00\
70F101001A000C00E6F101001A000A0001000E0001000B0020000E0060000B0000010E00F0000900\
'.replace(
	/[0-9A-F]{2}/g,
	function($0){return String.fromCharCode(parseInt($0, 16))});

	var WBP_Other = 0;
	var WBP_SOT = 1;
	var WBP_EOT = 2;
	var WBP_Double_Quote = 3;
	var WBP_Single_Quote = 4;
	var WBP_Hebrew_Letter = 5;
	var WBP_CR = 6;
	var WBP_LF = 7;
	var WBP_Newline = 8;
	var WBP_Extend = 9;
	var WBP_Regional_Indicator = 10;
	var WBP_Format = 11;
	var WBP_ALetter = 12;
	var WBP_MidLetter = 13;
	var WBP_MidNum = 14;
	var WBP_MidNumLet = 15;
	var WBP_Numeric = 16;
	var WBP_ExtendNumLet = 17;
	var WBP_Katakana = 18;
	var WBP_Hiragana = 19;
	var WBP_KanaExtension = 20;
	var WBP_Space = 21;

	var WORD_BREAK_PROP_UNIT_LENGTH = 8;

	function getWBPCodeFromName (name) {
		switch (name) {
		case 'Other': return WBP_Other;
		case 'SOT': return WBP_SOT;
		case 'EOT': return WBP_EOT;
		case 'Double_Quote': return WBP_Double_Quote;
		case 'Single_Quote': return WBP_Single_Quote;
		case 'Hebrew_Letter': return WBP_Hebrew_Letter;
		case 'CR': return WBP_CR;
		case 'LF': return WBP_LF;
		case 'Newline': return WBP_Newline;
		case 'Extend': return WBP_Extend;
		case 'Regional_Indicator': return WBP_Regional_Indicator;
		case 'Format': return WBP_Format;
		case 'ALetter': return WBP_ALetter;
		case 'MidLetter': return WBP_MidLetter;
		case 'MidNum': return WBP_MidNum;
		case 'MidNumLet': return WBP_MidNumLet;
		case 'Numeric': return WBP_Numeric;
		case 'ExtendNumLet': return WBP_ExtendNumLet;
		case 'Katakana': return WBP_Katakana;
		case 'Hiragana': return WBP_Hiragana;
		case 'KanaExtension': return WBP_KanaExtension;
		case 'Space': return WBP_Space;
		}
		return undefined;
	}
	// GENERATED CODE END
	// >>>

	/*
	 * data table, taken from:
	 * http://www.unicode.org/Public/8.0.0/ucd/Scripts.txt
	 */

	// GENERATED CODE START <<<1
	// This data was generated by the command 'node mkdata.js -s'.
	var SCRIPTS = '\
0000000041000100410000001A0002005B00000006000100610000001A0002007B0000002F000100\
AA00000001000200AB0000000F000100BA00000001000200BB00000005000100C000000017000200\
D700000001000100D80000001F000200F700000001000100F8000000C1010200B902000027000100\
E002000005000200E502000005000100EA02000002002300EC020000140001000003000070002900\
7003000004000300740300000100010075030000030003007A030000040003007E03000001000100\
7F030000010003008403000001000300850300000100010086030000010003008703000001000100\
88030000030003008C030000010003008E03000014000300A30300003F000300E20300000E003700\
F0030000100003000004000085000400850400000200290087040000A90004003105000026000500\
5905000007000500610500002700050089050000010001008A050000010005008D05000003000500\
9105000037000600D00500001B000600F00500000500060000060000050007000506000001000100\
06060000060007000C060000010001000D0600000E0007001B060000020001001E06000001000700\
1F0600000100010020060000200007004006000001000100410600000A0007004B0600000B002900\
560600001A0007007006000001002900710600006C000700DD06000001000100DE06000022000700\
000700000E0008000F0700003C0008004D0700000300080050070000300007008007000032000900\
C00700003B004200000800002E005200300800000F005200400800001C005F005E08000001005F00\
A008000015000700E30800001D0007000009000051000A0051090000020029005309000011000A00\
6409000002000100660900001A000A008009000004000B008509000008000B008F09000002000B00\
9309000016000B00AA09000007000B00B209000001000B00B609000004000B00BC09000009000B00\
C709000002000B00CB09000004000B00D709000001000B00DC09000002000B00DF09000005000B00\
E609000016000B00010A000003000C00050A000006000C000F0A000002000C00130A000016000C00\
2A0A000007000C00320A000002000C00350A000002000C00380A000002000C003C0A000001000C00\
3E0A000005000C00470A000002000C004B0A000003000C00510A000001000C00590A000004000C00\
5E0A000001000C00660A000010000C00810A000003000D00850A000009000D008F0A000003000D00\
930A000016000D00AA0A000007000D00B20A000002000D00B50A000005000D00BC0A00000A000D00\
C70A000003000D00CB0A000003000D00D00A000001000D00E00A000004000D00E60A00000C000D00\
F90A000001000D00010B000003000E00050B000008000E000F0B000002000E00130B000016000E00\
2A0B000007000E00320B000002000E00350B000005000E003C0B000009000E00470B000002000E00\
4B0B000003000E00560B000002000E005C0B000002000E005F0B000005000E00660B000012000E00\
820B000002000F00850B000006000F008E0B000003000F00920B000004000F00990B000002000F00\
9C0B000001000F009E0B000002000F00A30B000002000F00A80B000003000F00AE0B00000C000F00\
BE0B000005000F00C60B000003000F00CA0B000004000F00D00B000001000F00D70B000001000F00\
E60B000015000F00000C000004001000050C0000080010000E0C000003001000120C000017001000\
2A0C0000100010003D0C000008001000460C0000030010004A0C000004001000550C000002001000\
580C000003001000600C000004001000660C00000A001000780C000008001000810C000003001100\
850C0000080011008E0C000003001100920C000017001100AA0C00000A001100B50C000005001100\
BC0C000009001100C60C000003001100CA0C000004001100D50C000002001100DE0C000001001100\
E00C000004001100E60C00000A001100F10C000002001100010D000003001200050D000008001200\
0E0D000003001200120D0000290012003D0D000008001200460D0000030012004A0D000005001200\
570D0000010012005F0D000005001200660D000010001200790D000007001200820D000002001300\
850D0000120013009A0D000018001300B30D000009001300BD0D000001001300C00D000007001300\
CA0D000001001300CF0D000006001300D60D000001001300D80D000008001300E60D00000A001300\
F20D000003001300010E00003A0014003F0E000001000100400E00001C001400810E000002001500\
840E000001001500870E0000020015008A0E0000010015008D0E000001001500940E000004001500\
990E000007001500A10E000003001500A50E000001001500A70E000001001500AA0E000002001500\
AD0E00000D001500BB0E000003001500C00E000005001500C60E000001001500C80E000006001500\
D00E00000A001500DC0E000004001500000F000048001600490F000024001600710F000027001600\
990F000024001600BE0F00000F001600CE0F000007001600D50F000004000100D90F000002001600\
00100000A0001700A010000026001800C710000001001800CD10000001001800D01000002B001800\
FB10000001000100FC1000000400180000110000000119000012000049001A004A12000004001A00\
5012000007001A005812000001001A005A12000004001A006012000029001A008A12000004001A00\
9012000021001A00B212000004001A00B812000007001A00C012000001001A00C212000004001A00\
C81200000F001A00D812000039001A001213000004001A001813000043001A005D13000020001A00\
801300001A001A00A013000056001B00F813000006001B000014000080021C00801600001D001D00\
A01600004B001E00EB16000003000100EE1600000B001E00001700000D002A000E17000007002A00\
2017000015002B0035170000020001004017000014002C00601700000D002D006E17000003002D00\
7217000002002D00801700005E001F00E01700000A001F00F01700000A001F000018000002002000\
0218000002000100041800000100200005180000010001000618000009002000101800000A002000\
2018000058002000801800002B002000B018000046001C00001900001F002E00201900000C002E00\
301900000C002E004019000001002E00441900000C002E00501900001E002F007019000005002F00\
801900002C003800B01900001A003800D01900000B003800DE19000002003800E019000020001F00\
001A00001C0036001E1A000002003600201A00003F004E00601A00001D004E007F1A00000B004E00\
901A00000A004E00A01A00000E004E00B01A00000F002900001B00004C003E00501B00002D003E00\
801B000040004300C01B000034005D00FC1B000004005D00001C0000380044003B1C00000F004400\
4D1C000003004400501C000030004500C01C000008004300D01C000003002900D31C000001000100\
D41C00000D002900E11C000001000100E21C000007002900E91C000004000100ED1C000001002900\
EE1C000006000100F41C000001002900F51C000002000100F81C000002002900001D000026000200\
261D0000050003002B1D0000010004002C1D0000310002005D1D000005000300621D000004000200\
661D0000050003006B1D00000D000200781D000001000400791D000046000200BF1D000001000300\
C01D000036002900FC1D000004002900001E000000010200001F000016000300181F000006000300\
201F000026000300481F000006000300501F000008000300591F0000010003005B1F000001000300\
5D1F0000010003005F1F00001F000300801F000035000300B61F00000F000300C61F00000E000300\
D61F000006000300DD1F000013000300F21F000003000300F61F000009000300002000000C000100\
0C200000020029000E20000057000100662000000B0001007120000001000200742000000B000100\
7F20000001000200802000000F000100902000000D000200A02000001F000100D020000021002900\
0021000026000100262100000100030027210000030001002A210000020002002C21000006000100\
3221000001000200332100001B0001004E210000010002004F210000110001006021000029000200\
8921000003000100902100006B0201000024000027000100402400000B00010060240000A0030100\
00280000000135000029000074020100762B000020000100982B000022000100BD2B00000C000100\
CA2B000008000100EC2B000004000100002C00002F003900302C00002F003900602C000020000200\
802C000074003700F92C000007003700002D000026001800272D0000010018002D2D000001001800\
302D000038003A006F2D000002003A007F2D000001003A00802D000017001A00A02D000007001A00\
A82D000007001A00B02D000007001A00B82D000007001A00C02D000007001A00C82D000007001A00\
D02D000007001A00D82D000007001A00E02D000020000400002E000043000100802E00001A002400\
9B2E000059002400002F0000D6002400F02F00000C00010000300000050001000530000001002400\
06300000010001000730000001002400083000001900010021300000090024002A30000004002900\
2E30000002001900303000000800010038300000040024003C300000040001004130000056002100\
99300000020029009B300000020001009D30000003002100A030000001000100A13000005A002200\
FB30000002000100FD300000030022000531000029002300313100005E0019009031000010000100\
A03100001B002300C031000024000100F031000010002200003200001F0019002032000040000100\
603200001F0019007F32000051000100D03200002F002200003300005800220058330000A8000100\
00340000B6192400C04D000040000100004E0000D651240000A000008D04250090A4000037002500\
D0A400003000530000A500002C01460040A6000060000400A0A600005800540000A7000022000100\
22A700006600020088A70000030001008BA7000023000200B0A7000008000200F7A7000009000200\
00A800002C003B0030A800000A00010040A800003800410080A8000045004700CEA800000C004700\
E0A800001E000A0000A900002E0048002EA90000010001002FA900000100480030A9000024004900\
5FA900000100490060A900001D00190080A900004E005500CFA9000001000100D0A900000A005500\
DEA9000002005500E0A900001F00170000AA000037004D0040AA00000E004D0050AA00000A004D00\
5CAA000004004D0060AA00002000170080AA000043004F00DBAA000005004F00E0AA000017005600\
01AB000006001A0009AB000006001A0011AB000006001A0020AB000007001A0028AB000007001A00\
30AB00002B0002005BAB0000010001005CAB00000900020065AB00000100030070AB000050001B00\
C0AB00002E005600F0AB00000A00560000AC0000A42B1900B0D7000017001900CBD7000031001900\
00F900006E01240070FA00006A00240000FB00000700020013FB0000050005001DFB00001A000600\
38FB0000050006003EFB00000100060040FB00000200060043FB00000200060046FB00000A000600\
50FB000072000700D3FB00006B0107003EFD00000200010050FD00004000070092FD000036000700\
F0FD00000E00070000FE00001000290010FE00000A00010020FE00000E0029002EFE000002000400\
30FE00002300010054FE00001300010068FE00000400010070FE00000500070076FE000087000700\
FFFE00000100010001FF00002000010021FF00001A0002003BFF00000600010041FF00001A000200\
5BFF00000B00010066FF00000A00220070FF00000100010071FF00002D0022009EFF000002000100\
A0FF00001F001900C2FF000006001900CAFF000006001900D2FF000006001900DAFF000003001900\
E0FF000007000100E8FF000007000100F9FF000005000100000001000C0030000D0001001A003000\
28000100130030003C000100020030003F0001000F003000500001000E003000800001007B003000\
0001010003000100070101002D0001003701010009000100400101004D000300900101000C000100\
A001010001000300D00101002D000100FD01010001002900800201001D004A00A002010031004B00\
E002010001002900E10201001B0001000003010024002600300301001B002700500301002B007800\
800301001E0031009F03010001003100A003010024003C00C80301000E003C000004010050002800\
5004010030003200800401001E003300A00401000A0033000005010028006A003005010034006700\
6F050100010067000006010037016E004007010016006E006007010008006E000008010006003400\
08080100010034000A0801002C00340037080100020034003C080100010034003F08010001003400\
400801001600570057080100090057006008010020007600800801001F007500A708010009007500\
E008010013008000F408010002008000FB08010005008000000901001C0040001F09010001004000\
200901001A004C003F09010001004C008009010020006200A009010018006100BC09010014006100\
D20901002E006100000A010004003D00050A010002003D000C0A010008003D00150A010003003D00\
190A01001B003D00380A010003003D003F0A010009003D00500A010009003D00600A010020005800\
800A010020007400C00A010027007000EB0A01000C007000000B010036005000390B010007005000\
400B010016005900580B010008005900600B010013005A00780B010008005A00800B010012007900\
990B010004007900A90B010007007900000C010049005B00800C010033008200C00C010033008200\
FA0C010006008200600E01001F000700001001004E005E00521001001E005E007F10010001005E00\
8010010042005C00D010010019006500F01001000A0065000011010035006000361101000E006000\
5011010027006F00801101004E006400D011010010006400E1110100140013000012010012006D00\
131201002B006D00801201000700810088120100010081008A120100040081008F1201000F008100\
9F1201000B008100B01201003B007B00F01201000A007B000013010004006B000513010008006B00\
0F13010002006B001313010016006B002A13010007006B003213010002006B003513010005006B00\
3C13010009006B004713010002006B004B13010003006B005013010001006B005713010001006B00\
5D13010007006B006613010007006B007013010005006B008014010048007C00D01401000A007C00\
8015010036007A00B815010026007A000016010045007200501601000A0072008016010038006600\
C01601000A006600001701001A007E001D1701000F007E003017010010007E00A018010053007D00\
FF18010001007D00C01A010039007700002001009A033F00002401006F003F007024010005003F00\
80240100C4003F00003001002F0451000044010047027F000068010039025400406A01001F007300\
606A01000A0073006E6A010002007300D06A01001E006800F06A010006006800006B010046006C00\
506B01000A006C005B6B010007006C00636B010015006C007D6B010013006C00006F010045006300\
506F01002F0063008F6F01001100630000B001000100220001B001000100210000BC01006B006900\
70BC01000D00690080BC01000900690090BC01000A0069009CBC010004006900A0BC010004000100\
00D00100F600010000D101002700010029D101003E00010067D10100030029006AD1010011000100\
7BD101000800290083D101000200010085D10100070029008CD101001E000100AAD1010004002900\
AED101003B00010000D201004600030000D301005700010060D301001200010000D4010055000100\
56D40100470001009ED4010002000100A2D4010001000100A5D4010002000100A9D4010004000100\
AED401000C000100BBD4010001000100BDD4010007000100C5D401004100010007D5010004000100\
0DD501000800010016D50100070001001ED501001C0001003BD501000400010040D5010005000100\
46D50100010001004AD501000700010052D5010054010100A8D6010024010100CED7010032000100\
00D801008C0283009BDA010005008300A1DA01000F00830000E80100C5007100C7E8010010007100\
00EE01000400070005EE01001B00070021EE01000200070024EE01000100070027EE010001000700\
29EE01000A00070034EE01000400070039EE0100010007003BEE01000100070042EE010001000700\
47EE01000100070049EE0100010007004BEE0100010007004DEE01000300070051EE010002000700\
54EE01000100070057EE01000100070059EE0100010007005BEE0100010007005DEE010001000700\
5FEE01000100070061EE01000200070064EE01000100070067EE0100040007006CEE010007000700\
74EE01000400070079EE0100040007007EEE01000100070080EE01000A0007008BEE010011000700\
A1EE010003000700A5EE010005000700ABEE010011000700F0EE01000200070000F001002C000100\
30F0010064000100A0F001000F000100B1F001000F000100C1F001000F000100D1F0010025000100\
00F101000D00010010F101001F00010030F101003C00010070F101002B000100E6F101001A000100\
00F201000100210001F201000200010010F201002B00010040F201000900010050F2010002000100\
00F301007A0201007BF5010029000100A5F501002C010100E0F601000D000100F0F6010004000100\
00F701007400010080F701005500010000F801000C00010010F801003800010050F801000A000100\
60F801002800010090F801001E00010010F901000900010080F9010005000100C0F9010001000100\
00000200D7A6240000A702003510240040B70200DE00240020B802008216240000F802001E022400\
01000E000100010020000E006000010000010E00F0002900'.replace(
	/[0-9A-F]{2}/g,
	function($0){return String.fromCharCode(parseInt($0, 16))});

	var SCRIPT_Unknown = 0;
	var SCRIPT_Common = 1;
	var SCRIPT_Latin = 2;
	var SCRIPT_Greek = 3;
	var SCRIPT_Cyrillic = 4;
	var SCRIPT_Armenian = 5;
	var SCRIPT_Hebrew = 6;
	var SCRIPT_Arabic = 7;
	var SCRIPT_Syriac = 8;
	var SCRIPT_Thaana = 9;
	var SCRIPT_Devanagari = 10;
	var SCRIPT_Bengali = 11;
	var SCRIPT_Gurmukhi = 12;
	var SCRIPT_Gujarati = 13;
	var SCRIPT_Oriya = 14;
	var SCRIPT_Tamil = 15;
	var SCRIPT_Telugu = 16;
	var SCRIPT_Kannada = 17;
	var SCRIPT_Malayalam = 18;
	var SCRIPT_Sinhala = 19;
	var SCRIPT_Thai = 20;
	var SCRIPT_Lao = 21;
	var SCRIPT_Tibetan = 22;
	var SCRIPT_Myanmar = 23;
	var SCRIPT_Georgian = 24;
	var SCRIPT_Hangul = 25;
	var SCRIPT_Ethiopic = 26;
	var SCRIPT_Cherokee = 27;
	var SCRIPT_Canadian_Aboriginal = 28;
	var SCRIPT_Ogham = 29;
	var SCRIPT_Runic = 30;
	var SCRIPT_Khmer = 31;
	var SCRIPT_Mongolian = 32;
	var SCRIPT_Hiragana = 33;
	var SCRIPT_Katakana = 34;
	var SCRIPT_Bopomofo = 35;
	var SCRIPT_Han = 36;
	var SCRIPT_Yi = 37;
	var SCRIPT_Old_Italic = 38;
	var SCRIPT_Gothic = 39;
	var SCRIPT_Deseret = 40;
	var SCRIPT_Inherited = 41;
	var SCRIPT_Tagalog = 42;
	var SCRIPT_Hanunoo = 43;
	var SCRIPT_Buhid = 44;
	var SCRIPT_Tagbanwa = 45;
	var SCRIPT_Limbu = 46;
	var SCRIPT_Tai_Le = 47;
	var SCRIPT_Linear_B = 48;
	var SCRIPT_Ugaritic = 49;
	var SCRIPT_Shavian = 50;
	var SCRIPT_Osmanya = 51;
	var SCRIPT_Cypriot = 52;
	var SCRIPT_Braille = 53;
	var SCRIPT_Buginese = 54;
	var SCRIPT_Coptic = 55;
	var SCRIPT_New_Tai_Lue = 56;
	var SCRIPT_Glagolitic = 57;
	var SCRIPT_Tifinagh = 58;
	var SCRIPT_Syloti_Nagri = 59;
	var SCRIPT_Old_Persian = 60;
	var SCRIPT_Kharoshthi = 61;
	var SCRIPT_Balinese = 62;
	var SCRIPT_Cuneiform = 63;
	var SCRIPT_Phoenician = 64;
	var SCRIPT_Phags_Pa = 65;
	var SCRIPT_Nko = 66;
	var SCRIPT_Sundanese = 67;
	var SCRIPT_Lepcha = 68;
	var SCRIPT_Ol_Chiki = 69;
	var SCRIPT_Vai = 70;
	var SCRIPT_Saurashtra = 71;
	var SCRIPT_Kayah_Li = 72;
	var SCRIPT_Rejang = 73;
	var SCRIPT_Lycian = 74;
	var SCRIPT_Carian = 75;
	var SCRIPT_Lydian = 76;
	var SCRIPT_Cham = 77;
	var SCRIPT_Tai_Tham = 78;
	var SCRIPT_Tai_Viet = 79;
	var SCRIPT_Avestan = 80;
	var SCRIPT_Egyptian_Hieroglyphs = 81;
	var SCRIPT_Samaritan = 82;
	var SCRIPT_Lisu = 83;
	var SCRIPT_Bamum = 84;
	var SCRIPT_Javanese = 85;
	var SCRIPT_Meetei_Mayek = 86;
	var SCRIPT_Imperial_Aramaic = 87;
	var SCRIPT_Old_South_Arabian = 88;
	var SCRIPT_Inscriptional_Parthian = 89;
	var SCRIPT_Inscriptional_Pahlavi = 90;
	var SCRIPT_Old_Turkic = 91;
	var SCRIPT_Kaithi = 92;
	var SCRIPT_Batak = 93;
	var SCRIPT_Brahmi = 94;
	var SCRIPT_Mandaic = 95;
	var SCRIPT_Chakma = 96;
	var SCRIPT_Meroitic_Cursive = 97;
	var SCRIPT_Meroitic_Hieroglyphs = 98;
	var SCRIPT_Miao = 99;
	var SCRIPT_Sharada = 100;
	var SCRIPT_Sora_Sompeng = 101;
	var SCRIPT_Takri = 102;
	var SCRIPT_Caucasian_Albanian = 103;
	var SCRIPT_Bassa_Vah = 104;
	var SCRIPT_Duployan = 105;
	var SCRIPT_Elbasan = 106;
	var SCRIPT_Grantha = 107;
	var SCRIPT_Pahawh_Hmong = 108;
	var SCRIPT_Khojki = 109;
	var SCRIPT_Linear_A = 110;
	var SCRIPT_Mahajani = 111;
	var SCRIPT_Manichaean = 112;
	var SCRIPT_Mende_Kikakui = 113;
	var SCRIPT_Modi = 114;
	var SCRIPT_Mro = 115;
	var SCRIPT_Old_North_Arabian = 116;
	var SCRIPT_Nabataean = 117;
	var SCRIPT_Palmyrene = 118;
	var SCRIPT_Pau_Cin_Hau = 119;
	var SCRIPT_Old_Permic = 120;
	var SCRIPT_Psalter_Pahlavi = 121;
	var SCRIPT_Siddham = 122;
	var SCRIPT_Khudawadi = 123;
	var SCRIPT_Tirhuta = 124;
	var SCRIPT_Warang_Citi = 125;
	var SCRIPT_Ahom = 126;
	var SCRIPT_Anatolian_Hieroglyphs = 127;
	var SCRIPT_Hatran = 128;
	var SCRIPT_Multani = 129;
	var SCRIPT_Old_Hungarian = 130;
	var SCRIPT_SignWriting = 131;

	var SCRIPTS_PROP_UNIT_LENGTH = 8;

	function getSCRIPTCodeFromName (name) {
		switch (name) {
		case 'Unknown': return SCRIPT_Unknown;
		case 'Common': return SCRIPT_Common;
		case 'Latin': return SCRIPT_Latin;
		case 'Greek': return SCRIPT_Greek;
		case 'Cyrillic': return SCRIPT_Cyrillic;
		case 'Armenian': return SCRIPT_Armenian;
		case 'Hebrew': return SCRIPT_Hebrew;
		case 'Arabic': return SCRIPT_Arabic;
		case 'Syriac': return SCRIPT_Syriac;
		case 'Thaana': return SCRIPT_Thaana;
		case 'Devanagari': return SCRIPT_Devanagari;
		case 'Bengali': return SCRIPT_Bengali;
		case 'Gurmukhi': return SCRIPT_Gurmukhi;
		case 'Gujarati': return SCRIPT_Gujarati;
		case 'Oriya': return SCRIPT_Oriya;
		case 'Tamil': return SCRIPT_Tamil;
		case 'Telugu': return SCRIPT_Telugu;
		case 'Kannada': return SCRIPT_Kannada;
		case 'Malayalam': return SCRIPT_Malayalam;
		case 'Sinhala': return SCRIPT_Sinhala;
		case 'Thai': return SCRIPT_Thai;
		case 'Lao': return SCRIPT_Lao;
		case 'Tibetan': return SCRIPT_Tibetan;
		case 'Myanmar': return SCRIPT_Myanmar;
		case 'Georgian': return SCRIPT_Georgian;
		case 'Hangul': return SCRIPT_Hangul;
		case 'Ethiopic': return SCRIPT_Ethiopic;
		case 'Cherokee': return SCRIPT_Cherokee;
		case 'Canadian_Aboriginal': return SCRIPT_Canadian_Aboriginal;
		case 'Ogham': return SCRIPT_Ogham;
		case 'Runic': return SCRIPT_Runic;
		case 'Khmer': return SCRIPT_Khmer;
		case 'Mongolian': return SCRIPT_Mongolian;
		case 'Hiragana': return SCRIPT_Hiragana;
		case 'Katakana': return SCRIPT_Katakana;
		case 'Bopomofo': return SCRIPT_Bopomofo;
		case 'Han': return SCRIPT_Han;
		case 'Yi': return SCRIPT_Yi;
		case 'Old_Italic': return SCRIPT_Old_Italic;
		case 'Gothic': return SCRIPT_Gothic;
		case 'Deseret': return SCRIPT_Deseret;
		case 'Inherited': return SCRIPT_Inherited;
		case 'Tagalog': return SCRIPT_Tagalog;
		case 'Hanunoo': return SCRIPT_Hanunoo;
		case 'Buhid': return SCRIPT_Buhid;
		case 'Tagbanwa': return SCRIPT_Tagbanwa;
		case 'Limbu': return SCRIPT_Limbu;
		case 'Tai_Le': return SCRIPT_Tai_Le;
		case 'Linear_B': return SCRIPT_Linear_B;
		case 'Ugaritic': return SCRIPT_Ugaritic;
		case 'Shavian': return SCRIPT_Shavian;
		case 'Osmanya': return SCRIPT_Osmanya;
		case 'Cypriot': return SCRIPT_Cypriot;
		case 'Braille': return SCRIPT_Braille;
		case 'Buginese': return SCRIPT_Buginese;
		case 'Coptic': return SCRIPT_Coptic;
		case 'New_Tai_Lue': return SCRIPT_New_Tai_Lue;
		case 'Glagolitic': return SCRIPT_Glagolitic;
		case 'Tifinagh': return SCRIPT_Tifinagh;
		case 'Syloti_Nagri': return SCRIPT_Syloti_Nagri;
		case 'Old_Persian': return SCRIPT_Old_Persian;
		case 'Kharoshthi': return SCRIPT_Kharoshthi;
		case 'Balinese': return SCRIPT_Balinese;
		case 'Cuneiform': return SCRIPT_Cuneiform;
		case 'Phoenician': return SCRIPT_Phoenician;
		case 'Phags_Pa': return SCRIPT_Phags_Pa;
		case 'Nko': return SCRIPT_Nko;
		case 'Sundanese': return SCRIPT_Sundanese;
		case 'Lepcha': return SCRIPT_Lepcha;
		case 'Ol_Chiki': return SCRIPT_Ol_Chiki;
		case 'Vai': return SCRIPT_Vai;
		case 'Saurashtra': return SCRIPT_Saurashtra;
		case 'Kayah_Li': return SCRIPT_Kayah_Li;
		case 'Rejang': return SCRIPT_Rejang;
		case 'Lycian': return SCRIPT_Lycian;
		case 'Carian': return SCRIPT_Carian;
		case 'Lydian': return SCRIPT_Lydian;
		case 'Cham': return SCRIPT_Cham;
		case 'Tai_Tham': return SCRIPT_Tai_Tham;
		case 'Tai_Viet': return SCRIPT_Tai_Viet;
		case 'Avestan': return SCRIPT_Avestan;
		case 'Egyptian_Hieroglyphs': return SCRIPT_Egyptian_Hieroglyphs;
		case 'Samaritan': return SCRIPT_Samaritan;
		case 'Lisu': return SCRIPT_Lisu;
		case 'Bamum': return SCRIPT_Bamum;
		case 'Javanese': return SCRIPT_Javanese;
		case 'Meetei_Mayek': return SCRIPT_Meetei_Mayek;
		case 'Imperial_Aramaic': return SCRIPT_Imperial_Aramaic;
		case 'Old_South_Arabian': return SCRIPT_Old_South_Arabian;
		case 'Inscriptional_Parthian': return SCRIPT_Inscriptional_Parthian;
		case 'Inscriptional_Pahlavi': return SCRIPT_Inscriptional_Pahlavi;
		case 'Old_Turkic': return SCRIPT_Old_Turkic;
		case 'Kaithi': return SCRIPT_Kaithi;
		case 'Batak': return SCRIPT_Batak;
		case 'Brahmi': return SCRIPT_Brahmi;
		case 'Mandaic': return SCRIPT_Mandaic;
		case 'Chakma': return SCRIPT_Chakma;
		case 'Meroitic_Cursive': return SCRIPT_Meroitic_Cursive;
		case 'Meroitic_Hieroglyphs': return SCRIPT_Meroitic_Hieroglyphs;
		case 'Miao': return SCRIPT_Miao;
		case 'Sharada': return SCRIPT_Sharada;
		case 'Sora_Sompeng': return SCRIPT_Sora_Sompeng;
		case 'Takri': return SCRIPT_Takri;
		case 'Caucasian_Albanian': return SCRIPT_Caucasian_Albanian;
		case 'Bassa_Vah': return SCRIPT_Bassa_Vah;
		case 'Duployan': return SCRIPT_Duployan;
		case 'Elbasan': return SCRIPT_Elbasan;
		case 'Grantha': return SCRIPT_Grantha;
		case 'Pahawh_Hmong': return SCRIPT_Pahawh_Hmong;
		case 'Khojki': return SCRIPT_Khojki;
		case 'Linear_A': return SCRIPT_Linear_A;
		case 'Mahajani': return SCRIPT_Mahajani;
		case 'Manichaean': return SCRIPT_Manichaean;
		case 'Mende_Kikakui': return SCRIPT_Mende_Kikakui;
		case 'Modi': return SCRIPT_Modi;
		case 'Mro': return SCRIPT_Mro;
		case 'Old_North_Arabian': return SCRIPT_Old_North_Arabian;
		case 'Nabataean': return SCRIPT_Nabataean;
		case 'Palmyrene': return SCRIPT_Palmyrene;
		case 'Pau_Cin_Hau': return SCRIPT_Pau_Cin_Hau;
		case 'Old_Permic': return SCRIPT_Old_Permic;
		case 'Psalter_Pahlavi': return SCRIPT_Psalter_Pahlavi;
		case 'Siddham': return SCRIPT_Siddham;
		case 'Khudawadi': return SCRIPT_Khudawadi;
		case 'Tirhuta': return SCRIPT_Tirhuta;
		case 'Warang_Citi': return SCRIPT_Warang_Citi;
		case 'Ahom': return SCRIPT_Ahom;
		case 'Anatolian_Hieroglyphs': return SCRIPT_Anatolian_Hieroglyphs;
		case 'Hatran': return SCRIPT_Hatran;
		case 'Multani': return SCRIPT_Multani;
		case 'Old_Hungarian': return SCRIPT_Old_Hungarian;
		case 'SignWriting': return SCRIPT_SignWriting;
		}
		return undefined;
	}
	// GENERATED CODE END
	// >>>

	/*
	 * variables
	 */

	var graphemeFinder = createFinder(
		GRAPHEME_BREAK_PROPS, GRAPHEME_BREAK_PROP_UNIT_LENGTH, GBP_Other);
	var wordFinder = createFinder(
		WORD_BREAK_PROPS, WORD_BREAK_PROP_UNIT_LENGTH, WBP_Other);
	var scriptFinder = createFinder(
		SCRIPTS, SCRIPTS_PROP_UNIT_LENGTH, SCRIPT_Unknown);

	/*
	 * utility functions
	 */

	function pick2 (data, index) {
		return data.charCodeAt(index)
			|  data.charCodeAt(index + 1) << 8;
	}

	function pick3 (data, index) {
		return data.charCodeAt(index)
			|  data.charCodeAt(index + 1) << 8
			|  data.charCodeAt(index + 2) << 16;
	}

	function pick4 (data, index) {
		return data.charCodeAt(index)
			|  data.charCodeAt(index + 1) << 8
			|  data.charCodeAt(index + 2) << 16
			|  data.charCodeAt(index + 3) << 24;
	}

	function resolveSurrogates (s) {
		var result = [];
		s.replace(/[\ud800-\udb7f][\udc00-\udfff]|[\s\S]/g, function ($0) {
			if ($0.length == 2) {
				var hcp = $0.charCodeAt(0);
				var lcp = $0.charCodeAt(1);
				result.push(
					((hcp & 0x03c0) + 0x0040) << 10
					| (hcp & 0x003f) << 10
					| (lcp & 0x03ff)
				);
			}
			else {
				result.push($0.charCodeAt(0));
			}
		});
		return result;
	}

	function build (chars) {
		var result = [];
		var prevProp = GBP_SOT;
		var prevIndex = 0;
		var rawIndex = 0;
		for (var i = 0, goal = chars.length; i < goal; i++) {
			var nextProp = graphemeFinder(chars[i]);
			if (canBreak(prevProp, nextProp)) {
				if (prevIndex < i) {
					var grapheme = new Grapheme(chars.slice(prevIndex, i), rawIndex);
					result.push(grapheme);
					rawIndex += grapheme.rawString.length;
				}
				prevIndex = i;
			}
			prevProp = nextProp;
		}

		if (canBreak(prevProp, GBP_EOT)) {
			if (prevIndex < i) {
				result.push(
					new Grapheme(chars.slice(prevIndex, i), rawIndex)
				);
			}
		}

		return result;
	}

	function find (cp, table, units, otherValue) {
		var left = 0, right = ((table.length / units) >> 0) - 1;
		var middle, index, middlecp, length;

		while (left <= right) {
			middle = ((left + right) / 2) >> 0;
			index = middle * units;
			middlecp = pick4(table, index);
			length = pick2(table, index + 4);

			if (middlecp + length - 1 < cp) {
				left = middle + 1;
			}
			else if (cp < middlecp) {
				right = middle - 1;
			}
			else {
				return pick2(table, index + 6);
			}
		}

		return otherValue;
	}

	function createFinder (table, units, otherValue) {
		var cache = {};
		return function (cp) {
			if (cp in cache) {
				return cache[cp];
			}
			else {
				return cache[cp] = find(cp, table, units, otherValue);
			}
		};
	}

	function canBreak (prev, next) {
		/*
		 * This rules are taken from:
		 * http://unicode.org/reports/tr29/, Version 8.0.0, 2015-06-01
		 * ===========================================================
		 */

		// Break at the start and end of text.
		//   GB1: sot  ÷
		if (prev == GBP_SOT) return true;

		//   GB2: ÷  eot
		if (next == GBP_EOT) return true;

		// Do not break between a CR and LF.
		// Otherwise, break before and after controls.
		//   GB3: CR  ×  LF
		if (prev == GBP_CR && next == GBP_LF) return false;

		//   GB4: ( Control | CR | LF )  ÷
		if (prev == GBP_Control || prev == GBP_CR || prev == GBP_LF) return true;

		//   GB5: ÷  ( Control | CR | LF )
		if (next == GBP_Control || next == GBP_CR || next == GBP_LF) return true;

		// Do not break Hangul syllable sequences.
		//   GB6: L  ×  ( L | V | LV | LVT )
		if (prev == GBP_L && (next == GBP_L || next == GBP_V || next == GBP_LV || next == GBP_LVT)) return false;

		//   GB7: ( LV | V )  ×  ( V | T )
		if ((prev == GBP_LV || prev == GBP_V) && (next == GBP_V || next == GBP_T)) return false;

		//   GB8: ( LVT | T)  ×  T
		if ((prev == GBP_LVT || prev == GBP_T) && next == GBP_T) return false;

		// Do not break between regional indicator symbols.
		//   GB8a  Regional_Indicator  ×  Regional_Indicator
		if (prev == GBP_Regional_Indicator && next == GBP_Regional_Indicator) return false;

		// Do not break before extending characters.
		//   GB9: ×  Extend
		if (next == GBP_Extend) return false;

		// Only for extended grapheme clusters:
		// Do not break before SpacingMarks, or after Prepend characters.
		//   GB9a     ×  SpacingMark
		if (next == GBP_SpacingMark) return false;

		//   GB9b  Prepend  ×
		//   NOTE: At this time (Unicode 8.0), Prepend property has no characters.

		// Otherwise, break everywhere.
		//   GB10: Any  ÷  Any
		return true;
	}

	function getUTF16FromCodePoint (cp) {
		var p = (cp & 0x1f0000) >> 16;
		var o = cp & 0xffff;
		if (p) {
			return String.fromCharCode(0xd800 | ((p - 1) << 6) | ((o & 0xfc00) >> 10)) +
				String.fromCharCode(0xdc00 | (o & 0x03ff));
		}
		else {
			return String.fromCharCode(o);
		}
	}

	function getWords (s, useScripts) {
		var buf = [
			[WBP_SOT, undefined, undefined],
			[WBP_SOT, undefined, undefined]
		];
		var index = 0;
		var prevProp;
		s.replace(/[\ud800-\udb7f][\udc00-\udfff]|[\s\S]/g, function ($0) {
			var codePoint;
			if ($0.length == 2) {
				var hcp = $0.charCodeAt(0);
				var lcp = $0.charCodeAt(1);
				codePoint =
					((hcp & 0x03c0) + 0x0040) << 10
					| (hcp & 0x003f) << 10
					| (lcp & 0x03ff);
			}
			else {
				codePoint = $0.charCodeAt(0);
			}
			var p = wordFinder(codePoint);
			if (p == WBP_CR || p == WBP_LF || p == WBP_Newline) {
				prevProp = undefined;
			}
			else if (p == WBP_Extend || p == WBP_Format) {
				if (prevProp == undefined) {
					prevProp = p;
				}
				else {
					p = undefined;
				}
			}
			else {
				prevProp = p;
			}
			if (p != undefined) {
				buf.push([p, codePoint, index]);
			}
			index += $0.length;
		});

		buf.push(
			[WBP_EOT, undefined, index],
			[WBP_EOT, undefined, undefined]
		);

		var result = [];
		var prevIndex = 0;
		for (var i = 2, goal = buf.length - 1; i < goal; i++) {
			if (!canBreakWord(buf[i - 2][0], buf[i - 1][0],
							  buf[i][0], buf[i + 1][0])) continue;
			if (useScripts && isInScriptWord(buf[i - 1][1], buf[i][1])) continue;

			var index = buf[i][2];
			if (prevIndex < index) {
				result.push({
					text: s.substring(prevIndex, index),
					index: prevIndex,
					length: index - prevIndex
				});
				prevIndex = index;
			}
		}

		return result;
	}

	function canBreakWord (p2, p1, current, n1) {
		/*
		 * This rules are taken from:
		 * http://unicode.org/reports/tr29/, Version 8.0.0, 2015-06-01
		 * ===========================================================
		 */

		//Break at the start and end of text.
		//  WB1: sot  ÷
		if (p1 == WBP_SOT) return true;

		//  WB2:  ÷  eot
		if (current == WBP_EOT) return true;

		//Do not break within CRLF.
		//  WB3: CR  ×  LF
		if (p1 == WBP_CR && current == WBP_LF) return false;

		//Otherwise break before and after Newlines (including CR and LF)
		//  WB3a: (Newline | CR | LF)  ÷
		if (p1 == WBP_Newline || p1 == WBP_CR || p1 == WBP_LF) return true;

		//  WB3b:  ÷  (Newline | CR | LF)
		if (current == WBP_Newline || current == WBP_CR || current == WBP_LF) return true;

		//Ignore Format and Extend characters, except when they appear at the
		//beginning of a region of text.
		//(See Section 6.2, Replacing Ignore Rules.)
		//  WB4: X (Extend | Format)*  →  X
		/* this rule is processed in getWords() */

		//Do not break between most letters.
		//  WB5: AHLetter  ×  AHLetter
		if ((p1 == WBP_ALetter || p1 == WBP_Hebrew_Letter)
		&&  (current == WBP_Hebrew_Letter || current == WBP_ALetter)) return false;

		//Do not break letters across certain punctuation.
		//  WB6: AHLetter  ×  (MidLetter | MidNumLetQ) AHLetter
		if ((p1 == WBP_ALetter || p1 == WBP_Hebrew_Letter)
		&&  (current == WBP_MidLetter || current == WBP_MidNumLet || current == WBP_Single_Quote)
		&&  (n1 == WBP_ALetter || n1 == WBP_Hebrew_Letter)) return false;

		//  WB7: AHLetter (MidLetter | MidNumLetQ)  ×  AHLetter
		if ((p2 == WBP_ALetter || p2 == WBP_Hebrew_Letter)
		&&  (p1 == WBP_MidLetter || p1 == WBP_MidNumLet || p1 == WBP_Single_Quote)
		&&  (current == WBP_ALetter || current == WBP_Hebrew_Letter)) return false;

		//  WB7a: Hebrew_Letter  ×  Single_Quote
		if (p1 == WBP_Hebrew_Letter && current == WBP_Single_Quote) return false;

		//  WB7b: Hebrew_Letter  ×  Double_Quote Hebrew_Letter
		if (p1 == WBP_Hebrew_Letter
		&&  current == WBP_Double_Quote
		&&  n1 == WBP_Hebrew_Letter) return false;

		//  WB7c: Hebrew_Letter Double_Quote  ×  Hebrew_Letter
		if (p2 == WBP_Hebrew_Letter
		&&  p1 == WBP_Double_Quote
		&&  current == WBP_Hebrew_Letter) return false;

		//Do not break within sequences of digits, or digits adjacent to
		//letters (“3a”, or “A3”).
		//  WB8: Numeric  ×  Numeric
		if (p1 == WBP_Numeric && current == WBP_Numeric) return false;

		//  WB9: AHLetter  ×  Numeric
		if ((p1 == WBP_ALetter || p1 == WBP_Hebrew_Letter)
		&&  current == WBP_Numeric) return false;

		//  WB10: Numeric  ×  AHLetter
		if (p1 == WBP_Numeric
		&&  (current == WBP_ALetter || current == WBP_Hebrew_Letter)) return false;

		//Do not break within sequences, such as “3.2” or “3,456.789”.
		//  WB11: Numeric (MidNum | MidNumLetQ)  ×  Numeric
		if (p2 == WBP_Numeric
		&&  (p1 == WBP_MidNum || p1 == WBP_MidNumLet || p1 == WBP_Single_Quote)
		&&  current == WBP_Numeric) return false;

		//  WB12: Numeric  ×  (MidNum | MidNumLetQ) Numeric
		if (p1 == WBP_Numeric
		&&  (current == WBP_MidNum || current == WBP_MidNumLet || current == WBP_Single_Quote)
		&&  n1 == WBP_Numeric) return false;

		//Do not break between Katakana.
		//  WB13: Katakana  ×  Katakana
		//  [unistring extension]: do not use this rule. use WB13-unistring-1 instead of.
		//if (p1 == WBP_Katakana && current == WBP_Katakana) return false;

		//[unistring extension]: Do not break between Katakana, Hiragana, KanaExtension
		//  WB13-unistring-1: Katakana       ×  Katakana
		//                    Hiragana       ×  Hiragana
		//                    KanaExtension  ×  KanaExtension
		if ((p1 == WBP_Katakana || p1 == WBP_Hiragana || p1 == WBP_KanaExtension)
		&&  current == p1) return false;

		//[unistring extension]: Do not break between Kana and its extension
		//  WB13-unistring-2: (Katakana | Hiragana)  ×  KanaExtension
		if ((p1 == WBP_Katakana || p1 == WBP_Hiragana)
		&&  current == WBP_KanaExtension) return false;

		//[unistring extension]: Do not break between Kana and its extension
		//  WB13-unistring-3: KanaExtension  ×  (Katakana | Hiragana)
		if (p1 == WBP_KanaExtension
		&&  (current == WBP_Katakana || current == WBP_Hiragana)) return false;

		//[unistring extension]: Do not break between spaces
		//  WB13-unistring-4: Space  ×  Space
		if (p1 == WBP_Space && current == WBP_Space) return false;

		//Do not break from extenders.
		//  WB13a: (AHLetter | Numeric | Katakana | Hiragana | ExtendNumLet)  ×  ExtendNumLet
		//  [unistring extension]: added Hiragana and KanaExtension
		if ((p1 == WBP_ALetter || p1 == WBP_Hebrew_Letter
			|| p1 == WBP_Numeric || p1 == WBP_Katakana || p1 == WBP_Hiragana
			|| p1 == WBP_KanaExtension || p1 == WBP_ExtendNumLet)
		&&  current == WBP_ExtendNumLet) return false;

		//  WB13b: ExtendNumLet  ×  (AHLetter | Numeric | Katakana | Hiragana)
		//  [unistring extension]: added Hiragana and KanaExtension
		if (p1 == WBP_ExtendNumLet
		&&  (current == WBP_ALetter || current == WBP_Hebrew_Letter
			|| current == WBP_Numeric || current == WBP_Katakana
			|| current == WBP_Hiragana || current == WBP_KanaExtension)) return false;

		//Do not break between regional indicator symbols.
		//  WB13c: Regional_Indicator  ×  Regional_Indicator
		if (p1 == WBP_Regional_Indicator && current == WBP_Regional_Indicator) return false;

		//Otherwise, break everywhere (including around ideographs).
		//  WB14: Any  ÷  Any
		return true;
	}

	function isInScriptWord (lcp, rcp) {
		if (lcp == undefined || rcp == undefined) return false;
		var l = scriptFinder(lcp);
		var r = scriptFinder(rcp);
		if (l == r && l == SCRIPT_Common) return false;
		return l == r;
	}

	/*
	 * Grapheme class
	 */

	function Grapheme (codePoints, rawIndex) {
		if (codePoints != undefined) {
			this.codePoints = codePoints;
			this.updateRawString();
		}
		if (rawIndex != undefined) {
			this.rawIndex = rawIndex;
		}
	}

	Grapheme.prototype = {
		toString: function () {
			return this.rawString;
		},
		clone: function () {
			var result = new Grapheme;
			result.codePoints = this.codePoints.slice();
			result.rawString = this.rawString;
			result.rawIndex = this.rawIndex;
			return result;
		},
		updateRawString: function () {
			this.rawString = this.codePoints.reduce(function (result, cp) {
				return result + getUTF16FromCodePoint(cp);
			}, '');
		},
		dump: function (detail) {
			if (detail) {
				var log = [];
				log.push('codePoints: [' + this.codePoints.map(function (cp) {
					if (cp < 0x10000) {
						return 'U+' + ('0000' + cp.toString(16).toUpperCase()).substr(-4);
					}
					else {
						return 'U+' + cp.toString(16).toUpperCase();
					}
				}).join(', ') + ']');
				log.push('  rawIndex: ' + this.rawIndex);
				log.push(' rawString: (' + this.rawString.length + ') "' + this.rawString + '"');
				return log.join('\n');
			}
			else {
				return this.codePoints
					.map(function (cp) {
						if (cp < 0x10000) {
							return ('0000' + cp.toString(16).toUpperCase()).substr(-4);
						}
						else {
							return cp.toString(16).toUpperCase();
						}
					})
					.join(' × ');
			}
		}
	};

	/*
	 * Unistring class
	 */

	function Unistring (s) {
		if (!(this instanceof Unistring)) {
			return new Unistring(s);
		}
		if (typeof s == 'string') {
			this.clusters = build(resolveSurrogates(s));
		}
		else if (s instanceof Array) {
			this.clusters = [];
			var rawIndex = 0;
			for (var i = 0, goal = s.length; i < goal; i++) {
				if (!(s[i] instanceof Grapheme)) {
					throw new Error(
						'Unistring: invalid cluster class: ' +
						Object.prototype.toString.call(s[i]));
				}
				this.clusters[i] = s[i].clone();
				this.clusters[i].rawIndex = rawIndex;
				rawIndex += this.clusters[i].rawString.length;
			}
		}
		else {
			throw new Error('Unistring: invalid argument');
		}
	}

	Unistring.prototype = {
		_ensureIndex: function (index, isEnd) {
			if (index == undefined) {
				index = isEnd ? this.clusters.length : 0;
			}
			if (index < 0) {
				index = this.clusters.length + index;
			}
			return Math.max(0, Math.min(index, this.clusters.length));
		},
		_toUnistring: function (s, caller) {
			if (typeof s == 'string') {
				return new Unistring(s);
			}
			else if (s instanceof Unistring) {
				return s;
			}
			else {
				throw new Error(
					'Unistring#' + (caller || '') + ': invalid argument');
			}
		},

		/*
		 * methods
		 */

		clone: function () {
			return new Unistring(this.clusters.slice());
		},
		dump: function (detail) {
			var log = [];
			if (detail) {
				this.clusters.forEach(function (g, index) {
					log.push('*** Grapheme Cluster #' + index + ' ***');
					log.push(g.dump(detail));
				});
				return log.join('\n');
			}
			else {
				return '÷ ' + this.clusters
					.map(function (g) {return g.dump(detail)})
					.join(' ÷ ') + ' ÷';
			}
		},
		toString: function () {
			return this.clusters.reduce(function (result, g) {
				return result + g.toString();
			}, '');
		},
		delete: function (start, length) {
			start = this._ensureIndex(start);
			if (length == undefined || start + length > this.clusters.length) {
				length = this.clusters.length - start;
			}
			length = Math.max(0, length);

			var delta = 0;
			for (var i = start, goal = start + length; i < goal; i++) {
				delta += this.clusters[i].rawString.length;
			}
			for (var i = start + length, goal = this.clusters.length; i < goal; i++) {
				this.clusters[i].rawIndex -= delta;
			}

			this.clusters.splice(start, length);
			return this;
		},
		insert: function (s, start) {
			start = this._ensureIndex(start);
			s = this._toUnistring(s, 'insert').clusters.slice();

			var srcDelta = 0;
			var dstDelta = 0;
			if (start == this.clusters.length) {
				if (this.clusters.length) {
					var last = this.clusters.length - 1;
					srcDelta = this.clusters[last].rawIndex +
						this.clusters[last].rawString.length;
				}
			}
			else {
				srcDelta = this.clusters[start].rawIndex;
			}

			for (var i = 0, goal = s.length; i < goal; i++) {
				s[i].rawIndex += srcDelta;
				dstDelta += s[i].rawString.length;
			}
			for (var i = start, goal = this.clusters.length; i < goal; i++) {
				this.clusters[i].rawIndex += dstDelta;
			}

			s.unshift(start, 0);
			this.clusters.splice.apply(this.clusters, s);
			return this;
		},
		append: function (s) {
			return this.insert(s, this.clusters.length);
		},
		codePointsAt: function (index) {
			index = this._ensureIndex(index);
			if (index < 0 || index >= this.clusters.length) return undefined;
			return this.clusters[index].codePoints;
		},
		clusterAt: function (index) {
			return this.rawStringAt.apply(this, arguments);
		},
		rawStringAt: function (index) {
			index = this._ensureIndex(index);
			if (index < 0 || index >= this.clusters.length) return '';
			return this.clusters[index].rawString;
		},
		rawIndexAt: function (index) {
			index = this._ensureIndex(index);
			if (index < 0 || index >= this.clusters.length) return NaN;
			return this.clusters[index].rawIndex;
		},
		forEach: function () {
			this.clusters.forEach.apply(this.clusters, arguments);
		},

		/*
		 * string like properties and methods
		 */

		get length () {
			return this.clusters.length;
		},
		charAt: function (index) {
			if (index < 0 || index >= this.clusters.length) return '';
			return this.clusters[index].rawString.charAt(0);
		},
		charCodeAt: function (index) {
			if (index < 0 || index >= this.clusters.length) return NaN;
			return this.clusters[index].codePoints[0];
		},
		substring: function (start, end) {
			if (start == undefined) {
				start = 0;
			}
			if (end == undefined) {
				end = this.clusters.length;
			}
			start = Math.max(0, Math.min(start, this.clusters.length));
			end = Math.max(0, Math.min(end, this.clusters.length));
			if (start > end) {
				var tmp = start;
				start = end;
				end = tmp;
			}
			return new Unistring(this.clusters.slice(start, end));
		},
		substr: function (start, length) {
			start = this._ensureIndex(start);
			if (length == undefined || start + length > this.clusters.length) {
				length = this.clusters.length - start;
			}
			if (length < 0) {
				length = 0;
			}
			return new Unistring(this.clusters.slice(start, start + length));
		},
		slice: function (start, end) {
			start = this._ensureIndex(start);
			end = this._ensureIndex(end, true);
			return new Unistring(this.clusters.slice(start, end));
		},
		concat: function (s) {
			return this.insert(s, this.clusters.length);
		},
		indexOf: function (s) {
			s = this._toUnistring(s, 'indexOf');

			var whole = this.toString();
			var part = s.toString();
			var rawIndex = 0;
			var clusterIndex = 0;

			while ((rawIndex = whole.indexOf(part, rawIndex)) >= 0) {
				while (clusterIndex < this.clusters.length
					   && this.clusters[clusterIndex].rawIndex < rawIndex) {
					clusterIndex++;
				}

				if (clusterIndex >= this.clusters.length) {
					return -1;
				}

				if (this.substr(clusterIndex, s.length).toString() == part) {
					return clusterIndex;
				}

				rawIndex++;
			}

			return -1;
		},
		lastIndexOf: function (s) {
			s = this._toUnistring(s, 'lastIndexOf');

			var whole = this.toString();
			var part = s.toString();
			var rawIndex = whole.length - 1;
			var clusterIndex = this.clusters.length - 1;

			while (rawIndex >= 0
				   && (rawIndex = whole.lastIndexOf(part, rawIndex)) >= 0) {
				while (clusterIndex >= 0
					   && this.clusters[clusterIndex].rawIndex > rawIndex) {
					clusterIndex--;
				}

				if (clusterIndex < 0) {
					return -1;
				}

				if (this.substr(clusterIndex, s.length).toString() == part) {
					return clusterIndex;
				}

				rawIndex--;
			}

			return -1;
		}
	};

	/*
	 * exporting
	 */

	Unistring.resolveSurrogates = resolveSurrogates;
	Unistring.findGraphemeBreakProp = function (codePoint) {
		return find(
			codePoint, GRAPHEME_BREAK_PROPS,
			GRAPHEME_BREAK_PROP_UNIT_LENGTH, GBP_Other);
	};
	Unistring.getUTF16FromCodePoint = getUTF16FromCodePoint;
	Unistring.getGBPCodeFromName = getGBPCodeFromName;
	Unistring.getWBPCodeFromName = getWBPCodeFromName;
	Unistring.getWords = getWords;

	if (typeof module !== 'undefined' && typeof exports !== 'undefined') {
		module.exports = Unistring;
	}
	else {
		global.Unistring = Unistring;
	}

})(this);

// vim:set ts=4 sw=4 fenc=UTF-8 ff=unix ft=javascript fdm=marker fmr=<<<,>>> :
