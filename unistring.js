/**
 * Unistring: breaks a native string into an array of grapheme cluster,
 *            and provides native string like manipulation methods.
 * =============================================================================
 *
 *
 * @author akahuku@gmail.com
 * @license MIT
 */

(function (global) {
	'use strict';

	/*
	 * data table, taken from:
	 * http://www.unicode.org/Public/9.0.0/ucd/auxiliary/GraphemeBreakProperty.txt
	 */

	// GENERATED CODE START <<<1
	// This data was generated by the command 'node mkdata.js -g'.
	var GRAPHEME_BREAK_PROPS = '\
0600004001050A002000060B004000040D002000060E004002067F00200406AD002000070003000E\
078304E000079105A00507BF05200007C105400007C405400007C7052000030006C0000710066001\
061C062000074B06A002077006200007D606E00003DD06200007DF06C00007E706400007EA068000\
030F0720000711072000073007600307A607600107EB0720010716088000071B0820010725086000\
072908A000075908600007D408C00103E208200007E30800040903092000073A092000093B092000\
073C092000093E09600007410900010949098000074D092000094E094000075109E0000762094000\
0781092000098209400007BC09200007BE09200009BF09400007C109800009C709400009CB094000\
07CD09200007D709200007E209400007010A400009030A2000073C0A2000093E0A600007410A4000\
07470A4000074B0A600007510A200007700A400007750A200007810A400009830A200007BC0A2000\
09BE0A600007C10AA00007C70A400009C90A200009CB0A400007CD0A200007E20A400007010B2000\
09020B4000073C0B2000073E0B400009400B200007410B800009470B4000094B0B4000074D0B2000\
07560B400007620B400007820B200007BE0B200009BF0B200007C00B200009C10B400009C60B6000\
09CA0B600007CD0B200007D70B200007000C200009010C6000073E0C600009410C800007460C6000\
074A0C800007550C400007620C400007810C200009820C400007BC0C200009BE0C200007BF0C2000\
09C00C400007C20C200009C30C400007C60C200009C70C400009CA0C400007CC0C400007D50C4000\
07E20C400007010D200009020D4000073E0D2000093F0D400007410D800009460D6000094A0D6000\
074D0D2000034E0D200007570D200007620D400009820D400007CA0D200007CF0D200009D00D4000\
07D20D600007D60D200009D80DE00007DF0D200009F20D400007310E200009330E200007340EE000\
07470E000107B10E200009B30E200007B40EC00007BB0E400007C80EC00007180F400007350F2000\
07370F200007390F2000093E0F400007710FC001097F0F200007800FA00007860F4000078D0F6001\
07990F800407C60F2000072D1080000931102000073210C0000739104000093B104000073D104000\
09561040000758104000075E1060000771108000078210200009841020000785104000078D102000\
079D1020000A0011000C0B601100090CA811000B075D136000071217600007321760000752174000\
077217400007B417400009B617200007B717E00009BE17000107C617200009C717400007C9176001\
07DD172000070B186000060E182000078518400007A9182000072019600009231980000727194000\
092919600009301940000732192000093319C000073919600007171A400009191A4000071B1A2000\
09551A200007561A200009571A200007581AE00007601A200007621A200007651A0001096D1AC000\
07731A4001077F1A200007B01AE00107001B800009041B200007341B200009351B200007361BA000\
093B1B2000073C1B2000093D1BA00007421B200009431B4000076B1B200107801B400009821B2000\
09A11B200007A21B800009A61B400007A81B400009AA1B200007AB1B600007E61B200009E71B2000\
07E81B400009EA1B600007ED1B200009EE1B200007EF1B600009F21B400009241C0001072C1C0001\
09341C400007361C400007D01C600007D41CA00109E11C200007E21CE00007ED1C200009F21C4000\
07F41C200007F81C400007C01DC00607FB1DA000060B202000070C202000110D202000060E204000\
062820E000066020000207D02020040F1D2620000FF92620000F0A278000126427200007EF2C6000\
077F2D200007E02D0004072A30C0000799304000076FA680000774A64001079EA6400007F0A64000\
0702A820000706A82000070BA820000923A840000725A840000927A820000980A8400009B4A80002\
07C4A8400007E0A840020726A900010747A960010952A940000A60A9A0030780A960000983A92000\
07B3A9200009B4A9400007B6A9800009BAA9400007BCA9200009BDA9800007E5A920000729AAC000\
092FAA40000731AA40000933AA40000735AA40000743AA2000074CAA2000094DAA2000077CAA2000\
07B0AA200007B2AA600007B7AA400007BEAA400007C1AA200009EBAA200007ECAA400009EEAA4000\
09F5AA200007F6AA200009E3AB400007E5AB200009E6AB400007E8AB200009E9AB400009ECAB2000\
07EDAB20000D00AC20000E01AC60030D1CAC20000E1DAC60030D38AC20000E39AC60030D54AC2000\
0E55AC60030D70AC20000E71AC60030D8CAC20000E8DAC60030DA8AC20000EA9AC60030DC4AC2000\
0EC5AC60030DE0AC20000EE1AC60030DFCAC20000EFDAC60030D18AD20000E19AD60030D34AD2000\
0E35AD60030D50AD20000E51AD60030D6CAD20000E6DAD60030D88AD20000E89AD60030DA4AD2000\
0EA5AD60030DC0AD20000EC1AD60030DDCAD20000EDDAD60030DF8AD20000EF9AD60030D14AE2000\
0E15AE60030D30AE20000E31AE60030D4CAE20000E4DAE60030D68AE20000E69AE60030D84AE2000\
0E85AE60030DA0AE20000EA1AE60030DBCAE20000EBDAE60030DD8AE20000ED9AE60030DF4AE2000\
0EF5AE60030D10AF20000E11AF60030D2CAF20000E2DAF60030D48AF20000E49AF60030D64AF2000\
0E65AF60030D80AF20000E81AF60030D9CAF20000E9DAF60030DB8AF20000EB9AF60030DD4AF2000\
0ED5AF60030DF0AF20000EF1AF60030D0CB020000E0DB060030D28B020000E29B060030D44B02000\
0E45B060030D60B020000E61B060030D7CB020000E7DB060030D98B020000E99B060030DB4B02000\
0EB5B060030DD0B020000ED1B060030DECB020000EEDB060030D08B120000E09B160030D24B12000\
0E25B160030D40B120000E41B160030D5CB120000E5DB160030D78B120000E79B160030D94B12000\
0E95B160030DB0B120000EB1B160030DCCB120000ECDB160030DE8B120000EE9B160030D04B22000\
0E05B260030D20B220000E21B260030D3CB220000E3DB260030D58B220000E59B260030D74B22000\
0E75B260030D90B220000E91B260030DACB220000EADB260030DC8B220000EC9B260030DE4B22000\
0EE5B260030D00B320000E01B360030D1CB320000E1DB360030D38B320000E39B360030D54B32000\
0E55B360030D70B320000E71B360030D8CB320000E8DB360030DA8B320000EA9B360030DC4B32000\
0EC5B360030DE0B320000EE1B360030DFCB320000EFDB360030D18B420000E19B460030D34B42000\
0E35B460030D50B420000E51B460030D6CB420000E6DB460030D88B420000E89B460030DA4B42000\
0EA5B460030DC0B420000EC1B460030DDCB420000EDDB460030DF8B420000EF9B460030D14B52000\
0E15B560030D30B520000E31B560030D4CB520000E4DB560030D68B520000E69B560030D84B52000\
0E85B560030DA0B520000EA1B560030DBCB520000EBDB560030DD8B520000ED9B560030DF4B52000\
0EF5B560030D10B620000E11B660030D2CB620000E2DB660030D48B620000E49B660030D64B62000\
0E65B660030D80B620000E81B660030D9CB620000E9DB660030DB8B620000EB9B660030DD4B62000\
0ED5B660030DF0B620000EF1B660030D0CB720000E0DB760030D28B720000E29B760030D44B72000\
0E45B760030D60B720000E61B760030D7CB720000E7DB760030D98B720000E99B760030DB4B72000\
0EB5B760030DD0B720000ED1B760030DECB720000EEDB760030D08B820000E09B860030D24B82000\
0E25B860030D40B820000E41B860030D5CB820000E5DB860030D78B820000E79B860030D94B82000\
0E95B860030DB0B820000EB1B860030DCCB820000ECDB860030DE8B820000EE9B860030D04B92000\
0E05B960030D20B920000E21B960030D3CB920000E3DB960030D58B920000E59B960030D74B92000\
0E75B960030D90B920000E91B960030DACB920000EADB960030DC8B920000EC9B960030DE4B92000\
0EE5B960030D00BA20000E01BA60030D1CBA20000E1DBA60030D38BA20000E39BA60030D54BA2000\
0E55BA60030D70BA20000E71BA60030D8CBA20000E8DBA60030DA8BA20000EA9BA60030DC4BA2000\
0EC5BA60030DE0BA20000EE1BA60030DFCBA20000EFDBA60030D18BB20000E19BB60030D34BB2000\
0E35BB60030D50BB20000E51BB60030D6CBB20000E6DBB60030D88BB20000E89BB60030DA4BB2000\
0EA5BB60030DC0BB20000EC1BB60030DDCBB20000EDDBB60030DF8BB20000EF9BB60030D14BC2000\
0E15BC60030D30BC20000E31BC60030D4CBC20000E4DBC60030D68BC20000E69BC60030D84BC2000\
0E85BC60030DA0BC20000EA1BC60030DBCBC20000EBDBC60030DD8BC20000ED9BC60030DF4BC2000\
0EF5BC60030D10BD20000E11BD60030D2CBD20000E2DBD60030D48BD20000E49BD60030D64BD2000\
0E65BD60030D80BD20000E81BD60030D9CBD20000E9DBD60030DB8BD20000EB9BD60030DD4BD2000\
0ED5BD60030DF0BD20000EF1BD60030D0CBE20000E0DBE60030D28BE20000E29BE60030D44BE2000\
0E45BE60030D60BE20000E61BE60030D7CBE20000E7DBE60030D98BE20000E99BE60030DB4BE2000\
0EB5BE60030DD0BE20000ED1BE60030DECBE20000EEDBE60030D08BF20000E09BF60030D24BF2000\
0E25BF60030D40BF20000E41BF60030D5CBF20000E5DBF60030D78BF20000E79BF60030D94BF2000\
0E95BF60030DB0BF20000EB1BF60030DCCBF20000ECDBF60030DE8BF20000EE9BF60030D04C02000\
0E05C060030D20C020000E21C060030D3CC020000E3DC060030D58C020000E59C060030D74C02000\
0E75C060030D90C020000E91C060030DACC020000EADC060030DC8C020000EC9C060030DE4C02000\
0EE5C060030D00C120000E01C160030D1CC120000E1DC160030D38C120000E39C160030D54C12000\
0E55C160030D70C120000E71C160030D8CC120000E8DC160030DA8C120000EA9C160030DC4C12000\
0EC5C160030DE0C120000EE1C160030DFCC120000EFDC160030D18C220000E19C260030D34C22000\
0E35C260030D50C220000E51C260030D6CC220000E6DC260030D88C220000E89C260030DA4C22000\
0EA5C260030DC0C220000EC1C260030DDCC220000EDDC260030DF8C220000EF9C260030D14C32000\
0E15C360030D30C320000E31C360030D4CC320000E4DC360030D68C320000E69C360030D84C32000\
0E85C360030DA0C320000EA1C360030DBCC320000EBDC360030DD8C320000ED9C360030DF4C32000\
0EF5C360030D10C420000E11C460030D2CC420000E2DC460030D48C420000E49C460030D64C42000\
0E65C460030D80C420000E81C460030D9CC420000E9DC460030DB8C420000EB9C460030DD4C42000\
0ED5C460030DF0C420000EF1C460030D0CC520000E0DC560030D28C520000E29C560030D44C52000\
0E45C560030D60C520000E61C560030D7CC520000E7DC560030D98C520000E99C560030DB4C52000\
0EB5C560030DD0C520000ED1C560030DECC520000EEDC560030D08C620000E09C660030D24C62000\
0E25C660030D40C620000E41C660030D5CC620000E5DC660030D78C620000E79C660030D94C62000\
0E95C660030DB0C620000EB1C660030DCCC620000ECDC660030DE8C620000EE9C660030D04C72000\
0E05C760030D20C720000E21C760030D3CC720000E3DC760030D58C720000E59C760030D74C72000\
0E75C760030D90C720000E91C760030DACC720000EADC760030DC8C720000EC9C760030DE4C72000\
0EE5C760030D00C820000E01C860030D1CC820000E1DC860030D38C820000E39C860030D54C82000\
0E55C860030D70C820000E71C860030D8CC820000E8DC860030DA8C820000EA9C860030DC4C82000\
0EC5C860030DE0C820000EE1C860030DFCC820000EFDC860030D18C920000E19C960030D34C92000\
0E35C960030D50C920000E51C960030D6CC920000E6DC960030D88C920000E89C960030DA4C92000\
0EA5C960030DC0C920000EC1C960030DDCC920000EDDC960030DF8C920000EF9C960030D14CA2000\
0E15CA60030D30CA20000E31CA60030D4CCA20000E4DCA60030D68CA20000E69CA60030D84CA2000\
0E85CA60030DA0CA20000EA1CA60030DBCCA20000EBDCA60030DD8CA20000ED9CA60030DF4CA2000\
0EF5CA60030D10CB20000E11CB60030D2CCB20000E2DCB60030D48CB20000E49CB60030D64CB2000\
0E65CB60030D80CB20000E81CB60030D9CCB20000E9DCB60030DB8CB20000EB9CB60030DD4CB2000\
0ED5CB60030DF0CB20000EF1CB60030D0CCC20000E0DCC60030D28CC20000E29CC60030D44CC2000\
0E45CC60030D60CC20000E61CC60030D7CCC20000E7DCC60030D98CC20000E99CC60030DB4CC2000\
0EB5CC60030DD0CC20000ED1CC60030DECCC20000EEDCC60030D08CD20000E09CD60030D24CD2000\
0E25CD60030D40CD20000E41CD60030D5CCD20000E5DCD60030D78CD20000E79CD60030D94CD2000\
0E95CD60030DB0CD20000EB1CD60030DCCCD20000ECDCD60030DE8CD20000EE9CD60030D04CE2000\
0E05CE60030D20CE20000E21CE60030D3CCE20000E3DCE60030D58CE20000E59CE60030D74CE2000\
0E75CE60030D90CE20000E91CE60030DACCE20000EADCE60030DC8CE20000EC9CE60030DE4CE2000\
0EE5CE60030D00CF20000E01CF60030D1CCF20000E1DCF60030D38CF20000E39CF60030D54CF2000\
0E55CF60030D70CF20000E71CF60030D8CCF20000E8DCF60030DA8CF20000EA9CF60030DC4CF2000\
0EC5CF60030DE0CF20000EE1CF60030DFCCF20000EFDCF60030D18D020000E19D060030D34D02000\
0E35D060030D50D020000E51D060030D6CD020000E6DD060030D88D020000E89D060030DA4D02000\
0EA5D060030DC0D020000EC1D060030DDCD020000EDDD060030DF8D020000EF9D060030D14D12000\
0E15D160030D30D120000E31D160030D4CD120000E4DD160030D68D120000E69D160030D84D12000\
0E85D160030DA0D120000EA1D160030DBCD120000EBDD160030DD8D120000ED9D160030DF4D12000\
0EF5D160030D10D220000E11D260030D2CD220000E2DD260030D48D220000E49D260030D64D22000\
0E65D260030D80D220000E81D260030D9CD220000E9DD260030DB8D220000EB9D260030DD4D22000\
0ED5D260030DF0D220000EF1D260030D0CD320000E0DD360030D28D320000E29D360030D44D32000\
0E45D360030D60D320000E61D360030D7CD320000E7DD360030D98D320000E99D360030DB4D32000\
0EB5D360030DD0D320000ED1D360030DECD320000EEDD360030D08D420000E09D460030D24D42000\
0E25D460030D40D420000E41D460030D5CD420000E5DD460030D78D420000E79D460030D94D42000\
0E95D460030DB0D420000EB1D460030DCCD420000ECDD460030DE8D420000EE9D460030D04D52000\
0E05D560030D20D520000E21D560030D3CD520000E3DD560030D58D520000E59D560030D74D52000\
0E75D560030D90D520000E91D560030DACD520000EADD560030DC8D520000EC9D560030DE4D52000\
0EE5D560030D00D620000E01D660030D1CD620000E1DD660030D38D620000E39D660030D54D62000\
0E55D660030D70D620000E71D660030D8CD620000E8DD660030DA8D620000EA9D660030DC4D62000\
0EC5D660030DE0D620000EE1D660030DFCD620000EFDD660030D18D720000E19D760030D34D72000\
0E35D760030D50D720000E51D760030D6CD720000E6DD760030D88D720000E89D760030BB0D7E002\
0CCBD720060600D8E0FF06FFDF2000071EFB20000700FE00020720FE000206FFFE2000079EFF4000\
06F0FF800107FD01210007E0022100077603A10007010A610007050A4100070C0A810007380A6100\
073F0A210007E50A4100090010210007011021000902102100073810E101077F1061000982102100\
09B010610007B310810009B710410007B910410003BD1021000700116100072711A100092C112100\
072D11010107731121000780114100098211210009B311610007B611210109BF11410003C2114100\
07CA116100092C126100072F1261000932124100073412210009351221000736124100073E122100\
07DF12210009E012610007E312010107001341000902134100073C132100073E132100093F132100\
074013210009411381000947134100094B13610007571321000962134100076613E100077013A100\
09351461000738140101094014410007421461000945142100074614210007B014210009B1144100\
07B314C10009B914210007BA14210009BB14410007BD14210009BE14210007BF14410009C1142100\
07C214410007AF15210009B015410007B215810009B815810007BC15410009BE15210007BF154100\
07DC15410009301661000733160101093B164100073D162100093E162100073F16410007AB162100\
09AC16210007AD16210009AE16410007B016C10009B616210007B7162100071D1761000920174100\
07221781000926172100072717A100092F1C210007301CE10007381CC100093E1C2100073F1C2100\
07921CC10209A91C210007AA1CE10009B11C210007B21C410009B41C210007B51C410007F06AA100\
07306BE10009516FC105078F6F8100079DBC410006A0BC81000765D121000966D121000767D16100\
096DD12100076ED1A1000673D10101077BD101010785D1E10007AAD181000742D261000700DAE106\
073BDA41060775DA21000784DA2100079BDAA10007A1DAE1010700E0E1000708E02102071BE0E100\
0723E041000726E0A10007D0E8E1000744E9E10008E6F141030F85F321000FC3F341000FCAF34100\
10FBF3A1000F42F441000F46F461011366F481000F6EF421000F70F421010F7CF421000F81F46100\
0F85F46100128BF421000FAAF421000F75F521000F7AF521000F90F521000F95F5410012E8F52100\
0F45F661000F4BF6A1000FA3F621000FB4F661000FC0F621000F18F9E1000F26F921000F30F92100\
0F33F9E1000F3CF961000600000E040720000E0C0680000E100700010E1E06F001EEFF06EF092EC2\
'.replace(
	/[0-9A-F]{2}/g,
	function($0){return String.fromCharCode(parseInt($0, 16))});

	var /* a */GBP_Other = 0;
	var /* b */GBP_SOT = 1;
	var /* c */GBP_EOT = 2;
	var /* d */GBP_Prepend = 3;
	var /* e */GBP_CR = 4;
	var /* f */GBP_LF = 5;
	var /* g */GBP_Control = 6;
	var /* h */GBP_Extend = 7;
	var /* i */GBP_Regional_Indicator = 8;
	var /* j */GBP_SpacingMark = 9;
	var /* k */GBP_L = 10;
	var /* l */GBP_V = 11;
	var /* m */GBP_T = 12;
	var /* n */GBP_LV = 13;
	var /* o */GBP_LVT = 14;
	var /* p */GBP_E_Base = 15;
	var /* q */GBP_E_Modifier = 16;
	var /* r */GBP_ZWJ = 17;
	var /* s */GBP_Glue_After_Zwj = 18;
	var /* t */GBP_E_Base_GAZ = 19;

	var GRAPHEME_BREAK_PROP_UNIT_LENGTH = 5;

	var GBP = {
		'Other': 0,
		'SOT': 1,
		'EOT': 2,
		'Prepend': 3,
		'CR': 4,
		'LF': 5,
		'Control': 6,
		'Extend': 7,
		'Regional_Indicator': 8,
		'SpacingMark': 9,
		'L': 10,
		'V': 11,
		'T': 12,
		'LV': 13,
		'LVT': 14,
		'E_Base': 15,
		'E_Modifier': 16,
		'ZWJ': 17,
		'Glue_After_Zwj': 18,
		'E_Base_GAZ': 19
	};

	// GENERATED CODE END
	// >>>

	/*
	 * data table, taken from:
	 * http://www.unicode.org/Public/9.0.0/ucd/auxiliary/WordBreakProperty.txt
	 */

	// GENERATED CODE START <<<1
	// This data was generated by the command 'node mkdata.js -w'.
	var WORD_BREAK_PROPS = '\
1A09002000070A002000080B004000060D0020001A20002000032200200004270020000E2C002000\
0F2E00200010300040010D3A0020000E3B0020000C41004003115F0020000C610040030885002000\
1AA00020000CAA0020000BAD0020000CB50020000DB70020000CBA0020000CC000E0020CD800E003\
0CF80040390CC60280010DD70220000CE002A0000CEC0220000CEE022000090003000E0C7003A000\
0C760340000C7A0380000E7E0320000C7F0320000C860320000D870320000C880360000C8C032000\
0C8E0380020CA303600A0CF7036011098304E0000C8A04C0140C3105C0040C590520000C6105E004\
0E89052000099105A00509BF05200009C105400009C405400009C705200005D005600305F0056000\
0CF30520000DF40520000B0006C0000E0C06400009100660010B1C0620000C20066005094B06A002\
1060064001106B0620000E6C0620000C6E06400009700620000C7106600C0CD506200009D606E000\
0BDD06200009DF06C0000CE506400009E706400009EA0680000CEE06400010F00640010CFA066000\
0CFF0620000B0F0720000C1007200009110720000C1207C00309300760030C4D07200B09A6076001\
0CB107200010C00740010CCA07200409EB0720010CF40740000EF80720000CFA0720000C0008C002\
09160880000C1A082000091B0820010C2408200009250860000C28082000092908A0000C40082003\
09590860000CA008A0020CB608000109D408C0010BE208200009E30820040C0409C006093A096000\
0C3D092000093E0940020C50092000095109E0000C58094001096209400010660940010C71090002\
09810960000C850900010C8F0940000C9309C0020CAA09E0000CB20920000CB609800009BC092000\
0CBD09200009BE09E00009C709400009CB0960000CCE09200009D70920000CDC0940000CDF096000\
09E209400010E60940010CF009400009010A60000C050AC0000C0F0A40000C130AC0020C2A0AE000\
0C320A40000C350A40000C380A4000093C0A2000093E0AA00009470A4000094B0A600009510A2000\
0C590A80000C5E0A200010660A400109700A40000C720A600009750A200009810A60000C850A2001\
0C8F0A60000C930AC0020CAA0AE0000CB20A40000CB50AA00009BC0A20000CBD0A200009BE0A0001\
09C70A600009CB0A60000CD00A20000CE00A400009E20A400010E60A40010CF90A200009010B6000\
0C050B00010C0F0B40000C130BC0020C2A0BE0000C320B40000C350BA000093C0B20000C3D0B2000\
093E0BE00009470B4000094B0B600009560B40000C5C0B40000C5F0B600009620B400010660B4001\
0C710B200009820B20000C830B20000C850BC0000C8E0B60000C920B80000C990B40000C9C0B2000\
0C9E0B40000CA30B40000CA80B60000CAE0B800109BE0BA00009C60B600009CA0B80000CD00B2000\
09D70B200010E60B400109000C80000C050C00010C0E0C60000C120CE0020C2A0C00020C3D0C2000\
093E0CE00009460C6000094A0C800009550C40000C580C60000C600C400009620C400010660C4001\
0C800C200009810C60000C850C00010C8E0C60000C920CE0020CAA0C40010CB50CA00009BC0C2000\
0CBD0C200009BE0CE00009C60C600009CA0C800009D50C40000CDE0C20000CE00C400009E20C4000\
10E60C40010CF10C400009010D60000C050D00010C0E0D60000C120D20050C3D0D2000093E0DE000\
09460D6000094A0D80000C4E0D20000C540D600009570D20000C5F0D600009620D400010660D4001\
0C7A0DC00009820D40000C850D40020C9A0D00030CB30D20010CBD0D20000CC00DE00009CA0D2000\
09CF0DC00009D60D200009D80D000110E60D400109F20D400009310E200009340EE00009470E0001\
10500E400109B10E200009B40EC00009BB0E400009C80EC00010D00E40010C000F200009180F4000\
10200F400109350F200009370F200009390F2000093E0F40000C400F00010C490F800409710F8002\
09860F40000C880FA000098D0F600109990F800409C60F2000092B10800210401040010956108000\
095E1060000962106000096710E00009711080000982108001098F1020001090104001099A108000\
0CA010C0040CC71020000CCD1020000CD01060050CFC10A0290C4A1280000C5012E0000C58122000\
0C5A1280000C601220050C8A1280000C901220040CB21280000CB812E0000CC01220000CC2128000\
0CC812E0010CD81220070C121380000C18136008095D1360000C801300020CA013C00A0CF813C000\
0C0114804D0C6F1620020C811640030CA01660090CEE1660010C0017A0010C0E1780000912176000\
0C2017400209321760000C4017400209521740000C6017A0010C6E176000097217400009B4170004\
09DD17200010E0174001090B1860000B0E18200010101840010C2018000B0C8018A0000985184000\
0C8718400409A91820000CAA1820000CB018C0080C0019E003092019800109301980011046194001\
10D01940010C001AE00209171AA00009551A400109601AA003097F1A200010801A400110901A4001\
09B01AE00109001BA0000C051BE00509341B20020C451BE00010501B4001096B1B200109801B6000\
0C831BC00309A11BA0010CAE1B400010B01B40010CBA1B800509E61BC0010C001C800409241C8002\
10401C40010C4D1C600010501C40010C5A1C80040C801C200109D01C600009D41CA0020CE91C8000\
09ED1C20000CEE1C800009F21C60000CF51C400009F81C40000C001D001809C01DC00609FB1DA000\
0C001EC0220C181FC0000C201FC0040C481FC0000C501F00010C591F20000C5B1F20000C5D1F2000\
0C5F1FE0030C801FA0060CB61FE0000CBE1F20000CC21F60000CC61FE0000CD01F80000CD61FC000\
0CE01FA0010CF21F60000CF61FE0001A00208001090C202000140D2020000B0E2040000F18204000\
0F242020000D2720200008282040000B2A20A000112F202000113F2040000E442020001154202000\
1A5F2020000B6020A0000B662040010C712020000C7F2020000C9020A00109D02020040C02212000\
0C072120000C0A2140010C152120000C1921A0000C242120000C262120000C282120000C2A218000\
0C2F2160010C3C2180000C4521A0000C4E2120000C602120050CB6248006121D26200012F9262000\
120A27800015642720000C002CE0050C302CE0050C602CA0100CEB2C800009EF2C60000CF22C4000\
0C002DC0040C272D20000C2D2D20000C302D00070C6F2D2000097F2D20000C802DE0020CA02DE000\
0CA82DE0000CB02DE0000CB82DE0000CC02DE0000CC82DE0000CD02DE0000CD82DE00009E02D0004\
0C2F2E20001A003020000C05302000092A30C000193130A0000C3B304000184130C00A0999304000\
199B308000189F30200019A030200017A130400B19FC30600017FF3020000C053120050C3131C00B\
0CA031600317F031000217D032E005170033000B0C00A0A0910CD0A4C0050C00A5A0210C10A60002\
1020A640010C2AA640000C40A6E005096FA680000974A640010C7FA6E003099EA640000CA0A6000A\
09F0A640000C17A720010C22A7E00C0C8BA780040CB0A700010CF7A760010902A820000C03A86000\
0906A820000C07A88000090BA820000C0CA8E0020923A8A0000C40A880060980A840000C82A84006\
09B4A8400210D0A8400109E0A840020CF2A8C0000CFBA820000CFDA820001000A940010C0AA98003\
0926A900010C30A9E0020947A9A0010C60A9A0030980A980000C84A9E00509B3A9C0010CCFA92000\
10D0A9400109E5A9200010F0A940010C00AA20050929AAC0010C40AA60000943AA20000C44AA0001\
094CAA40001050AA4001097BAA600009B0AA200009B2AA600009B7AA400009BEAA400009C1AA2000\
0CE0AA600109EBAAA0000CF2AA600009F5AA40000C01ABC0000C09ABC0000C11ABC0000C20ABE000\
0C28ABE0000C30AB60050C5CAB40010C70AB600E09E3AB000109ECAB400010F0AB40010C00ACE0FF\
0CFFB3E0FF0CFEBBE0FF0CFDC3E0FF0CFCCBE0FF0CFBD320750CB0D7E0020CCBD720060C00FBE000\
0C13FBA000051DFB2000091EFB2000051FFB4001052AFBA0010538FBA000053EFB20000540FB4000\
0543FB40000546FB40010C50FB400C0CD3FB602D0C50FD00080C92FDC0060CF0FD80010900FE0002\
0E10FE20000D13FE20000E14FE20000920FE00021133FE4000114DFE60000E50FE20000F52FE2000\
0E54FE20000D55FE20000C70FEA0000C76FEE0100BFFFE20000F07FF20000E0CFF20000F0EFF2000\
0D1AFF20000E1BFF20000C21FF4003113FFF20000C41FF40031766FF40011970FF20001771FFA005\
099EFF40000CA0FFE0030CC2FFC0000CCAFFC0000CD2FFC0000CDAFF60000BF9FF60000C00008101\
0C0D0041030C280061020C3C0041000C3F00E1010C5000C1010C8000610F0C4001A10609FD012100\
0C8002A1030CA002210609E00221000C000301040C300361030C5003C104097603A1000C8003C103\
0CA00381040CC80301010CD103A1000C0004C11310A00441010CB00481040CD80481040C00050105\
0C300581060C0006E1260C4007C1020C600701010C0008C1000C080821000C0A0881050C37084100\
0C3C0821000C3F08E1020C6008E1020C8008E1030CE00861020CF40841000C0009C1020C20094103\
0C800901070CBE0941000C000A210009010A610009050A4100090C0A81000C100A81000C150A6100\
0C190A610309380A6100093F0A21000C600AA1030C800AA1030CC00A01010CC90A810309E50A4100\
0C000BC1060C400BC1020C600B61020C800B41020C000C21090C800C61060CC00C61060900106100\
0C0310A106093810E1011066104101097F1081000C8310A10509B01061010BBD1021000CD0102103\
10F010410109001161000C03118104092711C10110361141010C5011610409731121000C76112100\
09801161000C8311010609B311C1010CC111810009CA11610010D01141010CDA1121000CDC112100\
0C001241020C13122103092C128101093E1221000C8012E1000C881221000C8A1281000C8F12E101\
0C9F1241010CB012E10509DF12810110F012410109001381000C051301010C0F1341000C1313C102\
0C2A13E1000C321341000C3513A100093C1321000C3D132100093E13E1000947134100094B136100\
0C5013210009571321000C5D13A1000962134100096613E100097013A1000C0014A1060935144102\
0C4714810010501441010C8014010609B01481020CC41441000CC714210010D01441010C8015E105\
09AF15E10009B81521010CD815810009DC1541000C0016010609301621020C441621001050164101\
0C8016610509AB16A10110C0164101091D17E10110301741010CA018010810E01841010CFF182100\
0CC01A21070C001C21010C0A1CA104092F1C010109381C01010C401C210010501C41010C721CC103\
09921CC10209A91CC1010C002041730C0024E10D0C802481180C0030E1850C0044E1480C00682147\
0C406AE10310606A41010CD06AC10309F06AA1000C006B010609306BE1000C406B810010506B4101\
0C636BA1020C7D6B61020C006FA1080C506F210009516FC105098F6F81000C936FA1010CE06F2100\
1700B021000C00BC610D0C70BCA1010C80BC21010C90BC4101099DBC41000BA0BC81000965D1A100\
096DD1C1000B73D10101097BD101010985D1E10009AAD181000942D261000C00D4A10A0C56D4E108\
0C9ED441000CA2D421000CA5D441000CA9D481000CAED481010CBBD421000CBDD4E1000CC5D42108\
0C07D581000C0DD501010C16D5E1000C1ED581030C3BD581000C40D5A1000C46D521000C4AD5E100\
0C52D5812A0CA8D621030CC2D621030CDCD6E1030CFCD621030C16D7E1030C36D721030C50D7E103\
0C70D721030C8AD7E1030CAAD721030CC4D7010110CED741060900DAE106093BDA41060975DA2100\
0984DA2100099BDAA10009A1DAE1010900E0E1000908E02102091BE0E1000923E041000926E0A100\
0C00E8A11809D0E8E1000C00E981080944E9E1001050E941010C00EE81000C05EE61030C21EE4100\
0C24EE21000C27EE21000C29EE41010C34EE81000C39EE21000C3BEE21000C42EE21000C47EE2100\
0C49EE21000C4BEE21000C4DEE61000C51EE41000C54EE21000C57EE21000C59EE21000C5BEE2100\
0C5DEE21000C5FEE21000C61EE41000C64EE21000C67EE81000C6CEEE1000C74EE81000C79EE8100\
0C7EEE21000C80EE41010C8BEE21020CA1EE61000CA5EEA1000CABEE21020C30F141030C50F14103\
0C70F141030AE6F141031285F3210012C3F3410012CAF3410013FBF3A1001242F441001246F46101\
1666F48100126EF421001270F42101127CF421001281F461001285F46100158BF4210012AAF42100\
1275F52100127AF521001290F521001295F5410015E8F521001245F66100124BF6A10012A3F62100\
12B4F6610012C0F621001218F9E1001226F921001230F921001233F9E100123CF961000B01002E00\
0920000E0C0900010E1E'.replace(
	/[0-9A-F]{2}/g,
	function($0){return String.fromCharCode(parseInt($0, 16))});

	var /* ` */WBP_Other = 0;
	var /* a */WBP_SOT = 1;
	var /* b */WBP_EOT = 2;
	var /* c */WBP_Double_Quote = 3;
	var /* d */WBP_Single_Quote = 4;
	var /* e */WBP_Hebrew_Letter = 5;
	var /* f */WBP_CR = 6;
	var /* g */WBP_LF = 7;
	var /* h */WBP_Newline = 8;
	var /* i */WBP_Extend = 9;
	var /* j */WBP_Regional_Indicator = 10;
	var /* k */WBP_Format = 11;
	var /* l */WBP_ALetter = 12;
	var /* m */WBP_MidLetter = 13;
	var /* n */WBP_MidNum = 14;
	var /* o */WBP_MidNumLet = 15;
	var /* p */WBP_Numeric = 16;
	var /* q */WBP_ExtendNumLet = 17;
	var /* r */WBP_E_Base = 18;
	var /* s */WBP_E_Modifier = 19;
	var /* t */WBP_ZWJ = 20;
	var /* u */WBP_Glue_After_Zwj = 21;
	var /* v */WBP_E_Base_GAZ = 22;
	var /* w */WBP_Katakana = 23;
	var /* x */WBP_Hiragana = 24;
	var /* y */WBP_KanaExtension = 25;
	var /* z */WBP_Space = 26;

	var WORD_BREAK_PROP_UNIT_LENGTH = 5;

	var WBP = {
		'Other': 0,
		'SOT': 1,
		'EOT': 2,
		'Double_Quote': 3,
		'Single_Quote': 4,
		'Hebrew_Letter': 5,
		'CR': 6,
		'LF': 7,
		'Newline': 8,
		'Extend': 9,
		'Regional_Indicator': 10,
		'Format': 11,
		'ALetter': 12,
		'MidLetter': 13,
		'MidNum': 14,
		'MidNumLet': 15,
		'Numeric': 16,
		'ExtendNumLet': 17,
		'E_Base': 18,
		'E_Modifier': 19,
		'ZWJ': 20,
		'Glue_After_Zwj': 21,
		'E_Base_GAZ': 22,
		'Katakana': 23,
		'Hiragana': 24,
		'KanaExtension': 25,
		'Space': 26
	};

	// GENERATED CODE END
	// >>>

	/*
	 * data table, taken from:
	 * http://www.unicode.org/Public/9.0.0/ucd/Scripts.txt
	 */

	// GENERATED CODE START <<<1
	// This data was generated by the command 'node mkdata.js -s'.
	var SCRIPTS = '\
01000020080241004003015B00C0000261004003017B00E00502AA00200001AB00E00102BA002000\
01BB00A00002C000E00201D700200002D800E00301F700200002F800203801B902E00402E002A000\
01E502A00023EA02400001EC028002290003000E037003800001740320000375036000037A038000\
017E032000037F03200003840320000185032000038603200001870320000388036000038C032000\
038E03800203A303E00737E203C00103F0030002040004A01029850440000487042015053105C004\
055905E000056105E0040189052000058A052000058D056000069105E00606D005600306F005A000\
070006A0000105062000070606C000010C062000070D06C001011B064000071E062000011F062000\
072006000401400620000741064001294B06600107560640032970062000077106800D01DD062000\
07DE064004080007C001080F078007084D0760000750070006098007400642C0076007520008C005\
523008E0015F400880035F5E08200007A008A00207B608000107D408C00101E208200007E308A003\
0A0009200A29510940000A5309200201640940000A660940030B800980000B850900010B8F094000\
0B9309C0020BAA09E0000BB20920000BB60980000BBC0920010BC70940000BCB0980000BD7092000\
0BDC0940000BDF09A0000BE609C0020C010A60000C050AC0000C0F0A40000C130AC0020C2A0AE000\
0C320A40000C350A40000C380A40000C3C0A20000C3E0AA0000C470A40000C4B0A60000C510A2000\
0C590A80000C5E0A20000C660A00020D810A60000D850A20010D8F0A60000D930AC0020DAA0AE000\
0DB20A40000DB50AA0000DBC0A40010DC70A60000DCB0A60000DD00A20000DE00A80000DE60A8001\
0DF90A20000E010B60000E050B00010E0F0B40000E130BC0020E2A0BE0000E320B40000E350BA000\
0E3C0B20010E470B40000E4B0B60000E560B40000E5C0B40000E5F0BA0000E660B40020F820B4000\
0F850BC0000F8E0B60000F920B80000F990B40000F9C0B20000F9E0B40000FA30B40000FA80B6000\
0FAE0B80010FBE0BA0000FC60B60000FCA0B80000FD00B20000FD70B20000FE60BA00210000C8000\
10050C0001100E0C600010120CE002102A0C0002103D0C000110460C6000104A0C800010550C4000\
10580C600010600C800010660C400110780C000111800C800011850C0001118E0C600011920CE002\
11AA0C400111B50CA00011BC0C200111C60C600011CA0C800011D50C400011DE0C200011E00C8000\
11E60C400111F10C400012010D600012050D0001120E0D600012120D2005123D0D000112460D6000\
124A0DC00012540D000212660D400313820D400013850D4002139A0D000313B30D200113BD0D2000\
13C00DE00013CA0D200013CF0DC00013D60D200013D80D000113E60D400113F20D600014010E4007\
013F0E200014400E800315810E400015840E200015870E4000158A0E2000158D0E200015940E8000\
15990EE00015A10E600015A50E200015A70E200015AA0E400015AD0EA00115BB0E600015C00EA000\
15C60E200015C80EC00015D00E400115DC0E800016000F000916490F800416710FE00416990F8004\
16BE0FE00116CE0FE00001D50F800016D90F4000170010001418A010C00418C710200018CD102000\
18D010600501FB10200018FC10800019001100201A001220091A4A1280001A5012E0001A58122000\
1A5A1280001A601220051A8A1280001A901220041AB21280001AB812E0001AC01220001AC2128000\
1AC812E0011AD81220071A121380001A181360081A5D1300041A801340031BA013C00A1BF813C000\
1C001400501D8016A0031EA016600901EB1660001EEE1660012A0017A0012A0E17E0002B2017A002\
01351740002C401780022D6017A0012D6E1760002D721740001F8017C00B1FE01740011FF0174001\
200018400001021840002004182000010518200020061820012010184001202018000B2080186005\
1CB018C0082E0019E0032E201980012E301980012E401920002E441980012F5019C0032F7019A000\
388019800538B019400338D019600138DE1940001FE019000436001A8003361E1A40004E201AE007\
4E601AA0034E7F1A60014E901A40014EA01AC00129B01AE0013E001B80093E501BA00543801B0008\
5DC01B80065DFC1B800044001C0007443B1CE001444D1C600045501C000604801C200143C01C0001\
29D01C600001D31C200029D41CA00101E11C200029E21CE00001E91C800029ED1C200001EE1CC000\
29F41C200001F51C400029F81C400002001DC00403261DA000042B1D2000022C1D2006035D1DA000\
02621D800003661DA000026B1DA00104781D200002791DC00803BF1D200029C01DC00629FB1DA000\
02001E002003001FC00203181FC00003201FC00403481FC00003501F000103591F2000035B1F2000\
035D1F2000035F1FE00303801FA00603B61FE00103C61FC00103D61FC00003DD1F600203F21F6000\
03F61F20010100208001290C204000010E20E00A016620600102712020000174206001027F202000\
018020E001029020A00101A020E00329D0202004010021C00403262120000127216000022A214000\
012C21C00002322120000133216003024E212000014F21200202602120050189216000019021E04D\
010024E004014024600101602400743500280020010029804E01762B000401982B400401BD2B8001\
01CA2B000101EC2B800039002CE00539302CE00502602C000437802C800E37F92CE00018002DC004\
18272D2000182D2D20003A302D00073A6F2D40003A7F2D20001A802DE0021AA02DE0001AA82DE000\
1AB02DE0001AB82DE0001AC02DE0001AC82DE0001AD02DE0001AD82DE00004E02D000401002EA008\
24802E4003249B2E200B24002FC01A01F02F8001010030A000240530200001063020002407302000\
01083020032421302001292A308000192E30400001303000012438308000013C308000214130C00A\
2999304000019B304000219D30600001A030200022A130400B01FB30400022FD3060002305312005\
193131C00B019031000223A031600301C031800422F0310002190032E0030120320008196032E003\
017F32200A22D032E005220033000B0158330015240034E0FF24FF3BE0FF24FE43E0FF24FD4B2037\
01C04D000824004EE0FF24FF55E0FF24FE5DE0FF24FD65E0FF24FC6DE0FF24FB75E0FF24FA7DE0FF\
24F985E0FF24F88DE0FF24F795E0FF24F69D003C2500A0A0912590A4E00653D0A400064600A58025\
0440A6000C54A0A6000B0100A740040222A7C00C0188A76000028BA7800402B0A7000102F7A72001\
3B00A880050130A840014140A800074780A8C00847CEA880010AE0A8C0034800A9C005012EA92000\
482FA920004930A98004495FA920001960A9A0035580A9C00901CFA9200055D0A9400155DEA94000\
17E0A9E0034D00AAE0064D40AAC0014D50AA40014D5CAA80001760AA00044F80AA60084FDBAAA000\
56E0AAE0021A01ABC0001A09ABC0001A11ABC0001A20ABE0001A28ABE0000230AB6005015BAB2000\
025CAB20010365AB20001B70AB000A56C0ABC00556F0AB40011900ACE0FF19FFB3E0FF19FEBBE0FF\
19FDC3E0FF19FCCBE0FF19FBD3207519B0D7E00219CBD720062400F9C02D2470FA400D0200FBE000\
0513FBA000061DFB40030638FBA000063EFB20000640FB40000643FB40000646FB40010750FB400E\
07D3FB602D013EFD40000750FD00080792FDC00607F0FDC0012900FE00020110FE40012920FEC001\
042EFE40000130FE60040154FE60020168FE80000770FEA0000776FEE01001FFFE20000101FF0004\
0221FF4003013BFFC0000241FF4003015BFF60012266FF40010170FF20002271FFA005019EFF4000\
19A0FFE00319C2FFC00019CAFFC00019D2FFC00019DAFF600001E0FFE00001E8FFE00001F9FFA000\
3000008101300D0041033028006102303C004100303F00E101305000C101308000610F0100016100\
010701A1050137012101034001E109019001810103A001210001D001A10529FD0121004A8002A103\
4BA002210629E002210001E1026103260003810427300361037850036105318003C103319F032100\
3CA00381043CC803C101280004010A3250040106338004C10333A004410188B004810488D8048104\
6A000501056730058106676F0521006E0006E1266E4007C1026E60070101340008C1003408082100\
340A0881053437084100343C082100343F082100574008C10257570821017660080104758008E103\
75A708210180E008610280F408410080FB08A1004000098103401F0921004C200941034C3F092100\
628009010461A009010361BC09810261D209C1053D000A81003D050A41003D0C0A01013D150A6100\
3D190A61033D380A61003D3F0A21013D500A210158600A010474800A010470C00AE10470EB0A8101\
50000BC10650390BE10059400BC10259580B01015A600B61025A780B010179800B410279990B8100\
79A90BE1005B000C210982800C610682C00C610682FA0CC10007600EE1035E0010C1095E5210C103\
5E7F1021005C8010410865D010210365F0104101600011A106603611C1016F5011E104648011C109\
64D011010213E11181026D001241026D13128105818012E1008188122100818A128100818F12E101\
819F1261017BB01261077BF01241016B001381006B051301016B0F1341006B1313C1026B2A13E100\
6B321341006B3513A1006B3C1321016B471341006B4B1361006B501321006B571321006B5D13E100\
6B6613E1006B7013A100870014410B875B142100875D1421007C801401097CD01441017A8015C106\
7AB815C104720016A1087250164101206016A101668016010766C01641017E001741037E1D17E101\
7E301701027DA018610A7DFF18210077C01A210785001C2101850A1CA10585381CC10185501CA103\
86701C010486921CC10286A91CC1013F002041733F0024E10D3F7024A1003F80248118510030E185\
7F0044E148540068214773406AE10373606A4101736E6A410068D06AC10368F06AC1006C006BC108\
6C506B41016C5B6BE1006C636BA1026C7D6B610263006FA10863506FE105638F6F210289E06F2100\
890070E1FF89FF77E1FF89FE7FE1FD890088615E2200B021002101B021006900BC610D6970BCA101\
6980BC21016990BC4101699CBC810001A0BC81000100D0C11E0100D1E1040129D1C1072967D16100\
016AD12102297BD101010183D141002985D1E100018CD1C10329AAD1810001AED161070300D2C108\
0100D3E10A0160D341020100D4A10A0156D4E108019ED4410001A2D4210001A5D4410001A9D48100\
01AED4810101BBD4210001BDD4E10001C5D421080107D58100010DD501010116D5E100011ED58103\
013BD581000140D5A1000146D52100014AD5E1000152D5812A01A8D6812401CED741068300D88151\
839BDAA10083A1DAE1013900E0E1003908E02102391BE0E1003923E041003926E0A1007100E8A118\
71C7E801028400E961098450E94101845EE941000700EE81000705EE61030721EE41000724EE2100\
0727EE21000729EE41010734EE81000739EE2100073BEE21000742EE21000747EE21000749EE2100\
074BEE2100074DEE61000751EE41000754EE21000757EE21000759EE2100075BEE2100075DEE2100\
075FEE21000761EE41000764EE21000767EE8100076CEEE1000774EE81000779EE8100077EEE2100\
0780EE4101078BEE210207A1EE610007A5EEA10007ABEE210207F0EE41000100F081050130F0810C\
01A0F0E10101B1F0E10101C1F0E10101D1F0A1040100F1A1010110F1E1030130F181070170F1A107\
01E6F141032100F221000101F241000110F281050140F221010150F241000100F3617A01E0F6A101\
01F0F6E1000100F7810E0180F7A10A0100F881010110F801070150F841010160F801050190F8C103\
0110F9E1010120F901010130F921000133F981010140F981010150F9E1010180F9410201C0F92100\
240000E2FF24FF07E2FF24FE0FE2FF24FD17E2FF24FC1FE2FF24FB27E2FF24FA2FE2FF24F937E2FF\
24F83FE2FF24F747E2FF24F64FE2FF24F557E2FF24F45FE2FF24F367E2FF24F26FE2FF24F177E2FF\
24F07FE2FF24EF87E2FF24EE8FE2FF24ED97E2FF24EC9F62DD2400A7E2FF24FFAEE2FF24FEB6E206\
2440B7C21B2420B8E2FF241FC0E2FF241EC882D02400F8C2430101002E000120000E0C2900010E1E\
'.replace(
	/[0-9A-F]{2}/g,
	function($0){return String.fromCharCode(parseInt($0, 16))});

	var SCRIPT_Unknown = 0;
	var SCRIPT_Common = 1;
	var SCRIPT_Latin = 2;
	var SCRIPT_Greek = 3;
	var SCRIPT_Cyrillic = 4;
	var SCRIPT_Armenian = 5;
	var SCRIPT_Hebrew = 6;
	var SCRIPT_Arabic = 7;
	var SCRIPT_Syriac = 8;
	var SCRIPT_Thaana = 9;
	var SCRIPT_Devanagari = 10;
	var SCRIPT_Bengali = 11;
	var SCRIPT_Gurmukhi = 12;
	var SCRIPT_Gujarati = 13;
	var SCRIPT_Oriya = 14;
	var SCRIPT_Tamil = 15;
	var SCRIPT_Telugu = 16;
	var SCRIPT_Kannada = 17;
	var SCRIPT_Malayalam = 18;
	var SCRIPT_Sinhala = 19;
	var SCRIPT_Thai = 20;
	var SCRIPT_Lao = 21;
	var SCRIPT_Tibetan = 22;
	var SCRIPT_Myanmar = 23;
	var SCRIPT_Georgian = 24;
	var SCRIPT_Hangul = 25;
	var SCRIPT_Ethiopic = 26;
	var SCRIPT_Cherokee = 27;
	var SCRIPT_Canadian_Aboriginal = 28;
	var SCRIPT_Ogham = 29;
	var SCRIPT_Runic = 30;
	var SCRIPT_Khmer = 31;
	var SCRIPT_Mongolian = 32;
	var SCRIPT_Hiragana = 33;
	var SCRIPT_Katakana = 34;
	var SCRIPT_Bopomofo = 35;
	var SCRIPT_Han = 36;
	var SCRIPT_Yi = 37;
	var SCRIPT_Old_Italic = 38;
	var SCRIPT_Gothic = 39;
	var SCRIPT_Deseret = 40;
	var SCRIPT_Inherited = 41;
	var SCRIPT_Tagalog = 42;
	var SCRIPT_Hanunoo = 43;
	var SCRIPT_Buhid = 44;
	var SCRIPT_Tagbanwa = 45;
	var SCRIPT_Limbu = 46;
	var SCRIPT_Tai_Le = 47;
	var SCRIPT_Linear_B = 48;
	var SCRIPT_Ugaritic = 49;
	var SCRIPT_Shavian = 50;
	var SCRIPT_Osmanya = 51;
	var SCRIPT_Cypriot = 52;
	var SCRIPT_Braille = 53;
	var SCRIPT_Buginese = 54;
	var SCRIPT_Coptic = 55;
	var SCRIPT_New_Tai_Lue = 56;
	var SCRIPT_Glagolitic = 57;
	var SCRIPT_Tifinagh = 58;
	var SCRIPT_Syloti_Nagri = 59;
	var SCRIPT_Old_Persian = 60;
	var SCRIPT_Kharoshthi = 61;
	var SCRIPT_Balinese = 62;
	var SCRIPT_Cuneiform = 63;
	var SCRIPT_Phoenician = 64;
	var SCRIPT_Phags_Pa = 65;
	var SCRIPT_Nko = 66;
	var SCRIPT_Sundanese = 67;
	var SCRIPT_Lepcha = 68;
	var SCRIPT_Ol_Chiki = 69;
	var SCRIPT_Vai = 70;
	var SCRIPT_Saurashtra = 71;
	var SCRIPT_Kayah_Li = 72;
	var SCRIPT_Rejang = 73;
	var SCRIPT_Lycian = 74;
	var SCRIPT_Carian = 75;
	var SCRIPT_Lydian = 76;
	var SCRIPT_Cham = 77;
	var SCRIPT_Tai_Tham = 78;
	var SCRIPT_Tai_Viet = 79;
	var SCRIPT_Avestan = 80;
	var SCRIPT_Egyptian_Hieroglyphs = 81;
	var SCRIPT_Samaritan = 82;
	var SCRIPT_Lisu = 83;
	var SCRIPT_Bamum = 84;
	var SCRIPT_Javanese = 85;
	var SCRIPT_Meetei_Mayek = 86;
	var SCRIPT_Imperial_Aramaic = 87;
	var SCRIPT_Old_South_Arabian = 88;
	var SCRIPT_Inscriptional_Parthian = 89;
	var SCRIPT_Inscriptional_Pahlavi = 90;
	var SCRIPT_Old_Turkic = 91;
	var SCRIPT_Kaithi = 92;
	var SCRIPT_Batak = 93;
	var SCRIPT_Brahmi = 94;
	var SCRIPT_Mandaic = 95;
	var SCRIPT_Chakma = 96;
	var SCRIPT_Meroitic_Cursive = 97;
	var SCRIPT_Meroitic_Hieroglyphs = 98;
	var SCRIPT_Miao = 99;
	var SCRIPT_Sharada = 100;
	var SCRIPT_Sora_Sompeng = 101;
	var SCRIPT_Takri = 102;
	var SCRIPT_Caucasian_Albanian = 103;
	var SCRIPT_Bassa_Vah = 104;
	var SCRIPT_Duployan = 105;
	var SCRIPT_Elbasan = 106;
	var SCRIPT_Grantha = 107;
	var SCRIPT_Pahawh_Hmong = 108;
	var SCRIPT_Khojki = 109;
	var SCRIPT_Linear_A = 110;
	var SCRIPT_Mahajani = 111;
	var SCRIPT_Manichaean = 112;
	var SCRIPT_Mende_Kikakui = 113;
	var SCRIPT_Modi = 114;
	var SCRIPT_Mro = 115;
	var SCRIPT_Old_North_Arabian = 116;
	var SCRIPT_Nabataean = 117;
	var SCRIPT_Palmyrene = 118;
	var SCRIPT_Pau_Cin_Hau = 119;
	var SCRIPT_Old_Permic = 120;
	var SCRIPT_Psalter_Pahlavi = 121;
	var SCRIPT_Siddham = 122;
	var SCRIPT_Khudawadi = 123;
	var SCRIPT_Tirhuta = 124;
	var SCRIPT_Warang_Citi = 125;
	var SCRIPT_Ahom = 126;
	var SCRIPT_Anatolian_Hieroglyphs = 127;
	var SCRIPT_Hatran = 128;
	var SCRIPT_Multani = 129;
	var SCRIPT_Old_Hungarian = 130;
	var SCRIPT_SignWriting = 131;
	var SCRIPT_Adlam = 132;
	var SCRIPT_Bhaiksuki = 133;
	var SCRIPT_Marchen = 134;
	var SCRIPT_Newa = 135;
	var SCRIPT_Osage = 136;
	var SCRIPT_Tangut = 137;

	var SCRIPTS_PROP_UNIT_LENGTH = 5;

	var SCRIPT = {
		'Unknown': 0,
		'Common': 1,
		'Latin': 2,
		'Greek': 3,
		'Cyrillic': 4,
		'Armenian': 5,
		'Hebrew': 6,
		'Arabic': 7,
		'Syriac': 8,
		'Thaana': 9,
		'Devanagari': 10,
		'Bengali': 11,
		'Gurmukhi': 12,
		'Gujarati': 13,
		'Oriya': 14,
		'Tamil': 15,
		'Telugu': 16,
		'Kannada': 17,
		'Malayalam': 18,
		'Sinhala': 19,
		'Thai': 20,
		'Lao': 21,
		'Tibetan': 22,
		'Myanmar': 23,
		'Georgian': 24,
		'Hangul': 25,
		'Ethiopic': 26,
		'Cherokee': 27,
		'Canadian_Aboriginal': 28,
		'Ogham': 29,
		'Runic': 30,
		'Khmer': 31,
		'Mongolian': 32,
		'Hiragana': 33,
		'Katakana': 34,
		'Bopomofo': 35,
		'Han': 36,
		'Yi': 37,
		'Old_Italic': 38,
		'Gothic': 39,
		'Deseret': 40,
		'Inherited': 41,
		'Tagalog': 42,
		'Hanunoo': 43,
		'Buhid': 44,
		'Tagbanwa': 45,
		'Limbu': 46,
		'Tai_Le': 47,
		'Linear_B': 48,
		'Ugaritic': 49,
		'Shavian': 50,
		'Osmanya': 51,
		'Cypriot': 52,
		'Braille': 53,
		'Buginese': 54,
		'Coptic': 55,
		'New_Tai_Lue': 56,
		'Glagolitic': 57,
		'Tifinagh': 58,
		'Syloti_Nagri': 59,
		'Old_Persian': 60,
		'Kharoshthi': 61,
		'Balinese': 62,
		'Cuneiform': 63,
		'Phoenician': 64,
		'Phags_Pa': 65,
		'Nko': 66,
		'Sundanese': 67,
		'Lepcha': 68,
		'Ol_Chiki': 69,
		'Vai': 70,
		'Saurashtra': 71,
		'Kayah_Li': 72,
		'Rejang': 73,
		'Lycian': 74,
		'Carian': 75,
		'Lydian': 76,
		'Cham': 77,
		'Tai_Tham': 78,
		'Tai_Viet': 79,
		'Avestan': 80,
		'Egyptian_Hieroglyphs': 81,
		'Samaritan': 82,
		'Lisu': 83,
		'Bamum': 84,
		'Javanese': 85,
		'Meetei_Mayek': 86,
		'Imperial_Aramaic': 87,
		'Old_South_Arabian': 88,
		'Inscriptional_Parthian': 89,
		'Inscriptional_Pahlavi': 90,
		'Old_Turkic': 91,
		'Kaithi': 92,
		'Batak': 93,
		'Brahmi': 94,
		'Mandaic': 95,
		'Chakma': 96,
		'Meroitic_Cursive': 97,
		'Meroitic_Hieroglyphs': 98,
		'Miao': 99,
		'Sharada': 100,
		'Sora_Sompeng': 101,
		'Takri': 102,
		'Caucasian_Albanian': 103,
		'Bassa_Vah': 104,
		'Duployan': 105,
		'Elbasan': 106,
		'Grantha': 107,
		'Pahawh_Hmong': 108,
		'Khojki': 109,
		'Linear_A': 110,
		'Mahajani': 111,
		'Manichaean': 112,
		'Mende_Kikakui': 113,
		'Modi': 114,
		'Mro': 115,
		'Old_North_Arabian': 116,
		'Nabataean': 117,
		'Palmyrene': 118,
		'Pau_Cin_Hau': 119,
		'Old_Permic': 120,
		'Psalter_Pahlavi': 121,
		'Siddham': 122,
		'Khudawadi': 123,
		'Tirhuta': 124,
		'Warang_Citi': 125,
		'Ahom': 126,
		'Anatolian_Hieroglyphs': 127,
		'Hatran': 128,
		'Multani': 129,
		'Old_Hungarian': 130,
		'SignWriting': 131,
		'Adlam': 132,
		'Bhaiksuki': 133,
		'Marchen': 134,
		'Newa': 135,
		'Osage': 136,
		'Tangut': 137
	};

	// GENERATED CODE END
	// >>>

	/*
	 * variables
	 */

	var graphemeFinder = createFinder(
		GRAPHEME_BREAK_PROPS, GRAPHEME_BREAK_PROP_UNIT_LENGTH, GBP_Other);
	var wordFinder = createFinder(
		WORD_BREAK_PROPS, WORD_BREAK_PROP_UNIT_LENGTH, WBP_Other);
	var scriptFinder = createFinder(
		SCRIPTS, SCRIPTS_PROP_UNIT_LENGTH, SCRIPT_Unknown);

	/*
	 * utility functions
	 */

	function pick2 (data, index) {
		return data.charCodeAt(index)
			|  data.charCodeAt(index + 1) << 8;
	}

	function pick3 (data, index) {
		return data.charCodeAt(index)
			|  data.charCodeAt(index + 1) << 8
			|  data.charCodeAt(index + 2) << 16;
	}

	function pick4 (data, index) {
		return data.charCodeAt(index)
			|  data.charCodeAt(index + 1) << 8
			|  data.charCodeAt(index + 2) << 16
			|  data.charCodeAt(index + 3) << 24;
	}

	function resolveSurrogates (s) {
		var result = [];
		s.replace(/[\ud800-\udb7f][\udc00-\udfff]|[\s\S]/g, function ($0) {
			if ($0.length == 2) {
				var hcp = $0.charCodeAt(0);
				var lcp = $0.charCodeAt(1);
				result.push(
					((hcp & 0x03c0) + 0x0040) << 10
					| (hcp & 0x003f) << 10
					| (lcp & 0x03ff)
				);
			}
			else {
				result.push($0.charCodeAt(0));
			}
		});
		return result;
	}

	function buildGraphemeClusters (chars) {
		var result = [];
		var propString = '';
		var prevIndex = 0;
		var rawIndex = 0;
		for (var i = 0, goal = chars.length; i < goal; i++) {
			var nextProp = String.fromCharCode(97 + graphemeFinder(chars[i]));
			if (canBreak(propString, nextProp)) {
				if (prevIndex < i) {
					var grapheme = new Grapheme(chars.slice(prevIndex, i), rawIndex);
					result.push(grapheme);
					rawIndex += grapheme.rawString.length;
				}
				prevIndex = i;
			}
			propString += nextProp;
		}

		if (canBreak(propString, String.fromCharCode(97 + GBP_EOT))) {
			if (prevIndex < i) {
				result.push(
					new Grapheme(chars.slice(prevIndex, i), rawIndex)
				);
			}
		}

		return result;
	}

	function buildWordClusters (chars, useScripts) {
		var result = [];
		var propString = '';
		var prevIndex = 0;
		var rawIndex = 0;
		var nextProp, nextNextProp;

		for (var i = 0, goal = chars.length; i <= goal; i++, propString += nextProp) {
			// next word break property
			nextProp = String.fromCharCode(
				96 + (i >= goal ? WBP_EOT : wordFinder(chars[i])));

			// next next word break property but skip Extend, Format and ZWJ
			var j = i + 1;
			do {
				nextNextProp = String.fromCharCode(
					96 + (j >= goal ? WBP_EOT : wordFinder(chars[j])));
				j++;
			} while (/[ikt]/.test(nextNextProp));

			// check if it can be broke
			if (!canBreakWord(propString, nextProp, nextNextProp)) continue;
			if (useScripts && i > 0 && isInScriptWord(propString, nextProp, chars[i - 1], chars[i])) continue;

			// store the word
			if (prevIndex < i) {
				result.push({
					text: chars.slice(prevIndex, i).map(getUTF16FromCodePoint).join(''),
					index: prevIndex,
					length: i - prevIndex,
					type: propString.substr(-1).charCodeAt(0) - 96
				});
			}

			prevIndex = i;
		}

		return result;
	}

	function find (cp, table, units, otherValue) {
		var left = 0, right = ((table.length / units) >> 0) - 1;
		var middle, index, middlecp, length;

		while (left <= right) {
			middle = ((left + right) / 2) >> 0;
			index = middle * units;

			middlecp = pick4(table, index + 1);
			length = (middlecp >> 21) & 0x7ff;
			middlecp = middlecp & 0x1fffff;

			if (middlecp + length - 1 < cp) {
				left = middle + 1;
			}
			else if (cp < middlecp) {
				right = middle - 1;
			}
			else {
				return table.charCodeAt(index);
			}
		}

		return otherValue;
	}

	function createFinder (table, units, otherValue) {
		var cache = {};
		return function (cp) {
			if (cp in cache) {
				return cache[cp];
			}
			else {
				return cache[cp] = find(cp, table, units, otherValue);
			}
		};
	}

	function canBreak (prev, next) {
		/*
		 * This rules are taken from:
		 * http://unicode.org/reports/tr29/, Version 9.0.0, 2016-06-20
		 * ===========================================================
		 */

		// Break at the start and end of text.
		//   GB1: sot  ÷
		if (prev == '') return true;

		//   GB2: ÷  eot
		if (next == 'c') return true;

		// Do not break between a CR and LF.
		// Otherwise, break before and after controls.
		//   GB3: CR  ×  LF
		if (/e$/.test(prev) && next == 'f') return false;

		//   GB4: ( Control | CR | LF )  ÷
		if (/[gef]$/.test(prev)) return true;

		//   GB5: ÷  ( Control | CR | LF )
		if (/^[gef]/.test(next)) return true;

		// Do not break Hangul syllable sequences.
		//   GB6: L  ×  ( L | V | LV | LVT )
		if (/k$/.test(prev) && /^[klno]/.test(next)) return false;

		//   GB7: ( LV | V )  ×  ( V | T )
		if (/[nl]$/.test(prev) && /^[lm]/.test(next)) return false;

		//   GB8: ( LVT | T)  ×  T
		if (/[om]$/.test(prev) && next == 'm') return false;

		// Do not break before extending characters.
		//   GB9: ×  ( Extend | ZWJ )
		if (/^[hr]/.test(next)) return false;

		// Only for extended grapheme clusters:
		// Do not break before SpacingMarks, or after Prepend characters.
		//   GB9a:          ×  SpacingMark
		if (next == 'j') return false;

		//   GB9b: Prepend  ×
		if (/d$/.test(prev)) return false;

		// Do not break within emoji modifier sequences or emoji zwj sequences.
		//   GB10: ( E_Base | EBG ) Extend*  ×  E_Modifier
		if (/[pt]h*$/.test(prev) && next == 'q') return false;

		//   GB11:                      ZWJ  ×  (Glue_After_Zwj | EBG)
		if (/r$/.test(prev) && /^[st]/.test(next)) return false;

		// Do not break within emoji flag sequences. That is, do not break
		// between regional indicator (RI) symbols if there is an odd number of
		// RI characters before the break point.
		//   GB12: ^ ( RI RI )* RI  ×  RI
		if (/^(ii)*i$/.test(prev) && next == 'i') return false;

		//   GB13: [^RI] ( RI RI )* RI  ×  RI
		if (/[^i](ii)*i$/.test(prev) && next == 'i') return false;

		// Otherwise, break everywhere.
		//   GB999: Any  ÷  Any
		return true;
	}

	function getUTF16FromCodePoint (cp) {
		var p = (cp & 0x1f0000) >> 16;
		var o = cp & 0xffff;
		if (p) {
			return String.fromCharCode(0xd800 | ((p - 1) << 6) | ((o & 0xfc00) >> 10)) +
				String.fromCharCode(0xdc00 | (o & 0x03ff));
		}
		else {
			return String.fromCharCode(o);
		}
	}

	function getCodePointString (cp, type) {
		var result = '';
		if (cp < 0x10000) {
			result = ('0000' + cp.toString(16).toUpperCase()).substr(-4);
		}
		else {
			result = cp.toString(16).toUpperCase();
		}
		switch (type) {
		case 'entity':
			result = '&#x' + result + ';'
			break;
		case 'unicode':
			result = 'U+' + result;
			break;
		}
		return result;
	}

	function wordIndexOf (index) {
		var left = 0, right = this.length - 1;
		var middle, rawIndex, length;

		while (left <= right) {
			middle = ((left + right) / 2) >> 0;

			rawIndex = this[middle].index;
			length = this[middle].length;

			if (rawIndex + length - 1 < index) {
				left = middle + 1;
			}
			else if (index < rawIndex) {
				right = middle - 1;
			}
			else {
				return middle;
			}
		}

		return -1;
	}

	function getWords (s, useScripts) {
		var result = buildWordClusters(resolveSurrogates(s), useScripts);

		Object.defineProperty(result, 'wordIndexOf', {
			value: wordIndexOf
		});

		return result;
	}

	function canBreakWord (prev, next, nextNext) {
		/*
		 * This rules are taken from:
		 * http://unicode.org/reports/tr29/, Version 9.0.0, 2016-06-20
		 * ===========================================================
		 */

		//Break at the start and end of text.
		//  WB1: sot  ÷
		if (prev == '') return true;

		//  WB2:  ÷  eot
		if (next == 'a') return true;

		//Do not break within CRLF.
		//  WB3: CR  ×  LF
		if (/f$/.test(prev) && next == 'g') return false;

		//Otherwise break before and after Newlines (including CR and LF)
		//  WB3a: (Newline | CR | LF)  ÷
		if (/[hfg]$/.test(prev)) return true;

		//  WB3b:  ÷  (Newline | CR | LF)
		if (/^[hfg]/.test(next)) return true;

		//Do not break within emoji zwj sequences.
		//  WB3c: ZWJ  ×  (Glue_After_Zwj | EBG)
		if (/t$/.test(prev) && /^[uv]/.test(next)) return false;

		//Ignore Format and Extend characters, except after sot, CR, LF, and
		//Newline. (See Section 6.2, Replacing Ignore Rules.) This also has
		//the effect of: Any × (Format | Extend | ZWJ)
		//  WB4: X (Extend | Format | ZWJ)*  →  X
		if (/^[ikt]/.test(next)) return false;
		prev = prev.replace(/(.)[ikt]+/g, '$1');

		//Do not break between most letters.
		//  WB5: AHLetter  ×  AHLetter
		//  * AHLetter represents (ALetter | Hebrew_Letter)
		if (/[le]$/.test(prev) && /^[le]/.test(next)) return false;

		//Do not break letters across certain punctuation.
		//  WB6: AHLetter  ×  (MidLetter | MidNumLetQ) AHLetter
		//  * MidNumLetQ represents (MidNumLet | Single_Quote)
		if (/[le]$/.test(prev) && /^[mod]/.test(next) && /^[le]/.test(nextNext)) return false;

		//  WB7: AHLetter (MidLetter | MidNumLetQ)  ×  AHLetter
		if (/[le][mod]$/.test(prev) && /^[le]/.test(next)) return false;

		//  WB7a: Hebrew_Letter  ×  Single_Quote
		if (/e$/.test(prev) && next == 'd') return false;

		//  WB7b: Hebrew_Letter  ×  Double_Quote Hebrew_Letter
		if (/e$/.test(prev) && next == 'c' && nextNext == 'e') return false;

		//  WB7c: Hebrew_Letter Double_Quote  ×  Hebrew_Letter
		if (/ec$/.test(prev) && next == 'e') return false;

		//Do not break within sequences of digits, or digits adjacent to
		//letters (“3a”, or “A3”).
		//  WB8: Numeric  ×  Numeric
		if (/p$/.test(prev) && next == 'p') return false;

		//  WB9: AHLetter  ×  Numeric
		if (/[le]$/.test(prev) && next == 'p') return false;

		//  WB10: Numeric  ×  AHLetter
		if(/p$/.test(prev) && /^[le]/.test(next)) return false;

		//Do not break within sequences, such as “3.2” or “3,456.789”.
		//  WB11: Numeric (MidNum | MidNumLetQ)  ×  Numeric
		if (/p[nod]$/.test(prev) && next == 'p') return false;

		//  WB12: Numeric  ×  (MidNum | MidNumLetQ) Numeric
		if (/p$/.test(prev) && /^[nod]/.test(next) && nextNext == 'p') return false;

		//Do not break between Katakana.
		//  WB13: Katakana  ×  Katakana
		//  [unistring extension]: do not use this rule. use WB13-unistring-1 instead of.
		//if (/w$/.test(prev) && next == 'w') return false;

		//[unistring extension]: Do not break between Katakana, Hiragana, KanaExtension
		//  WB13-unistring-1: Katakana       ×  Katakana
		//                    Hiragana       ×  Hiragana
		//                    KanaExtension  ×  KanaExtension
		if (/[wxy]$/.test(prev) && prev.substr(-1) == next) return false;

		//[unistring extension]: Do not break between Kana and its extension
		//  WB13-unistring-2: (Katakana | Hiragana)  ×  KanaExtension
		if (/[wx]$/.test(prev) && next == 'y') return false;

		//[unistring extension]: Do not break between Kana and its extension
		//  WB13-unistring-3: KanaExtension  ×  (Katakana | Hiragana)
		if (/y$/.test(prev) && /^[wx]/.test(next)) return false;

		//Do not break from extenders.
		//  WB13a: (AHLetter | Numeric | Katakana | Hiragana | KanaExtension | ExtendNumLet)  ×  ExtendNumLet
		//  [unistring extension]: added Hiragana and KanaExtension
		if (/[lepwxyq]$/.test(prev) && next == 'q') return false;

		//  WB13b: ExtendNumLet  ×  (AHLetter | Numeric | Katakana | Hiragana | KanaExtension)
		//  [unistring extension]: added Hiragana and KanaExtension
		if (/q$/.test(prev) && /^[lepwxyq]/.test(next)) return false;

		//Do not break within emoji modifier sequences.
		//  WB14: (E_Base | EBG)  ×  E_Modifier
		if (/[rv]$/.test(prev) && next == 's') return false;

		//Do not break within emoji flag sequences. That is, do not break
		//between regional indicator (RI) symbols if there is an odd number of
		//RI characters before the break point.
		//  WB15: ^ (RI RI)* RI  ×  RI
		if (/^(jj)*j$/.test(prev) && next == 'j') return false;

		//  WB16: [^RI] (RI RI)* RI  ×  RI
		if (/[^j](jj)*j$/.test(prev) && next == 'j') return false;

		//Otherwise, break everywhere (including around ideographs).
		//  WB999: Any  ÷  Any
		return true;
	}

	function isInScriptWord (prev, next, prevcp, nextcp) {
		prev = prev.substr(-1);

		//  Space  ×  Space
		if (prev == 'z' && next == 'z') return true;
		//  !Space  ÷   Space
		if (prev != 'z' && next == 'z') return false;
		//  Space  ÷  !Space
		if (prev == 'z' && next != 'z') return false;

		if (/[ab]/.test(prev) || /[ab]/.test(next)) return false;

		return scriptFinder(prevcp) == scriptFinder(nextcp);
	}

	/*
	 * Grapheme class
	 */

	function Grapheme (codePoints, rawIndex) {
		if (codePoints != undefined) {
			this.codePoints = codePoints;
			this.updateRawString();
		}
		if (rawIndex != undefined) {
			this.rawIndex = rawIndex;
		}
	}

	Grapheme.prototype = {
		toString: function () {
			return this.rawString;
		},
		clone: function () {
			var result = new Grapheme;
			result.codePoints = this.codePoints.slice();
			result.rawString = this.rawString;
			result.rawIndex = this.rawIndex;
			return result;
		},
		updateRawString: function () {
			this.rawString = this.codePoints.reduce(function (result, cp) {
				return result + getUTF16FromCodePoint(cp);
			}, '');
		},
		dump: function (detail) {
			if (detail) {
				var log = [];
				log.push('codePoints: [' + this.codePoints.map(function (cp) {
					return getCodePointString(cp, 'unicode');
				}).join(', ') + ']');
				log.push('  rawIndex: ' + this.rawIndex);
				log.push(' rawString: (' + this.rawString.length + ') "' + this.rawString + '"');
				return log.join('\n');
			}
			else {
				return this.codePoints
					.map(getCodePointString)
					.join(' × ');
			}
		}
	};

	/*
	 * Unistring class
	 */

	function Unistring (s) {
		if (!(this instanceof Unistring)) {
			return new Unistring(s);
		}
		if (typeof s == 'string') {
			this.clusters = buildGraphemeClusters(resolveSurrogates(s));
		}
		else if (s instanceof Array) {
			this.clusters = [];
			var rawIndex = 0;
			for (var i = 0, goal = s.length; i < goal; i++) {
				if (!(s[i] instanceof Grapheme)) {
					throw new Error(
						'Unistring: invalid cluster class: ' +
						Object.prototype.toString.call(s[i]));
				}
				this.clusters[i] = s[i].clone();
				this.clusters[i].rawIndex = rawIndex;
				rawIndex += this.clusters[i].rawString.length;
			}
		}
		else {
			throw new Error('Unistring: invalid argument');
		}
	}

	Unistring.prototype = {
		_ensureIndex: function (index, isEnd) {
			if (index == undefined) {
				index = isEnd ? this.clusters.length : 0;
			}
			if (index < 0) {
				index = this.clusters.length + index;
			}
			return Math.max(0, Math.min(index, this.clusters.length));
		},
		_toUnistring: function (s, caller) {
			if (typeof s == 'string') {
				return new Unistring(s);
			}
			else if (s instanceof Unistring) {
				return s;
			}
			else {
				throw new Error(
					'Unistring#' + (caller || '') + ': invalid argument');
			}
		},

		/*
		 * methods
		 */

		clone: function () {
			return new Unistring(this.clusters.slice());
		},
		dump: function (detail) {
			var log = [];
			if (detail) {
				this.clusters.forEach(function (g, index) {
					log.push('*** Grapheme Cluster #' + index + ' ***');
					log.push(g.dump(detail));
				});
				return log.join('\n');
			}
			else {
				return '÷ ' + this.clusters
					.map(function (g) {return g.dump(detail)})
					.join(' ÷ ') + ' ÷';
			}
		},
		toString: function () {
			return this.clusters.reduce(function (result, g) {
				return result + g.toString();
			}, '');
		},
		delete: function (start, length) {
			start = this._ensureIndex(start);
			if (length == undefined || start + length > this.clusters.length) {
				length = this.clusters.length - start;
			}
			length = Math.max(0, length);

			var delta = 0;
			for (var i = start, goal = start + length; i < goal; i++) {
				delta += this.clusters[i].rawString.length;
			}
			for (var i = start + length, goal = this.clusters.length; i < goal; i++) {
				this.clusters[i].rawIndex -= delta;
			}

			this.clusters.splice(start, length);
			return this;
		},
		insert: function (s, start) {
			start = this._ensureIndex(start);
			s = this._toUnistring(s, 'insert').clusters.slice();

			var srcDelta = 0;
			var dstDelta = 0;
			if (start == this.clusters.length) {
				if (this.clusters.length) {
					var last = this.clusters.length - 1;
					srcDelta = this.clusters[last].rawIndex +
						this.clusters[last].rawString.length;
				}
			}
			else {
				srcDelta = this.clusters[start].rawIndex;
			}

			for (var i = 0, goal = s.length; i < goal; i++) {
				s[i].rawIndex += srcDelta;
				dstDelta += s[i].rawString.length;
			}
			for (var i = start, goal = this.clusters.length; i < goal; i++) {
				this.clusters[i].rawIndex += dstDelta;
			}

			s.unshift(start, 0);
			this.clusters.splice.apply(this.clusters, s);
			return this;
		},
		append: function (s) {
			return this.insert(s, this.clusters.length);
		},
		codePointsAt: function (index) {
			index = this._ensureIndex(index);
			if (index < 0 || index >= this.clusters.length) return undefined;
			return this.clusters[index].codePoints;
		},
		clusterAt: function (index) {
			return this.rawStringAt.apply(this, arguments);
		},
		rawStringAt: function (index) {
			index = this._ensureIndex(index);
			if (index < 0 || index >= this.clusters.length) return '';
			return this.clusters[index].rawString;
		},
		rawIndexAt: function (index) {
			index = this._ensureIndex(index);
			if (index < 0 || this.clusters.length == 0 || index > this.clusters.length) return NaN;
			if (index == this.clusters.length) {
				return this.clusters[index - 1].rawIndex +
					this.clusters[index - 1].rawString.length;
			}
			return this.clusters[index].rawIndex;
		},
		forEach: function () {
			this.clusters.forEach.apply(this.clusters, arguments);
		},
		getClusterIndexFromUTF16Index: function (index) {
			var left = 0, right = this.clusters.length - 1;
			var middle, rawIndex, length;

			if (right >= 0 && index == this.clusters[right].rawIndex + this.clusters[right].rawString.length) {
				return right + 1;
			}

			while (left <= right) {
				middle = ((left + right) / 2) >> 0;

				rawIndex = this.clusters[middle].rawIndex;
				length = this.clusters[middle].rawString.length;

				if (rawIndex + length - 1 < index) {
					left = middle + 1;
				}
				else if (index < rawIndex) {
					right = middle - 1;
				}
				else {
					return middle;
				}
			}

			return -1;
		},

		/*
		 * string like properties and methods
		 */

		get length () {
			return this.clusters.length;
		},
		charAt: function (index) {
			if (index < 0 || index >= this.clusters.length) return '';
			return this.clusters[index].rawString.charAt(0);
		},
		charCodeAt: function (index) {
			if (index < 0 || index >= this.clusters.length) return NaN;
			return this.clusters[index].codePoints[0];
		},
		substring: function (start, end) {
			if (start == undefined) {
				start = 0;
			}
			if (end == undefined) {
				end = this.clusters.length;
			}
			start = Math.max(0, Math.min(start, this.clusters.length));
			end = Math.max(0, Math.min(end, this.clusters.length));
			if (start > end) {
				var tmp = start;
				start = end;
				end = tmp;
			}
			return new Unistring(this.clusters.slice(start, end));
		},
		substr: function (start, length) {
			start = this._ensureIndex(start);
			if (length == undefined || start + length > this.clusters.length) {
				length = this.clusters.length - start;
			}
			if (length < 0) {
				length = 0;
			}
			return new Unistring(this.clusters.slice(start, start + length));
		},
		slice: function (start, end) {
			start = this._ensureIndex(start);
			end = this._ensureIndex(end, true);
			return new Unistring(this.clusters.slice(start, end));
		},
		concat: function (s) {
			return this.insert(s, this.clusters.length);
		},
		indexOf: function (s) {
			s = this._toUnistring(s, 'indexOf');

			var whole = this.toString();
			var part = s.toString();
			var rawIndex = 0;
			var clusterIndex = 0;

			while ((rawIndex = whole.indexOf(part, rawIndex)) >= 0) {
				while (clusterIndex < this.clusters.length
					   && this.clusters[clusterIndex].rawIndex < rawIndex) {
					clusterIndex++;
				}

				if (clusterIndex >= this.clusters.length) {
					return -1;
				}

				if (this.substr(clusterIndex, s.length).toString() == part) {
					return clusterIndex;
				}

				rawIndex++;
			}

			return -1;
		},
		lastIndexOf: function (s) {
			s = this._toUnistring(s, 'lastIndexOf');

			var whole = this.toString();
			var part = s.toString();
			var rawIndex = whole.length - 1;
			var clusterIndex = this.clusters.length - 1;

			while (rawIndex >= 0
				   && (rawIndex = whole.lastIndexOf(part, rawIndex)) >= 0) {
				while (clusterIndex >= 0
					   && this.clusters[clusterIndex].rawIndex > rawIndex) {
					clusterIndex--;
				}

				if (clusterIndex < 0) {
					return -1;
				}

				if (this.substr(clusterIndex, s.length).toString() == part) {
					return clusterIndex;
				}

				rawIndex--;
			}

			return -1;
		},
		toLowerCase: function (useLocale) {
			var method = useLocale && 'toLocaleLowerCase' in String.prototype ?
				'toLocaleLowerCase' : 'toLowerCase';
			return new Unistring(this.toString()[method]());
		},
		toUpperCase: function (useLocale) {
			var method = useLocale && 'toLocaleUpperCase' in String.prototype ?
				'toLocaleUpperCase' : 'toUpperCase';
			return new Unistring(this.toString()[method]());
		}
	};

	/*
	 * exporting
	 */

	Unistring.getCodePointArray = resolveSurrogates;
	Unistring.getGraphemeBreakProp = graphemeFinder;
	Unistring.getWordBreakProp = wordFinder;
	Unistring.getScriptProp = scriptFinder;
	Unistring.getUTF16FromCodePoint = getUTF16FromCodePoint;
	Unistring.getCodePointString = getCodePointString;
	Unistring.getWords = getWords;
	Unistring.GBP = GBP;
	Unistring.WBP = WBP;
	Unistring.SCRIPT = SCRIPT;

	if (typeof module !== 'undefined' && typeof exports !== 'undefined') {
		module.exports = Unistring;
	}
	else {
		global.Unistring = Unistring;
	}

})(this);

// vim:set ts=4 sw=4 fenc=UTF-8 ff=unix ft=javascript fdm=marker fmr=<<<,>>> :
