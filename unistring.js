/**
 * Unistring: breaks a native string into an array of grapheme cluster,
 *            and provides native string like manipulation methods.
 * =============================================================================
 *
 *
 * @author akahuku@gmail.com
 * @license MIT
 */

(function (global) {
	'use strict';

	/*
	 * data table, taken from:
	 * http://www.unicode.org/Public/8.0.0/ucd/auxiliary/GraphemeBreakProperty.txt
	 */

	// GENERATED CODE START <<<1
	// This data was generated by the command 'node mkdata.js -g'.
	var GRAPHEME_BREAK_PROPS = '\
0500004001040A002000050B004000030D002000050E004002057F00200405AD002000060003000E\
068304E000069105A00506BF05200006C105400006C405400006C7052000050006C0000610066001\
051C062000064B06A002067006200006D606E00005DD06200006DF06C00006E706400006EA068000\
050F0720000611072000063007600306A607600106EB0720010616088000061B0820010625086000\
062908A000065908600006E30800040803092000063A092000083B092000063C092000083E096000\
06410900010849098000064D092000084E094000065109E000066209400006810920000882094000\
06BC09200006BE09200008BF09400006C109800008C709400008CB09400006CD09200006D7092000\
06E209400006010A400008030A2000063C0A2000083E0A600006410A400006470A4000064B0A6000\
06510A200006700A400006750A200006810A400008830A200006BC0A200008BE0A600006C10AA000\
06C70A400008C90A200008CB0A400006CD0A200006E20A400006010B200008020B4000063C0B2000\
063E0B400008400B200006410B800008470B4000084B0B4000064D0B200006560B400006620B4000\
06820B200006BE0B200008BF0B200006C00B200008C10B400008C60B600008CA0B600006CD0B2000\
06D70B200006000C200008010C6000063E0C600008410C800006460C6000064A0C800006550C4000\
06620C400006810C200008820C400006BC0C200008BE0C200006BF0C200008C00C400006C20C2000\
08C30C400006C60C200008C70C400008CA0C400006CC0C400006D50C400006E20C400006010D2000\
08020D4000063E0D2000083F0D400006410D800008460D6000084A0D6000064D0D200006570D2000\
06620D400008820D400006CA0D200006CF0D200008D00D400006D20D600006D60D200008D80DE000\
06DF0D200008F20D400006310E200008330E200006340EE00006470E000106B10E200008B30E2000\
06B40EC00006BB0E400006C80EC00006180F400006350F200006370F200006390F2000083E0F4000\
06710FC001087F0F200006800FA00006860F4000068D0F600106990F800406C60F2000062D108000\
0831102000063210C0000639104000083B104000063D10400008561040000658104000065E106000\
0671108000068210200008841020000685104000068D102000069D102000090011000C0A60110009\
0BA811000B065D136000061217600006321760000652174000067217400006B417400008B6172000\
06B717E00008BE17000106C617200008C717400006C917600106DD172000060B186000050E182000\
06A9182000062019600008231980000627194000082919600008301940000632192000083319C000\
063919600006171A400008191A4000061B1A200008551A200006561A200008571A200006581AE000\
06601A200006621A200006651A0001086D1AC00006731A4001067F1A200006B01AE00106001B8000\
08041B200006341B200008351B200006361BA000083B1B2000063C1B2000083D1BA00006421B2000\
08431B4000066B1B200106801B400008821B200008A11B200006A21B800008A61B400006A81B4000\
08AA1B200006AB1B600006E61B200008E71B200006E81B400008EA1B600006ED1B200008EE1B2000\
06EF1B600008F21B400008241C0001062C1C000108341C400006361C400006D01C600006D41CA001\
08E11C200006E21CE00006ED1C200008F21C400006F41C200006F81C400006C01DC00606FC1D8000\
050B202000060C204000050E204000052820E000056020000206D020200406EF2C6000067F2D2000\
06E02D0004062A30C0000699304000066FA680000674A64001069EA6400006F0A640000602A82000\
0606A82000060BA820000823A840000625A840000827A820000880A8400008B4A8000206C4A82000\
06E0A840020626A900010647A960010852A940000960A9A0030680A960000883A9200006B3A92000\
08B4A9400006B6A9800008BAA9400006BCA9200008BDA9800006E5A920000629AAC000082FAA4000\
0631AA40000833AA40000635AA40000643AA2000064CAA2000084DAA2000067CAA200006B0AA2000\
06B2AA600006B7AA400006BEAA400006C1AA200008EBAA200006ECAA400008EEAA400008F5AA2000\
06F6AA200008E3AB400006E5AB200008E6AB400006E8AB200008E9AB400008ECAB200006EDAB2000\
0C00AC20000D01AC60030C1CAC20000D1DAC60030C38AC20000D39AC60030C54AC20000D55AC6003\
0C70AC20000D71AC60030C8CAC20000D8DAC60030CA8AC20000DA9AC60030CC4AC20000DC5AC6003\
0CE0AC20000DE1AC60030CFCAC20000DFDAC60030C18AD20000D19AD60030C34AD20000D35AD6003\
0C50AD20000D51AD60030C6CAD20000D6DAD60030C88AD20000D89AD60030CA4AD20000DA5AD6003\
0CC0AD20000DC1AD60030CDCAD20000DDDAD60030CF8AD20000DF9AD60030C14AE20000D15AE6003\
0C30AE20000D31AE60030C4CAE20000D4DAE60030C68AE20000D69AE60030C84AE20000D85AE6003\
0CA0AE20000DA1AE60030CBCAE20000DBDAE60030CD8AE20000DD9AE60030CF4AE20000DF5AE6003\
0C10AF20000D11AF60030C2CAF20000D2DAF60030C48AF20000D49AF60030C64AF20000D65AF6003\
0C80AF20000D81AF60030C9CAF20000D9DAF60030CB8AF20000DB9AF60030CD4AF20000DD5AF6003\
0CF0AF20000DF1AF60030C0CB020000D0DB060030C28B020000D29B060030C44B020000D45B06003\
0C60B020000D61B060030C7CB020000D7DB060030C98B020000D99B060030CB4B020000DB5B06003\
0CD0B020000DD1B060030CECB020000DEDB060030C08B120000D09B160030C24B120000D25B16003\
0C40B120000D41B160030C5CB120000D5DB160030C78B120000D79B160030C94B120000D95B16003\
0CB0B120000DB1B160030CCCB120000DCDB160030CE8B120000DE9B160030C04B220000D05B26003\
0C20B220000D21B260030C3CB220000D3DB260030C58B220000D59B260030C74B220000D75B26003\
0C90B220000D91B260030CACB220000DADB260030CC8B220000DC9B260030CE4B220000DE5B26003\
0C00B320000D01B360030C1CB320000D1DB360030C38B320000D39B360030C54B320000D55B36003\
0C70B320000D71B360030C8CB320000D8DB360030CA8B320000DA9B360030CC4B320000DC5B36003\
0CE0B320000DE1B360030CFCB320000DFDB360030C18B420000D19B460030C34B420000D35B46003\
0C50B420000D51B460030C6CB420000D6DB460030C88B420000D89B460030CA4B420000DA5B46003\
0CC0B420000DC1B460030CDCB420000DDDB460030CF8B420000DF9B460030C14B520000D15B56003\
0C30B520000D31B560030C4CB520000D4DB560030C68B520000D69B560030C84B520000D85B56003\
0CA0B520000DA1B560030CBCB520000DBDB560030CD8B520000DD9B560030CF4B520000DF5B56003\
0C10B620000D11B660030C2CB620000D2DB660030C48B620000D49B660030C64B620000D65B66003\
0C80B620000D81B660030C9CB620000D9DB660030CB8B620000DB9B660030CD4B620000DD5B66003\
0CF0B620000DF1B660030C0CB720000D0DB760030C28B720000D29B760030C44B720000D45B76003\
0C60B720000D61B760030C7CB720000D7DB760030C98B720000D99B760030CB4B720000DB5B76003\
0CD0B720000DD1B760030CECB720000DEDB760030C08B820000D09B860030C24B820000D25B86003\
0C40B820000D41B860030C5CB820000D5DB860030C78B820000D79B860030C94B820000D95B86003\
0CB0B820000DB1B860030CCCB820000DCDB860030CE8B820000DE9B860030C04B920000D05B96003\
0C20B920000D21B960030C3CB920000D3DB960030C58B920000D59B960030C74B920000D75B96003\
0C90B920000D91B960030CACB920000DADB960030CC8B920000DC9B960030CE4B920000DE5B96003\
0C00BA20000D01BA60030C1CBA20000D1DBA60030C38BA20000D39BA60030C54BA20000D55BA6003\
0C70BA20000D71BA60030C8CBA20000D8DBA60030CA8BA20000DA9BA60030CC4BA20000DC5BA6003\
0CE0BA20000DE1BA60030CFCBA20000DFDBA60030C18BB20000D19BB60030C34BB20000D35BB6003\
0C50BB20000D51BB60030C6CBB20000D6DBB60030C88BB20000D89BB60030CA4BB20000DA5BB6003\
0CC0BB20000DC1BB60030CDCBB20000DDDBB60030CF8BB20000DF9BB60030C14BC20000D15BC6003\
0C30BC20000D31BC60030C4CBC20000D4DBC60030C68BC20000D69BC60030C84BC20000D85BC6003\
0CA0BC20000DA1BC60030CBCBC20000DBDBC60030CD8BC20000DD9BC60030CF4BC20000DF5BC6003\
0C10BD20000D11BD60030C2CBD20000D2DBD60030C48BD20000D49BD60030C64BD20000D65BD6003\
0C80BD20000D81BD60030C9CBD20000D9DBD60030CB8BD20000DB9BD60030CD4BD20000DD5BD6003\
0CF0BD20000DF1BD60030C0CBE20000D0DBE60030C28BE20000D29BE60030C44BE20000D45BE6003\
0C60BE20000D61BE60030C7CBE20000D7DBE60030C98BE20000D99BE60030CB4BE20000DB5BE6003\
0CD0BE20000DD1BE60030CECBE20000DEDBE60030C08BF20000D09BF60030C24BF20000D25BF6003\
0C40BF20000D41BF60030C5CBF20000D5DBF60030C78BF20000D79BF60030C94BF20000D95BF6003\
0CB0BF20000DB1BF60030CCCBF20000DCDBF60030CE8BF20000DE9BF60030C04C020000D05C06003\
0C20C020000D21C060030C3CC020000D3DC060030C58C020000D59C060030C74C020000D75C06003\
0C90C020000D91C060030CACC020000DADC060030CC8C020000DC9C060030CE4C020000DE5C06003\
0C00C120000D01C160030C1CC120000D1DC160030C38C120000D39C160030C54C120000D55C16003\
0C70C120000D71C160030C8CC120000D8DC160030CA8C120000DA9C160030CC4C120000DC5C16003\
0CE0C120000DE1C160030CFCC120000DFDC160030C18C220000D19C260030C34C220000D35C26003\
0C50C220000D51C260030C6CC220000D6DC260030C88C220000D89C260030CA4C220000DA5C26003\
0CC0C220000DC1C260030CDCC220000DDDC260030CF8C220000DF9C260030C14C320000D15C36003\
0C30C320000D31C360030C4CC320000D4DC360030C68C320000D69C360030C84C320000D85C36003\
0CA0C320000DA1C360030CBCC320000DBDC360030CD8C320000DD9C360030CF4C320000DF5C36003\
0C10C420000D11C460030C2CC420000D2DC460030C48C420000D49C460030C64C420000D65C46003\
0C80C420000D81C460030C9CC420000D9DC460030CB8C420000DB9C460030CD4C420000DD5C46003\
0CF0C420000DF1C460030C0CC520000D0DC560030C28C520000D29C560030C44C520000D45C56003\
0C60C520000D61C560030C7CC520000D7DC560030C98C520000D99C560030CB4C520000DB5C56003\
0CD0C520000DD1C560030CECC520000DEDC560030C08C620000D09C660030C24C620000D25C66003\
0C40C620000D41C660030C5CC620000D5DC660030C78C620000D79C660030C94C620000D95C66003\
0CB0C620000DB1C660030CCCC620000DCDC660030CE8C620000DE9C660030C04C720000D05C76003\
0C20C720000D21C760030C3CC720000D3DC760030C58C720000D59C760030C74C720000D75C76003\
0C90C720000D91C760030CACC720000DADC760030CC8C720000DC9C760030CE4C720000DE5C76003\
0C00C820000D01C860030C1CC820000D1DC860030C38C820000D39C860030C54C820000D55C86003\
0C70C820000D71C860030C8CC820000D8DC860030CA8C820000DA9C860030CC4C820000DC5C86003\
0CE0C820000DE1C860030CFCC820000DFDC860030C18C920000D19C960030C34C920000D35C96003\
0C50C920000D51C960030C6CC920000D6DC960030C88C920000D89C960030CA4C920000DA5C96003\
0CC0C920000DC1C960030CDCC920000DDDC960030CF8C920000DF9C960030C14CA20000D15CA6003\
0C30CA20000D31CA60030C4CCA20000D4DCA60030C68CA20000D69CA60030C84CA20000D85CA6003\
0CA0CA20000DA1CA60030CBCCA20000DBDCA60030CD8CA20000DD9CA60030CF4CA20000DF5CA6003\
0C10CB20000D11CB60030C2CCB20000D2DCB60030C48CB20000D49CB60030C64CB20000D65CB6003\
0C80CB20000D81CB60030C9CCB20000D9DCB60030CB8CB20000DB9CB60030CD4CB20000DD5CB6003\
0CF0CB20000DF1CB60030C0CCC20000D0DCC60030C28CC20000D29CC60030C44CC20000D45CC6003\
0C60CC20000D61CC60030C7CCC20000D7DCC60030C98CC20000D99CC60030CB4CC20000DB5CC6003\
0CD0CC20000DD1CC60030CECCC20000DEDCC60030C08CD20000D09CD60030C24CD20000D25CD6003\
0C40CD20000D41CD60030C5CCD20000D5DCD60030C78CD20000D79CD60030C94CD20000D95CD6003\
0CB0CD20000DB1CD60030CCCCD20000DCDCD60030CE8CD20000DE9CD60030C04CE20000D05CE6003\
0C20CE20000D21CE60030C3CCE20000D3DCE60030C58CE20000D59CE60030C74CE20000D75CE6003\
0C90CE20000D91CE60030CACCE20000DADCE60030CC8CE20000DC9CE60030CE4CE20000DE5CE6003\
0C00CF20000D01CF60030C1CCF20000D1DCF60030C38CF20000D39CF60030C54CF20000D55CF6003\
0C70CF20000D71CF60030C8CCF20000D8DCF60030CA8CF20000DA9CF60030CC4CF20000DC5CF6003\
0CE0CF20000DE1CF60030CFCCF20000DFDCF60030C18D020000D19D060030C34D020000D35D06003\
0C50D020000D51D060030C6CD020000D6DD060030C88D020000D89D060030CA4D020000DA5D06003\
0CC0D020000DC1D060030CDCD020000DDDD060030CF8D020000DF9D060030C14D120000D15D16003\
0C30D120000D31D160030C4CD120000D4DD160030C68D120000D69D160030C84D120000D85D16003\
0CA0D120000DA1D160030CBCD120000DBDD160030CD8D120000DD9D160030CF4D120000DF5D16003\
0C10D220000D11D260030C2CD220000D2DD260030C48D220000D49D260030C64D220000D65D26003\
0C80D220000D81D260030C9CD220000D9DD260030CB8D220000DB9D260030CD4D220000DD5D26003\
0CF0D220000DF1D260030C0CD320000D0DD360030C28D320000D29D360030C44D320000D45D36003\
0C60D320000D61D360030C7CD320000D7DD360030C98D320000D99D360030CB4D320000DB5D36003\
0CD0D320000DD1D360030CECD320000DEDD360030C08D420000D09D460030C24D420000D25D46003\
0C40D420000D41D460030C5CD420000D5DD460030C78D420000D79D460030C94D420000D95D46003\
0CB0D420000DB1D460030CCCD420000DCDD460030CE8D420000DE9D460030C04D520000D05D56003\
0C20D520000D21D560030C3CD520000D3DD560030C58D520000D59D560030C74D520000D75D56003\
0C90D520000D91D560030CACD520000DADD560030CC8D520000DC9D560030CE4D520000DE5D56003\
0C00D620000D01D660030C1CD620000D1DD660030C38D620000D39D660030C54D620000D55D66003\
0C70D620000D71D660030C8CD620000D8DD660030CA8D620000DA9D660030CC4D620000DC5D66003\
0CE0D620000DE1D660030CFCD620000DFDD660030C18D720000D19D760030C34D720000D35D76003\
0C50D720000D51D760030C6CD720000D6DD760030C88D720000D89D760030AB0D7E0020BCBD72006\
0500D8E0FF05FFDF2000061EFB20000600FE00020620FE000205FFFE2000069EFF400005F0FF8001\
06FD01210006E0022100067603A10006010A610006050A4100060C0A810006380A6100063F0A2100\
06E50A4100080010210006011021000802102100063810E101067F106100088210210008B0106100\
06B310810008B710410006B910410005BD1021000600116100062711A100082C112100062D110101\
06731121000680114100088211210008B311610006B611210108BF11410006CA116100082C126100\
062F126100083212410006341221000835122100063612410006DF12210008E012610006E3120101\
06001341000802134100063C132100063E132100083F132100064013210008411381000847134100\
084B13610006571321000862134100066613E100067013A10006B014210008B114410006B314C100\
08B914210006BA14210008BB14410006BD14210008BE14210006BF14410008C114210006C2144100\
06AF15210008B015410006B215810008B815810006BC15410008BE15210006BF15410006DC154100\
08301661000633160101083B164100063D162100083E162100063F16410006AB16210008AC162100\
06AD16210008AE16410006B016C10008B616210006B7162100061D17610008201741000622178100\
0826172100062717A10006F06AA10006306BE10008516FC105068F6F8100069DBC410005A0BC8100\
0665D121000866D121000667D16100086DD12100066ED1A1000573D10101067BD101010685D1E100\
06AAD181000642D261000600DAE106063BDA41060675DA21000684DA2100069BDAA10006A1DAE101\
06D0E8E10007E6F141030500000E200600010E1E05F001EEFF05EF092EC2'.replace(
	/[0-9A-F]{2}/g,
	function($0){return String.fromCharCode(parseInt($0, 16))});

	var GBP_Other = 0;
	var GBP_SOT = 1;
	var GBP_EOT = 2;
	var GBP_CR = 3;
	var GBP_LF = 4;
	var GBP_Control = 5;
	var GBP_Extend = 6;
	var GBP_Regional_Indicator = 7;
	var GBP_SpacingMark = 8;
	var GBP_L = 9;
	var GBP_V = 10;
	var GBP_T = 11;
	var GBP_LV = 12;
	var GBP_LVT = 13;

	var GRAPHEME_BREAK_PROP_UNIT_LENGTH = 5;

	var GBP = {
		'Other': 0,
		'SOT': 1,
		'EOT': 2,
		'CR': 3,
		'LF': 4,
		'Control': 5,
		'Extend': 6,
		'Regional_Indicator': 7,
		'SpacingMark': 8,
		'L': 9,
		'V': 10,
		'T': 11,
		'LV': 12,
		'LVT': 13
	};

	// GENERATED CODE END
	// >>>

	/*
	 * data table, taken from:
	 * http://www.unicode.org/Public/8.0.0/ucd/auxiliary/WordBreakProperty.txt
	 */

	// GENERATED CODE START <<<1
	// This data was generated by the command 'node mkdata.js -w'.
	var WORD_BREAK_PROPS = '\
1509002000070A002000080B004000060D0020001520002000032200200004270020000E2C002000\
0F2E00200010300040010D3A0020000E3B0020000C41004003115F0020000C610040030885002000\
15A00020000CAA0020000BAD0020000CB50020000DB70020000CBA0020000CC000E0020CD800E003\
0CF80040390CC60280010DD70220000CE002A0000CEC0220000CEE022000090003000E0C7003A000\
0C760340000C7A0380000E7E0320000C7F0320000C860320000D870320000C880360000C8C032000\
0C8E0380020CA303600A0CF7036011098304E0000C8A04C0140C3105C0040C590520000C6105E004\
0E89052000099105A00509BF05200009C105400009C405400009C705200005D005600305F0056000\
0CF30520000DF40520000B0006C0000E0C06400009100660010B1C0620000C20066005094B06A002\
1060064001106B0620000E6C0620000C6E06400009700620000C7106600C0CD506200009D606E000\
0BDD06200009DF06C0000CE506400009E706400009EA0680000CEE06400010F00640010CFA066000\
0CFF0620000B0F0720000C1007200009110720000C1207C00309300760030C4D07200B09A6076001\
0CB107200010C00740010CCA07200409EB0720010CF40740000EF80720000CFA0720000C0008C002\
09160880000C1A082000091B0820010C2408200009250860000C28082000092908A0000C40082003\
09590860000CA008A00209E30820040C0409C006093A0960000C3D092000093E0940020C50092000\
095109E0000C58094001096209400010660940010C7109000209810960000C850900010C8F094000\
0C9309C0020CAA09E0000CB20920000CB609800009BC0920000CBD09200009BE09E00009C7094000\
09CB0960000CCE09200009D70920000CDC0940000CDF09600009E209400010E60940010CF0094000\
09010A60000C050AC0000C0F0A40000C130AC0020C2A0AE0000C320A40000C350A40000C380A4000\
093C0A2000093E0AA00009470A4000094B0A600009510A20000C590A80000C5E0A200010660A4001\
09700A40000C720A600009750A200009810A60000C850A20010C8F0A60000C930AC0020CAA0AE000\
0CB20A40000CB50AA00009BC0A20000CBD0A200009BE0A000109C70A600009CB0A60000CD00A2000\
0CE00A400009E20A400010E60A40010CF90A200009010B60000C050B00010C0F0B40000C130BC002\
0C2A0BE0000C320B40000C350BA000093C0B20000C3D0B2000093E0BE00009470B4000094B0B6000\
09560B40000C5C0B40000C5F0B600009620B400010660B40010C710B200009820B20000C830B2000\
0C850BC0000C8E0B60000C920B80000C990B40000C9C0B20000C9E0B40000CA30B40000CA80B6000\
0CAE0B800109BE0BA00009C60B600009CA0B80000CD00B200009D70B200010E60B400109000C8000\
0C050C00010C0E0C60000C120CE0020C2A0C00020C3D0C2000093E0CE00009460C6000094A0C8000\
09550C40000C580C60000C600C400009620C400010660C400109810C60000C850C00010C8E0C6000\
0C920CE0020CAA0C40010CB50CA00009BC0C20000CBD0C200009BE0CE00009C60C600009CA0C8000\
09D50C40000CDE0C20000CE00C400009E20C400010E60C40010CF10C400009010D60000C050D0001\
0C0E0D60000C120D20050C3D0D2000093E0DE00009460D6000094A0D80000C4E0D200009570D2000\
0C5F0D600009620D400010660D40010C7A0DC00009820D40000C850D40020C9A0D00030CB30D2001\
0CBD0D20000CC00DE00009CA0D200009CF0DC00009D60D200009D80D000110E60D400109F20D4000\
09310E200009340EE00009470E000110500E400109B10E200009B40EC00009BB0E400009C80EC000\
10D00E40010C000F200009180F400010200F400109350F200009370F200009390F2000093E0F4000\
0C400F00010C490F800409710F800209860F40000C880FA000098D0F600109990F800409C60F2000\
092B10800210401040010956108000095E1060000962106000096710E00009711080000982108001\
098F1020001090104001099A1080000CA010C0040CC71020000CCD1020000CD01060050CFC10A029\
0C4A1280000C5012E0000C581220000C5A1280000C601220050C8A1280000C901220040CB2128000\
0CB812E0000CC01220000CC21280000CC812E0010CD81220070C121380000C18136008095D136000\
0C801300020CA013C00A0CF813C0000C0114804D0C6F1620020C811640030CA01660090CEE166001\
0C0017A0010C0E17800009121760000C2017400209321760000C4017400209521740000C6017A001\
0C6E176000097217400009B417000409DD17200010E0174001090B1860000B0E1820001010184001\
0C2018000B0C8018200509A91820000CAA1820000CB018C0080C0019E00309201980010930198001\
104619400110D01940010C001AE00209171AA00009551A400109601AA003097F1A200010801A4001\
10901A400109B01AE00109001BA0000C051BE00509341B20020C451BE00010501B4001096B1B2001\
09801B60000C831BC00309A11BA0010CAE1B400010B01B40010CBA1B800509E61BC0010C001C8004\
09241C800210401C40010C4D1C600010501C40010C5A1C800409D01C600009D41CA0020CE91C8000\
09ED1C20000CEE1C800009F21C60000CF51C400009F81C40000C001D001809C01DC00609FC1D8000\
0C001EC0220C181FC0000C201FC0040C481FC0000C501F00010C591F20000C5B1F20000C5D1F2000\
0C5F1FE0030C801FA0060CB61FE0000CBE1F20000CC21F60000CC61FE0000CD01F80000CD61FC000\
0CE01FA0010CF21F60000CF61FE0001500208001090C2040000B0E2040000F182040000F24202000\
0D2720200008282040000B2A20A000152F202000113F2040000E442020001154202000155F202000\
0B6020A0000B662040010C712020000C7F2020000C9020A00109D02020040C022120000C07212000\
0C0A2140010C152120000C1921A0000C242120000C262120000C282120000C2A2180000C2F216001\
0C3C2180000C4521A0000C4E2120000C602120050CB62480060C002CE0050C302CE0050C602CA010\
0CEB2C800009EF2C60000CF22C40000C002DC0040C272D20000C2D2D20000C302D00070C6F2D2000\
097F2D20000C802DE0020CA02DE0000CA82DE0000CB02DE0000CB82DE0000CC02DE0000CC82DE000\
0CD02DE0000CD82DE00009E02D00040C2F2E200015003020000C05302000092A30C000143130A000\
0C3B304000134130C00A0999304000149B308000139F30200014A030200012A130400B14FC306000\
12FF3020000C053120050C3131C00B0CA031600312F031000212D032E005120033000B0C00A0A091\
0CD0A4C0050C00A5A0210C10A600021020A640010C2AA640000C40A6E005096FA680000974A64001\
0C7FA6E003099EA640000CA0A6000A09F0A640000C17A720010C22A7E00C0C8BA760040CB0A70001\
0CF7A760010902A820000C03A860000906A820000C07A88000090BA820000C0CA8E0020923A8A000\
0C40A880060980A840000C82A8400609B4A8200210D0A8400109E0A840020CF2A8C0000CFBA82000\
0CFDA820001000A940010C0AA980030926A900010C30A9E0020947A9A0010C60A9A0030980A98000\
0C84A9E00509B3A9C0010CCFA9200010D0A9400109E5A9200010F0A940010C00AA20050929AAC001\
0C40AA60000943AA20000C44AA0001094CAA40001050AA4001097BAA600009B0AA200009B2AA6000\
09B7AA400009BEAA400009C1AA20000CE0AA600109EBAAA0000CF2AA600009F5AA40000C01ABC000\
0C09ABC0000C11ABC0000C20ABE0000C28ABE0000C30AB60050C5CAB40010C70AB600E09E3AB0001\
09ECAB400010F0AB40010C00ACE0FF0CFFB3E0FF0CFEBBE0FF0CFDC3E0FF0CFCCBE0FF0CFBD32075\
0CB0D7E0020CCBD720060C00FBE0000C13FBA000051DFB2000091EFB2000051FFB4001052AFBA001\
0538FBA000053EFB20000540FB40000543FB40000546FB40010C50FB400C0CD3FB602D0C50FD0008\
0C92FDC0060CF0FD80010900FE00020E10FE20000D13FE20000E14FE20000920FE00021133FE4000\
114DFE60000E50FE20000F52FE20000E54FE20000D55FE20000C70FEA0000C76FEE0100BFFFE2000\
0F07FF20000E0CFF20000F0EFF20000D1AFF20000E1BFF20000C21FF4003113FFF20000C41FF4003\
1266FF40011470FF20001271FFA005099EFF40000CA0FFE0030CC2FFC0000CCAFFC0000CD2FFC000\
0CDAFF60000BF9FF60000C000081010C0D0041030C280061020C3C0041000C3F00E1010C5000C101\
0C8000610F0C4001A10609FD0121000C8002A1030CA002210609E00221000C000301040C30036103\
0C5003C104097603A1000C8003C1030CA00381040CC80301010CD103A1000C0004C11310A0044101\
0C000501050C300581060C0006E1260C4007C1020C600701010C0008C1000C080821000C0A088105\
0C370841000C3C0821000C3F08E1020C6008E1020C8008E1030CE00861020CF40841000C0009C102\
0C200941030C800901070CBE0941000C000A210009010A610009050A4100090C0A81000C100A8100\
0C150A61000C190A610309380A6100093F0A21000C600AA1030C800AA1030CC00A01010CC90A8103\
09E50A41000C000BC1060C400BC1020C600B61020C800B41020C000C21090C800C61060CC00C6106\
09001061000C0310A106093810E1011066104101097F1081000C8310A10509B01061010BBD102100\
0CD010210310F010410109001161000C03118104092711C10110361141010C501161040973112100\
0C7611210009801161000C8311010609B311C1010CC111810009CA11610010D01141010CDA112100\
0CDC1121000C001241020C13122103092C1281010C8012E1000C881221000C8A1281000C8F12E101\
0C9F1241010CB012E10509DF12810110F012410109001381000C051301010C0F1341000C1313C102\
0C2A13E1000C321341000C3513A100093C1321000C3D132100093E13E1000947134100094B136100\
0C5013210009571321000C5D13A1000962134100096613E100097013A1000C8014010609B0148102\
0CC41441000CC714210010D01441010C8015E10509AF15E10009B81521010CD815810009DC154100\
0C0016010609301621020C4416210010501641010C8016610509AB16A10110C0164101091D17E101\
10301741010CA018010810E01841010CFF1821000CC01A21070C002041730C0024E10D0C80248118\
0C0030E1850C0044E1480C006821470C406AE10310606A41010CD06AC10309F06AA1000C006B0106\
09306BE1000C406B810010506B41010C636BA1020C7D6B61020C006FA1080C506F210009516FC105\
098F6F81000C936FA1011200B021000C00BC610D0C70BCA1010C80BC21010C90BC4101099DBC4100\
0BA0BC81000965D1A100096DD1C1000B73D10101097BD101010985D1E10009AAD181000942D26100\
0C00D4A10A0C56D4E1080C9ED441000CA2D421000CA5D441000CA9D481000CAED481010CBBD42100\
0CBDD4E1000CC5D421080C07D581000C0DD501010C16D5E1000C1ED581030C3BD581000C40D5A100\
0C46D521000C4AD5E1000C52D5812A0CA8D621030CC2D621030CDCD6E1030CFCD621030C16D7E103\
0C36D721030C50D7E1030C70D721030C8AD7E1030CAAD721030CC4D7010110CED741060900DAE106\
093BDA41060975DA21000984DA2100099BDAA10009A1DAE1010C00E8A11809D0E8E1000C00EE8100\
0C05EE61030C21EE41000C24EE21000C27EE21000C29EE41010C34EE81000C39EE21000C3BEE2100\
0C42EE21000C47EE21000C49EE21000C4BEE21000C4DEE61000C51EE41000C54EE21000C57EE2100\
0C59EE21000C5BEE21000C5DEE21000C5FEE21000C61EE41000C64EE21000C67EE81000C6CEEE100\
0C74EE81000C79EE81000C7EEE21000C80EE41010C8BEE21020CA1EE61000CA5EEA1000CABEE2102\
0C30F141030C50F141030C70F141030AE6F141030B01002E000B20000E0C0900010E1E'.replace(
	/[0-9A-F]{2}/g,
	function($0){return String.fromCharCode(parseInt($0, 16))});

	var WBP_Other = 0;
	var WBP_SOT = 1;
	var WBP_EOT = 2;
	var WBP_Double_Quote = 3;
	var WBP_Single_Quote = 4;
	var WBP_Hebrew_Letter = 5;
	var WBP_CR = 6;
	var WBP_LF = 7;
	var WBP_Newline = 8;
	var WBP_Extend = 9;
	var WBP_Regional_Indicator = 10;
	var WBP_Format = 11;
	var WBP_ALetter = 12;
	var WBP_MidLetter = 13;
	var WBP_MidNum = 14;
	var WBP_MidNumLet = 15;
	var WBP_Numeric = 16;
	var WBP_ExtendNumLet = 17;
	var WBP_Katakana = 18;
	var WBP_Hiragana = 19;
	var WBP_KanaExtension = 20;
	var WBP_Space = 21;

	var WORD_BREAK_PROP_UNIT_LENGTH = 5;

	var WBP = {
		'Other': 0,
		'SOT': 1,
		'EOT': 2,
		'Double_Quote': 3,
		'Single_Quote': 4,
		'Hebrew_Letter': 5,
		'CR': 6,
		'LF': 7,
		'Newline': 8,
		'Extend': 9,
		'Regional_Indicator': 10,
		'Format': 11,
		'ALetter': 12,
		'MidLetter': 13,
		'MidNum': 14,
		'MidNumLet': 15,
		'Numeric': 16,
		'ExtendNumLet': 17,
		'Katakana': 18,
		'Hiragana': 19,
		'KanaExtension': 20,
		'Space': 21
	};

	// GENERATED CODE END
	// >>>

	/*
	 * data table, taken from:
	 * http://www.unicode.org/Public/8.0.0/ucd/Scripts.txt
	 */

	// GENERATED CODE START <<<1
	// This data was generated by the command 'node mkdata.js -s'.
	var SCRIPTS = '\
01000020080241004003015B00C0000261004003017B00E00502AA00200001AB00E00102BA002000\
01BB00A00002C000E00201D700200002D800E00301F700200002F800203801B902E00402E002A000\
01E502A00023EA02400001EC028002290003000E037003800001740320000375036000037A038000\
017E032000037F03200003840320000185032000038603200001870320000388036000038C032000\
038E03800203A303E00737E203C00103F0030002040004A01029850440000487042015053105C004\
055905E000056105E0040189052000058A052000058D056000069105E00606D005600306F005A000\
070006A0000105062000070606C000010C062000070D06C001011B064000071E062000011F062000\
072006000401400620000741064001294B06600107560640032970062000077106800D01DD062000\
07DE064004080007C001080F078007084D0760000750070006098007400642C0076007520008C005\
523008E0015F400880035F5E08200007A008A00207E308A0030A0009200A29510940000A53092002\
01640940000A660940030B800980000B850900010B8F0940000B9309C0020BAA09E0000BB2092000\
0BB60980000BBC0920010BC70940000BCB0980000BD70920000BDC0940000BDF09A0000BE609C002\
0C010A60000C050AC0000C0F0A40000C130AC0020C2A0AE0000C320A40000C350A40000C380A4000\
0C3C0A20000C3E0AA0000C470A40000C4B0A60000C510A20000C590A80000C5E0A20000C660A0002\
0D810A60000D850A20010D8F0A60000D930AC0020DAA0AE0000DB20A40000DB50AA0000DBC0A4001\
0DC70A60000DCB0A60000DD00A20000DE00A80000DE60A80010DF90A20000E010B60000E050B0001\
0E0F0B40000E130BC0020E2A0BE0000E320B40000E350BA0000E3C0B20010E470B40000E4B0B6000\
0E560B40000E5C0B40000E5F0BA0000E660B40020F820B40000F850BC0000F8E0B60000F920B8000\
0F990B40000F9C0B20000F9E0B40000FA30B40000FA80B60000FAE0B80010FBE0BA0000FC60B6000\
0FCA0B80000FD00B20000FD70B20000FE60BA00210000C800010050C0001100E0C600010120CE002\
102A0C0002103D0C000110460C6000104A0C800010550C400010580C600010600C800010660C4001\
10780C000111810C600011850C0001118E0C600011920CE00211AA0C400111B50CA00011BC0C2001\
11C60C600011CA0C800011D50C400011DE0C200011E00C800011E60C400111F10C400012010D6000\
12050D0001120E0D600012120D2005123D0D000112460D6000124A0DA00012570D2000125F0DA000\
12660D000212790DE00013820D400013850D4002139A0D000313B30D200113BD0D200013C00DE000\
13CA0D200013CF0DC00013D60D200013D80D000113E60D400113F20D600014010E4007013F0E2000\
14400E800315810E400015840E200015870E4000158A0E2000158D0E200015940E800015990EE000\
15A10E600015A50E200015A70E200015AA0E400015AD0EA00115BB0E600015C00EA00015C60E2000\
15C80EC00015D00E400115DC0E800016000F000916490F800416710FE00416990F800416BE0FE001\
16CE0FE00001D50F800016D90F4000170010001418A010C00418C710200018CD10200018D0106005\
01FB10200018FC10800019001100201A001220091A4A1280001A5012E0001A581220001A5A128000\
1A601220051A8A1280001A901220041AB21280001AB812E0001AC01220001AC21280001AC812E001\
1AD81220071A121380001A181360081A5D1300041A801340031BA013C00A1BF813C0001C00140050\
1D8016A0031EA016600901EB1660001EEE1660012A0017A0012A0E17E0002B2017A0020135174000\
2C401780022D6017A0012D6E1760002D721740001F8017C00B1FE01740011FF01740012000184000\
01021840002004182000010518200020061820012010184001202018000B20801860051CB018C008\
2E0019E0032E201980012E301980012E401920002E441980012F5019C0032F7019A0003880198005\
38B019400338D019600138DE1940001FE019000436001A8003361E1A40004E201AE0074E601AA003\
4E7F1A60014E901A40014EA01AC00129B01AE0013E001B80093E501BA00543801B00085DC01B8006\
5DFC1B800044001C0007443B1CE001444D1C600045501C000643C01C000129D01C600001D31C2000\
29D41CA00101E11C200029E21CE00001E91C800029ED1C200001EE1CC00029F41C200001F51C4000\
29F81C400002001DC00403261DA000042B1D2000022C1D2006035D1DA00002621D800003661DA000\
026B1DA00104781D200002791DC00803BF1D200029C01DC00629FC1D800002001E002003001FC002\
03181FC00003201FC00403481FC00003501F000103591F2000035B1F2000035D1F2000035F1FE003\
03801FA00603B61FE00103C61FC00103D61FC00003DD1F600203F21F600003F61F20010100208001\
290C204000010E20E00A016620600102712020000174206001027F202000018020E001029020A001\
01A020E00329D0202004010021C00403262120000127216000022A214000012C21C0000232212000\
0133216003024E212000014F21200202602120050189216000019021604D010024E0040140246001\
01602400743500280020010029804E01762B000401982B400401BD2B800101CA2B000101EC2B8000\
39002CE00539302CE00502602C000437802C800E37F92CE00018002DC00418272D2000182D2D2000\
3A302D00073A6F2D40003A7F2D20001A802DE0021AA02DE0001AA82DE0001AB02DE0001AB82DE000\
1AC02DE0001AC82DE0001AD02DE0001AD82DE00004E02D000401002E600824802E4003249B2E200B\
24002FC01A01F02F8001010030A00024053020000106302000240730200001083020032421302001\
292A308000192E30400001303000012438308000013C308000214130C00A2999304000019B304000\
219D30600001A030200022A130400B01FB30400022FD3060002305312005193131C00B0190310002\
23A031600301C031800422F0310002190032E0030120320008196032E003017F32200A22D032E005\
220033000B0158330015240034E0FF24FF3BE0FF24FE43E0FF24FD4B203701C04D000824004EE0FF\
24FF55E0FF24FE5DE0FF24FD65E0FF24FC6DE0FF24FB75E0FF24FA7DE0FF24F985E0FF24F88DE0FF\
24F795E0FF24F69D003C2500A0A0912590A4E00653D0A400064600A580250440A6000C54A0A6000B\
0100A740040222A7C00C0188A76000028BA7600402B0A7000102F7A720013B00A880050130A84001\
4140A800074780A8A00847CEA880010AE0A8C0034800A9C005012EA92000482FA920004930A98004\
495FA920001960A9A0035580A9C00901CFA9200055D0A9400155DEA9400017E0A9E0034D00AAE006\
4D40AAC0014D50AA40014D5CAA80001760AA00044F80AA60084FDBAAA00056E0AAE0021A01ABC000\
1A09ABC0001A11ABC0001A20ABE0001A28ABE0000230AB6005015BAB2000025CAB20010365AB2000\
1B70AB000A56C0ABC00556F0AB40011900ACE0FF19FFB3E0FF19FEBBE0FF19FDC3E0FF19FCCBE0FF\
19FBD3207519B0D7E00219CBD720062400F9C02D2470FA400D0200FBE0000513FBA000061DFB4003\
0638FBA000063EFB20000640FB40000643FB40000646FB40010750FB400E07D3FB602D013EFD4000\
0750FD00080792FDC00607F0FDC0012900FE00020110FE40012920FEC001042EFE40000130FE6004\
0154FE60020168FE80000770FEA0000776FEE01001FFFE20000101FF00040221FF4003013BFFC000\
0241FF4003015BFF60012266FF40010170FF20002271FFA005019EFF400019A0FFE00319C2FFC000\
19CAFFC00019D2FFC00019DAFF600001E0FFE00001E8FFE00001F9FFA0003000008101300D004103\
3028006102303C004100303F00E101305000C101308000610F0100016100010701A1050137012101\
034001A109019001810103A001210001D001A10529FD0121004A8002A1034BA002210629E0022100\
01E1026103260003810427300361037850036105318003C103319F0321003CA00381043CC803C101\
280004010A3250040106338004C10333A00441016A000501056730058106676F0521006E0006E126\
6E4007C1026E60070101340008C1003408082100340A0881053437084100343C082100343F082100\
574008C10257570821017660080104758008E10375A708210180E008610280F408410080FB08A100\
4000098103401F0921004C200941034C3F092100628009010461A009010361BC09810261D209C105\
3D000A81003D050A41003D0C0A01013D150A61003D190A61033D380A61003D3F0A21013D500A2101\
58600A010474800A010470C00AE10470EB0A810150000BC10650390BE10059400BC10259580B0101\
5A600B61025A780B010179800B410279990B810079A90BE1005B000C210982800C610682C00C6106\
82FA0CC10007600EE1035E0010C1095E5210C1035E7F1021005C8010410865D010210365F0104101\
600011A106603611C1016F5011E104648011C10964D011010213E11181026D001241026D13126105\
818012E1008188122100818A128100818F12E101819F1261017BB01261077BF01241016B00138100\
6B051301016B0F1341006B1313C1026B2A13E1006B321341006B3513A1006B3C1321016B47134100\
6B4B1361006B501321006B571321006B5D13E1006B6613E1006B7013A1007C801401097CD0144101\
7A8015C1067AB815C104720016A1087250164101668016010766C01641017E001741037E1D17E101\
7E301701027DA018610A7DFF18210077C01A21073F002041733F0024E10D3F7024A1003F80248118\
510030E1857F0044E148540068214773406AE10373606A4101736E6A410068D06AC10368F06AC100\
6C006BC1086C506B41016C5B6BE1006C636BA1026C7D6B610263006FA10863506FE105638F6F2102\
2200B021002101B021006900BC610D6970BCA1016980BC21016990BC4101699CBC810001A0BC8100\
0100D0C11E0100D1E1040129D1C1072967D16100016AD12102297BD101010183D141002985D1E100\
018CD1C10329AAD1810001AED161070300D2C1080100D3E10A0160D341020100D4A10A0156D4E108\
019ED4410001A2D4210001A5D4410001A9D4810001AED4810101BBD4210001BDD4E10001C5D42108\
0107D58100010DD501010116D5E100011ED58103013BD581000140D5A1000146D52100014AD5E100\
0152D5812A01A8D6812401CED741068300D88151839BDAA10083A1DAE1017100E8A11871C7E80102\
0700EE81000705EE61030721EE41000724EE21000727EE21000729EE41010734EE81000739EE2100\
073BEE21000742EE21000747EE21000749EE2100074BEE2100074DEE61000751EE41000754EE2100\
0757EE21000759EE2100075BEE2100075DEE2100075FEE21000761EE41000764EE21000767EE8100\
076CEEE1000774EE81000779EE8100077EEE21000780EE4101078BEE210207A1EE610007A5EEA100\
07ABEE210207F0EE41000100F081050130F0810C01A0F0E10101B1F0E10101C1F0E10101D1F0A104\
0100F1A1010110F1E1030130F181070170F1610501E6F141032100F221000101F241000110F26105\
0140F221010150F241000100F3414F017BF5210501A5F5812501E0F6A10101F0F681000100F7810E\
0180F7A10A0100F881010110F801070150F841010160F801050190F8C1030110F921010180F9A100\
01C0F92100240000E2FF24FF07E2FF24FE0FE2FF24FD17E2FF24FC1FE2FF24FB27E2FF24FA2FE2FF\
24F937E2FF24F83FE2FF24F747E2FF24F64FE2FF24F557E2FF24F45FE2FF24F367E2FF24F26FE2FF\
24F177E2FF24F07FE2FF24EF87E2FF24EE8FE2FF24ED97E2FF24EC9F62DD2400A7E2FF24FFAEE2FF\
24FEB6E2062440B7C21B2420B8E2FF241FC0E2FF241EC882D02400F8C2430101002E000120000E0C\
2900010E1E'.replace(
	/[0-9A-F]{2}/g,
	function($0){return String.fromCharCode(parseInt($0, 16))});

	var SCRIPT_Unknown = 0;
	var SCRIPT_Common = 1;
	var SCRIPT_Latin = 2;
	var SCRIPT_Greek = 3;
	var SCRIPT_Cyrillic = 4;
	var SCRIPT_Armenian = 5;
	var SCRIPT_Hebrew = 6;
	var SCRIPT_Arabic = 7;
	var SCRIPT_Syriac = 8;
	var SCRIPT_Thaana = 9;
	var SCRIPT_Devanagari = 10;
	var SCRIPT_Bengali = 11;
	var SCRIPT_Gurmukhi = 12;
	var SCRIPT_Gujarati = 13;
	var SCRIPT_Oriya = 14;
	var SCRIPT_Tamil = 15;
	var SCRIPT_Telugu = 16;
	var SCRIPT_Kannada = 17;
	var SCRIPT_Malayalam = 18;
	var SCRIPT_Sinhala = 19;
	var SCRIPT_Thai = 20;
	var SCRIPT_Lao = 21;
	var SCRIPT_Tibetan = 22;
	var SCRIPT_Myanmar = 23;
	var SCRIPT_Georgian = 24;
	var SCRIPT_Hangul = 25;
	var SCRIPT_Ethiopic = 26;
	var SCRIPT_Cherokee = 27;
	var SCRIPT_Canadian_Aboriginal = 28;
	var SCRIPT_Ogham = 29;
	var SCRIPT_Runic = 30;
	var SCRIPT_Khmer = 31;
	var SCRIPT_Mongolian = 32;
	var SCRIPT_Hiragana = 33;
	var SCRIPT_Katakana = 34;
	var SCRIPT_Bopomofo = 35;
	var SCRIPT_Han = 36;
	var SCRIPT_Yi = 37;
	var SCRIPT_Old_Italic = 38;
	var SCRIPT_Gothic = 39;
	var SCRIPT_Deseret = 40;
	var SCRIPT_Inherited = 41;
	var SCRIPT_Tagalog = 42;
	var SCRIPT_Hanunoo = 43;
	var SCRIPT_Buhid = 44;
	var SCRIPT_Tagbanwa = 45;
	var SCRIPT_Limbu = 46;
	var SCRIPT_Tai_Le = 47;
	var SCRIPT_Linear_B = 48;
	var SCRIPT_Ugaritic = 49;
	var SCRIPT_Shavian = 50;
	var SCRIPT_Osmanya = 51;
	var SCRIPT_Cypriot = 52;
	var SCRIPT_Braille = 53;
	var SCRIPT_Buginese = 54;
	var SCRIPT_Coptic = 55;
	var SCRIPT_New_Tai_Lue = 56;
	var SCRIPT_Glagolitic = 57;
	var SCRIPT_Tifinagh = 58;
	var SCRIPT_Syloti_Nagri = 59;
	var SCRIPT_Old_Persian = 60;
	var SCRIPT_Kharoshthi = 61;
	var SCRIPT_Balinese = 62;
	var SCRIPT_Cuneiform = 63;
	var SCRIPT_Phoenician = 64;
	var SCRIPT_Phags_Pa = 65;
	var SCRIPT_Nko = 66;
	var SCRIPT_Sundanese = 67;
	var SCRIPT_Lepcha = 68;
	var SCRIPT_Ol_Chiki = 69;
	var SCRIPT_Vai = 70;
	var SCRIPT_Saurashtra = 71;
	var SCRIPT_Kayah_Li = 72;
	var SCRIPT_Rejang = 73;
	var SCRIPT_Lycian = 74;
	var SCRIPT_Carian = 75;
	var SCRIPT_Lydian = 76;
	var SCRIPT_Cham = 77;
	var SCRIPT_Tai_Tham = 78;
	var SCRIPT_Tai_Viet = 79;
	var SCRIPT_Avestan = 80;
	var SCRIPT_Egyptian_Hieroglyphs = 81;
	var SCRIPT_Samaritan = 82;
	var SCRIPT_Lisu = 83;
	var SCRIPT_Bamum = 84;
	var SCRIPT_Javanese = 85;
	var SCRIPT_Meetei_Mayek = 86;
	var SCRIPT_Imperial_Aramaic = 87;
	var SCRIPT_Old_South_Arabian = 88;
	var SCRIPT_Inscriptional_Parthian = 89;
	var SCRIPT_Inscriptional_Pahlavi = 90;
	var SCRIPT_Old_Turkic = 91;
	var SCRIPT_Kaithi = 92;
	var SCRIPT_Batak = 93;
	var SCRIPT_Brahmi = 94;
	var SCRIPT_Mandaic = 95;
	var SCRIPT_Chakma = 96;
	var SCRIPT_Meroitic_Cursive = 97;
	var SCRIPT_Meroitic_Hieroglyphs = 98;
	var SCRIPT_Miao = 99;
	var SCRIPT_Sharada = 100;
	var SCRIPT_Sora_Sompeng = 101;
	var SCRIPT_Takri = 102;
	var SCRIPT_Caucasian_Albanian = 103;
	var SCRIPT_Bassa_Vah = 104;
	var SCRIPT_Duployan = 105;
	var SCRIPT_Elbasan = 106;
	var SCRIPT_Grantha = 107;
	var SCRIPT_Pahawh_Hmong = 108;
	var SCRIPT_Khojki = 109;
	var SCRIPT_Linear_A = 110;
	var SCRIPT_Mahajani = 111;
	var SCRIPT_Manichaean = 112;
	var SCRIPT_Mende_Kikakui = 113;
	var SCRIPT_Modi = 114;
	var SCRIPT_Mro = 115;
	var SCRIPT_Old_North_Arabian = 116;
	var SCRIPT_Nabataean = 117;
	var SCRIPT_Palmyrene = 118;
	var SCRIPT_Pau_Cin_Hau = 119;
	var SCRIPT_Old_Permic = 120;
	var SCRIPT_Psalter_Pahlavi = 121;
	var SCRIPT_Siddham = 122;
	var SCRIPT_Khudawadi = 123;
	var SCRIPT_Tirhuta = 124;
	var SCRIPT_Warang_Citi = 125;
	var SCRIPT_Ahom = 126;
	var SCRIPT_Anatolian_Hieroglyphs = 127;
	var SCRIPT_Hatran = 128;
	var SCRIPT_Multani = 129;
	var SCRIPT_Old_Hungarian = 130;
	var SCRIPT_SignWriting = 131;

	var SCRIPTS_PROP_UNIT_LENGTH = 5;

	var SCRIPT = {
		'Unknown': 0,
		'Common': 1,
		'Latin': 2,
		'Greek': 3,
		'Cyrillic': 4,
		'Armenian': 5,
		'Hebrew': 6,
		'Arabic': 7,
		'Syriac': 8,
		'Thaana': 9,
		'Devanagari': 10,
		'Bengali': 11,
		'Gurmukhi': 12,
		'Gujarati': 13,
		'Oriya': 14,
		'Tamil': 15,
		'Telugu': 16,
		'Kannada': 17,
		'Malayalam': 18,
		'Sinhala': 19,
		'Thai': 20,
		'Lao': 21,
		'Tibetan': 22,
		'Myanmar': 23,
		'Georgian': 24,
		'Hangul': 25,
		'Ethiopic': 26,
		'Cherokee': 27,
		'Canadian_Aboriginal': 28,
		'Ogham': 29,
		'Runic': 30,
		'Khmer': 31,
		'Mongolian': 32,
		'Hiragana': 33,
		'Katakana': 34,
		'Bopomofo': 35,
		'Han': 36,
		'Yi': 37,
		'Old_Italic': 38,
		'Gothic': 39,
		'Deseret': 40,
		'Inherited': 41,
		'Tagalog': 42,
		'Hanunoo': 43,
		'Buhid': 44,
		'Tagbanwa': 45,
		'Limbu': 46,
		'Tai_Le': 47,
		'Linear_B': 48,
		'Ugaritic': 49,
		'Shavian': 50,
		'Osmanya': 51,
		'Cypriot': 52,
		'Braille': 53,
		'Buginese': 54,
		'Coptic': 55,
		'New_Tai_Lue': 56,
		'Glagolitic': 57,
		'Tifinagh': 58,
		'Syloti_Nagri': 59,
		'Old_Persian': 60,
		'Kharoshthi': 61,
		'Balinese': 62,
		'Cuneiform': 63,
		'Phoenician': 64,
		'Phags_Pa': 65,
		'Nko': 66,
		'Sundanese': 67,
		'Lepcha': 68,
		'Ol_Chiki': 69,
		'Vai': 70,
		'Saurashtra': 71,
		'Kayah_Li': 72,
		'Rejang': 73,
		'Lycian': 74,
		'Carian': 75,
		'Lydian': 76,
		'Cham': 77,
		'Tai_Tham': 78,
		'Tai_Viet': 79,
		'Avestan': 80,
		'Egyptian_Hieroglyphs': 81,
		'Samaritan': 82,
		'Lisu': 83,
		'Bamum': 84,
		'Javanese': 85,
		'Meetei_Mayek': 86,
		'Imperial_Aramaic': 87,
		'Old_South_Arabian': 88,
		'Inscriptional_Parthian': 89,
		'Inscriptional_Pahlavi': 90,
		'Old_Turkic': 91,
		'Kaithi': 92,
		'Batak': 93,
		'Brahmi': 94,
		'Mandaic': 95,
		'Chakma': 96,
		'Meroitic_Cursive': 97,
		'Meroitic_Hieroglyphs': 98,
		'Miao': 99,
		'Sharada': 100,
		'Sora_Sompeng': 101,
		'Takri': 102,
		'Caucasian_Albanian': 103,
		'Bassa_Vah': 104,
		'Duployan': 105,
		'Elbasan': 106,
		'Grantha': 107,
		'Pahawh_Hmong': 108,
		'Khojki': 109,
		'Linear_A': 110,
		'Mahajani': 111,
		'Manichaean': 112,
		'Mende_Kikakui': 113,
		'Modi': 114,
		'Mro': 115,
		'Old_North_Arabian': 116,
		'Nabataean': 117,
		'Palmyrene': 118,
		'Pau_Cin_Hau': 119,
		'Old_Permic': 120,
		'Psalter_Pahlavi': 121,
		'Siddham': 122,
		'Khudawadi': 123,
		'Tirhuta': 124,
		'Warang_Citi': 125,
		'Ahom': 126,
		'Anatolian_Hieroglyphs': 127,
		'Hatran': 128,
		'Multani': 129,
		'Old_Hungarian': 130,
		'SignWriting': 131
	};

	// GENERATED CODE END
	// >>>

	/*
	 * variables
	 */

	var graphemeFinder = createFinder(
		GRAPHEME_BREAK_PROPS, GRAPHEME_BREAK_PROP_UNIT_LENGTH, GBP_Other);
	var wordFinder = createFinder(
		WORD_BREAK_PROPS, WORD_BREAK_PROP_UNIT_LENGTH, WBP_Other);
	var scriptFinder = createFinder(
		SCRIPTS, SCRIPTS_PROP_UNIT_LENGTH, SCRIPT_Unknown);

	/*
	 * utility functions
	 */

	function pick2 (data, index) {
		return data.charCodeAt(index)
			|  data.charCodeAt(index + 1) << 8;
	}

	function pick3 (data, index) {
		return data.charCodeAt(index)
			|  data.charCodeAt(index + 1) << 8
			|  data.charCodeAt(index + 2) << 16;
	}

	function pick4 (data, index) {
		return data.charCodeAt(index)
			|  data.charCodeAt(index + 1) << 8
			|  data.charCodeAt(index + 2) << 16
			|  data.charCodeAt(index + 3) << 24;
	}

	function resolveSurrogates (s) {
		var result = [];
		s.replace(/[\ud800-\udb7f][\udc00-\udfff]|[\s\S]/g, function ($0) {
			if ($0.length == 2) {
				var hcp = $0.charCodeAt(0);
				var lcp = $0.charCodeAt(1);
				result.push(
					((hcp & 0x03c0) + 0x0040) << 10
					| (hcp & 0x003f) << 10
					| (lcp & 0x03ff)
				);
			}
			else {
				result.push($0.charCodeAt(0));
			}
		});
		return result;
	}

	function build (chars) {
		var result = [];
		var prevProp = GBP_SOT;
		var prevIndex = 0;
		var rawIndex = 0;
		for (var i = 0, goal = chars.length; i < goal; i++) {
			var nextProp = graphemeFinder(chars[i]);
			if (canBreak(prevProp, nextProp)) {
				if (prevIndex < i) {
					var grapheme = new Grapheme(chars.slice(prevIndex, i), rawIndex);
					result.push(grapheme);
					rawIndex += grapheme.rawString.length;
				}
				prevIndex = i;
			}
			prevProp = nextProp;
		}

		if (canBreak(prevProp, GBP_EOT)) {
			if (prevIndex < i) {
				result.push(
					new Grapheme(chars.slice(prevIndex, i), rawIndex)
				);
			}
		}

		return result;
	}

	function find (cp, table, units, otherValue) {
		var left = 0, right = ((table.length / units) >> 0) - 1;
		var middle, index, middlecp, length;

		while (left <= right) {
			middle = ((left + right) / 2) >> 0;
			index = middle * units;

			middlecp = pick4(table, index + 1);
			length = (middlecp >> 21) & 0x7ff;
			middlecp = middlecp & 0x1fffff;

			if (middlecp + length - 1 < cp) {
				left = middle + 1;
			}
			else if (cp < middlecp) {
				right = middle - 1;
			}
			else {
				return table.charCodeAt(index);
			}
		}

		return otherValue;
	}

	function createFinder (table, units, otherValue) {
		var cache = {};
		return function (cp) {
			if (cp in cache) {
				return cache[cp];
			}
			else {
				return cache[cp] = find(cp, table, units, otherValue);
			}
		};
	}

	function canBreak (prev, next) {
		/*
		 * This rules are taken from:
		 * http://unicode.org/reports/tr29/, Version 8.0.0, 2015-06-01
		 * ===========================================================
		 */

		// Break at the start and end of text.
		//   GB1: sot  ÷
		if (prev == GBP_SOT) return true;

		//   GB2: ÷  eot
		if (next == GBP_EOT) return true;

		// Do not break between a CR and LF.
		// Otherwise, break before and after controls.
		//   GB3: CR  ×  LF
		if (prev == GBP_CR && next == GBP_LF) return false;

		//   GB4: ( Control | CR | LF )  ÷
		if (prev == GBP_Control || prev == GBP_CR || prev == GBP_LF) return true;

		//   GB5: ÷  ( Control | CR | LF )
		if (next == GBP_Control || next == GBP_CR || next == GBP_LF) return true;

		// Do not break Hangul syllable sequences.
		//   GB6: L  ×  ( L | V | LV | LVT )
		if (prev == GBP_L && (next == GBP_L || next == GBP_V || next == GBP_LV || next == GBP_LVT)) return false;

		//   GB7: ( LV | V )  ×  ( V | T )
		if ((prev == GBP_LV || prev == GBP_V) && (next == GBP_V || next == GBP_T)) return false;

		//   GB8: ( LVT | T)  ×  T
		if ((prev == GBP_LVT || prev == GBP_T) && next == GBP_T) return false;

		// Do not break between regional indicator symbols.
		//   GB8a  Regional_Indicator  ×  Regional_Indicator
		if (prev == GBP_Regional_Indicator && next == GBP_Regional_Indicator) return false;

		// Do not break before extending characters.
		//   GB9: ×  Extend
		if (next == GBP_Extend) return false;

		// Only for extended grapheme clusters:
		// Do not break before SpacingMarks, or after Prepend characters.
		//   GB9a     ×  SpacingMark
		if (next == GBP_SpacingMark) return false;

		//   GB9b  Prepend  ×
		//   NOTE: At this time (Unicode 8.0), Prepend property has no characters.

		// Otherwise, break everywhere.
		//   GB10: Any  ÷  Any
		return true;
	}

	function getUTF16FromCodePoint (cp) {
		var p = (cp & 0x1f0000) >> 16;
		var o = cp & 0xffff;
		if (p) {
			return String.fromCharCode(0xd800 | ((p - 1) << 6) | ((o & 0xfc00) >> 10)) +
				String.fromCharCode(0xdc00 | (o & 0x03ff));
		}
		else {
			return String.fromCharCode(o);
		}
	}

	function getCodePointString (cp, type) {
		var result = '';
		if (cp < 0x10000) {
			result = ('0000' + cp.toString(16).toUpperCase()).substr(-4);
		}
		else {
			result = cp.toString(16).toUpperCase();
		}
		switch (type) {
		case 'entity':
			result = '&#x' + result + ';'
			break;
		case 'unicode':
			result = 'U+' + result;
			break;
		}
		return result;
	}

	function wordIndexOf (index) {
		var left = 0, right = this.length - 1;
		var middle, rawIndex, length;

		while (left <= right) {
			middle = ((left + right) / 2) >> 0;

			rawIndex = this[middle].index;
			length = this[middle].length;

			if (rawIndex + length - 1 < index) {
				left = middle + 1;
			}
			else if (index < rawIndex) {
				right = middle - 1;
			}
			else {
				return middle;
			}
		}

		return -1;
	}

	function getWords (s, useScripts) {
		var buf = [
			[WBP_SOT, undefined, undefined],
			[WBP_SOT, undefined, undefined]
		];
		var index = 0;
		var prevProp;
		s.replace(/[\ud800-\udb7f][\udc00-\udfff]|[\s\S]/g, function ($0) {
			var codePoint;
			if ($0.length == 2) {
				var hcp = $0.charCodeAt(0);
				var lcp = $0.charCodeAt(1);
				codePoint =
					((hcp & 0x03c0) + 0x0040) << 10
					| (hcp & 0x003f) << 10
					| (lcp & 0x03ff);
			}
			else {
				codePoint = $0.charCodeAt(0);
			}
			var p = wordFinder(codePoint);
			if (p == WBP_CR || p == WBP_LF || p == WBP_Newline) {
				prevProp = undefined;
			}
			else if (p == WBP_Extend || p == WBP_Format) {
				if (prevProp == undefined) {
					prevProp = p;
				}
				else {
					p = undefined;
				}
			}
			else {
				prevProp = p;
			}
			if (p != undefined) {
				buf.push([p, codePoint, index]);
			}
			index += $0.length;
		});

		buf.push(
			[WBP_EOT, undefined, index],
			[WBP_EOT, undefined, undefined]
		);

		var result = [];
		var prevIndex = 0;
		for (var i = 2, goal = buf.length - 1; i < goal; i++) {
			if (!canBreakWord(buf[i - 2][0], buf[i - 1][0],
							  buf[i][0], buf[i + 1][0])) continue;
			if (useScripts && isInScriptWord(buf[i - 1], buf[i])) continue;

			var index = buf[i][2];
			if (prevIndex < index) {
				result.push({
					text: s.substring(prevIndex, index),
					index: prevIndex,
					length: index - prevIndex,
					type: buf[i - 1][0]
				});
				prevIndex = index;
			}
		}

		Object.defineProperty(result, 'wordIndexOf', {
			value: wordIndexOf
		});

		return result;
	}

	function canBreakWord (p2, p1, current, n1) {
		/*
		 * This rules are taken from:
		 * http://unicode.org/reports/tr29/, Version 8.0.0, 2015-06-01
		 * ===========================================================
		 */

		//Break at the start and end of text.
		//  WB1: sot  ÷
		if (p1 == WBP_SOT) return true;

		//  WB2:  ÷  eot
		if (current == WBP_EOT) return true;

		//Do not break within CRLF.
		//  WB3: CR  ×  LF
		if (p1 == WBP_CR && current == WBP_LF) return false;

		//Otherwise break before and after Newlines (including CR and LF)
		//  WB3a: (Newline | CR | LF)  ÷
		if (p1 == WBP_Newline || p1 == WBP_CR || p1 == WBP_LF) return true;

		//  WB3b:  ÷  (Newline | CR | LF)
		if (current == WBP_Newline || current == WBP_CR || current == WBP_LF) return true;

		//Ignore Format and Extend characters, except when they appear at the
		//beginning of a region of text.
		//(See Section 6.2, Replacing Ignore Rules.)
		//  WB4: X (Extend | Format)*  →  X
		/* this rule is processed in getWords() */

		//Do not break between most letters.
		//  WB5: AHLetter  ×  AHLetter
		if ((p1 == WBP_ALetter || p1 == WBP_Hebrew_Letter)
		&&  (current == WBP_Hebrew_Letter || current == WBP_ALetter)) return false;

		//Do not break letters across certain punctuation.
		//  WB6: AHLetter  ×  (MidLetter | MidNumLetQ) AHLetter
		if ((p1 == WBP_ALetter || p1 == WBP_Hebrew_Letter)
		&&  (current == WBP_MidLetter || current == WBP_MidNumLet || current == WBP_Single_Quote)
		&&  (n1 == WBP_ALetter || n1 == WBP_Hebrew_Letter)) return false;

		//  WB7: AHLetter (MidLetter | MidNumLetQ)  ×  AHLetter
		if ((p2 == WBP_ALetter || p2 == WBP_Hebrew_Letter)
		&&  (p1 == WBP_MidLetter || p1 == WBP_MidNumLet || p1 == WBP_Single_Quote)
		&&  (current == WBP_ALetter || current == WBP_Hebrew_Letter)) return false;

		//  WB7a: Hebrew_Letter  ×  Single_Quote
		if (p1 == WBP_Hebrew_Letter && current == WBP_Single_Quote) return false;

		//  WB7b: Hebrew_Letter  ×  Double_Quote Hebrew_Letter
		if (p1 == WBP_Hebrew_Letter
		&&  current == WBP_Double_Quote
		&&  n1 == WBP_Hebrew_Letter) return false;

		//  WB7c: Hebrew_Letter Double_Quote  ×  Hebrew_Letter
		if (p2 == WBP_Hebrew_Letter
		&&  p1 == WBP_Double_Quote
		&&  current == WBP_Hebrew_Letter) return false;

		//Do not break within sequences of digits, or digits adjacent to
		//letters (“3a”, or “A3”).
		//  WB8: Numeric  ×  Numeric
		if (p1 == WBP_Numeric && current == WBP_Numeric) return false;

		//  WB9: AHLetter  ×  Numeric
		if ((p1 == WBP_ALetter || p1 == WBP_Hebrew_Letter)
		&&  current == WBP_Numeric) return false;

		//  WB10: Numeric  ×  AHLetter
		if (p1 == WBP_Numeric
		&&  (current == WBP_ALetter || current == WBP_Hebrew_Letter)) return false;

		//Do not break within sequences, such as “3.2” or “3,456.789”.
		//  WB11: Numeric (MidNum | MidNumLetQ)  ×  Numeric
		if (p2 == WBP_Numeric
		&&  (p1 == WBP_MidNum || p1 == WBP_MidNumLet || p1 == WBP_Single_Quote)
		&&  current == WBP_Numeric) return false;

		//  WB12: Numeric  ×  (MidNum | MidNumLetQ) Numeric
		if (p1 == WBP_Numeric
		&&  (current == WBP_MidNum || current == WBP_MidNumLet || current == WBP_Single_Quote)
		&&  n1 == WBP_Numeric) return false;

		//Do not break between Katakana.
		//  WB13: Katakana  ×  Katakana
		//  [unistring extension]: do not use this rule. use WB13-unistring-1 instead of.
		//if (p1 == WBP_Katakana && current == WBP_Katakana) return false;

		//[unistring extension]: Do not break between Katakana, Hiragana, KanaExtension
		//  WB13-unistring-1: Katakana       ×  Katakana
		//                    Hiragana       ×  Hiragana
		//                    KanaExtension  ×  KanaExtension
		if ((p1 == WBP_Katakana || p1 == WBP_Hiragana || p1 == WBP_KanaExtension)
		&&  current == p1) return false;

		//[unistring extension]: Do not break between Kana and its extension
		//  WB13-unistring-2: (Katakana | Hiragana)  ×  KanaExtension
		if ((p1 == WBP_Katakana || p1 == WBP_Hiragana)
		&&  current == WBP_KanaExtension) return false;

		//[unistring extension]: Do not break between Kana and its extension
		//  WB13-unistring-3: KanaExtension  ×  (Katakana | Hiragana)
		if (p1 == WBP_KanaExtension
		&&  (current == WBP_Katakana || current == WBP_Hiragana)) return false;

		//Do not break from extenders.
		//  WB13a: (AHLetter | Numeric | Katakana | Hiragana | ExtendNumLet)  ×  ExtendNumLet
		//  [unistring extension]: added Hiragana and KanaExtension
		if ((p1 == WBP_ALetter || p1 == WBP_Hebrew_Letter
			|| p1 == WBP_Numeric || p1 == WBP_Katakana || p1 == WBP_Hiragana
			|| p1 == WBP_KanaExtension || p1 == WBP_ExtendNumLet)
		&&  current == WBP_ExtendNumLet) return false;

		//  WB13b: ExtendNumLet  ×  (AHLetter | Numeric | Katakana | Hiragana)
		//  [unistring extension]: added Hiragana and KanaExtension
		if (p1 == WBP_ExtendNumLet
		&&  (current == WBP_ALetter || current == WBP_Hebrew_Letter
			|| current == WBP_Numeric || current == WBP_Katakana
			|| current == WBP_Hiragana || current == WBP_KanaExtension)) return false;

		//Do not break between regional indicator symbols.
		//  WB13c: Regional_Indicator  ×  Regional_Indicator
		if (p1 == WBP_Regional_Indicator && current == WBP_Regional_Indicator) return false;

		//Otherwise, break everywhere (including around ideographs).
		//  WB14: Any  ÷  Any
		return true;
	}

	function isInScriptWord (left, right) {
		//  Space  ×  Space
		if (left[0] == WBP_Space && right[0] == WBP_Space) return true;
		//  !Space  ÷   Space
		if (left[0] != WBP_Space && right[0] == WBP_Space) return false;
		//  Space  ÷  !Space
		if (left[0] == WBP_Space && right[0] != WBP_Space) return false;

		if (left[1] == undefined || right[1] == undefined) return false;

		return scriptFinder(left[1]) == scriptFinder(right[1]);
	}

	/*
	 * Grapheme class
	 */

	function Grapheme (codePoints, rawIndex) {
		if (codePoints != undefined) {
			this.codePoints = codePoints;
			this.updateRawString();
		}
		if (rawIndex != undefined) {
			this.rawIndex = rawIndex;
		}
	}

	Grapheme.prototype = {
		toString: function () {
			return this.rawString;
		},
		clone: function () {
			var result = new Grapheme;
			result.codePoints = this.codePoints.slice();
			result.rawString = this.rawString;
			result.rawIndex = this.rawIndex;
			return result;
		},
		updateRawString: function () {
			this.rawString = this.codePoints.reduce(function (result, cp) {
				return result + getUTF16FromCodePoint(cp);
			}, '');
		},
		dump: function (detail) {
			if (detail) {
				var log = [];
				log.push('codePoints: [' + this.codePoints.map(function (cp) {
					return getCodePointString(cp, 'unicode');
				}).join(', ') + ']');
				log.push('  rawIndex: ' + this.rawIndex);
				log.push(' rawString: (' + this.rawString.length + ') "' + this.rawString + '"');
				return log.join('\n');
			}
			else {
				return this.codePoints
					.map(getCodePointString)
					.join(' × ');
			}
		}
	};

	/*
	 * Unistring class
	 */

	function Unistring (s) {
		if (!(this instanceof Unistring)) {
			return new Unistring(s);
		}
		if (typeof s == 'string') {
			this.clusters = build(resolveSurrogates(s));
		}
		else if (s instanceof Array) {
			this.clusters = [];
			var rawIndex = 0;
			for (var i = 0, goal = s.length; i < goal; i++) {
				if (!(s[i] instanceof Grapheme)) {
					throw new Error(
						'Unistring: invalid cluster class: ' +
						Object.prototype.toString.call(s[i]));
				}
				this.clusters[i] = s[i].clone();
				this.clusters[i].rawIndex = rawIndex;
				rawIndex += this.clusters[i].rawString.length;
			}
		}
		else {
			throw new Error('Unistring: invalid argument');
		}
	}

	Unistring.prototype = {
		_ensureIndex: function (index, isEnd) {
			if (index == undefined) {
				index = isEnd ? this.clusters.length : 0;
			}
			if (index < 0) {
				index = this.clusters.length + index;
			}
			return Math.max(0, Math.min(index, this.clusters.length));
		},
		_toUnistring: function (s, caller) {
			if (typeof s == 'string') {
				return new Unistring(s);
			}
			else if (s instanceof Unistring) {
				return s;
			}
			else {
				throw new Error(
					'Unistring#' + (caller || '') + ': invalid argument');
			}
		},

		/*
		 * methods
		 */

		clone: function () {
			return new Unistring(this.clusters.slice());
		},
		dump: function (detail) {
			var log = [];
			if (detail) {
				this.clusters.forEach(function (g, index) {
					log.push('*** Grapheme Cluster #' + index + ' ***');
					log.push(g.dump(detail));
				});
				return log.join('\n');
			}
			else {
				return '÷ ' + this.clusters
					.map(function (g) {return g.dump(detail)})
					.join(' ÷ ') + ' ÷';
			}
		},
		toString: function () {
			return this.clusters.reduce(function (result, g) {
				return result + g.toString();
			}, '');
		},
		delete: function (start, length) {
			start = this._ensureIndex(start);
			if (length == undefined || start + length > this.clusters.length) {
				length = this.clusters.length - start;
			}
			length = Math.max(0, length);

			var delta = 0;
			for (var i = start, goal = start + length; i < goal; i++) {
				delta += this.clusters[i].rawString.length;
			}
			for (var i = start + length, goal = this.clusters.length; i < goal; i++) {
				this.clusters[i].rawIndex -= delta;
			}

			this.clusters.splice(start, length);
			return this;
		},
		insert: function (s, start) {
			start = this._ensureIndex(start);
			s = this._toUnistring(s, 'insert').clusters.slice();

			var srcDelta = 0;
			var dstDelta = 0;
			if (start == this.clusters.length) {
				if (this.clusters.length) {
					var last = this.clusters.length - 1;
					srcDelta = this.clusters[last].rawIndex +
						this.clusters[last].rawString.length;
				}
			}
			else {
				srcDelta = this.clusters[start].rawIndex;
			}

			for (var i = 0, goal = s.length; i < goal; i++) {
				s[i].rawIndex += srcDelta;
				dstDelta += s[i].rawString.length;
			}
			for (var i = start, goal = this.clusters.length; i < goal; i++) {
				this.clusters[i].rawIndex += dstDelta;
			}

			s.unshift(start, 0);
			this.clusters.splice.apply(this.clusters, s);
			return this;
		},
		append: function (s) {
			return this.insert(s, this.clusters.length);
		},
		codePointsAt: function (index) {
			index = this._ensureIndex(index);
			if (index < 0 || index >= this.clusters.length) return undefined;
			return this.clusters[index].codePoints;
		},
		clusterAt: function (index) {
			return this.rawStringAt.apply(this, arguments);
		},
		rawStringAt: function (index) {
			index = this._ensureIndex(index);
			if (index < 0 || index >= this.clusters.length) return '';
			return this.clusters[index].rawString;
		},
		rawIndexAt: function (index) {
			index = this._ensureIndex(index);
			if (index < 0 || this.clusters.length == 0 || index > this.clusters.length) return NaN;
			if (index == this.clusters.length) {
				return this.clusters[index - 1].rawIndex +
					this.clusters[index - 1].rawString.length;
			}
			return this.clusters[index].rawIndex;
		},
		forEach: function () {
			this.clusters.forEach.apply(this.clusters, arguments);
		},
		getClusterIndexFromUTF16Index: function (index) {
			var left = 0, right = this.clusters.length - 1;
			var middle, rawIndex, length;

			if (right >= 0 && index == this.clusters[right].rawIndex + this.clusters[right].rawString.length) {
				return right + 1;
			}

			while (left <= right) {
				middle = ((left + right) / 2) >> 0;

				rawIndex = this.clusters[middle].rawIndex;
				length = this.clusters[middle].rawString.length;

				if (rawIndex + length - 1 < index) {
					left = middle + 1;
				}
				else if (index < rawIndex) {
					right = middle - 1;
				}
				else {
					return middle;
				}
			}

			return -1;
		},

		/*
		 * string like properties and methods
		 */

		get length () {
			return this.clusters.length;
		},
		charAt: function (index) {
			if (index < 0 || index >= this.clusters.length) return '';
			return this.clusters[index].rawString.charAt(0);
		},
		charCodeAt: function (index) {
			if (index < 0 || index >= this.clusters.length) return NaN;
			return this.clusters[index].codePoints[0];
		},
		substring: function (start, end) {
			if (start == undefined) {
				start = 0;
			}
			if (end == undefined) {
				end = this.clusters.length;
			}
			start = Math.max(0, Math.min(start, this.clusters.length));
			end = Math.max(0, Math.min(end, this.clusters.length));
			if (start > end) {
				var tmp = start;
				start = end;
				end = tmp;
			}
			return new Unistring(this.clusters.slice(start, end));
		},
		substr: function (start, length) {
			start = this._ensureIndex(start);
			if (length == undefined || start + length > this.clusters.length) {
				length = this.clusters.length - start;
			}
			if (length < 0) {
				length = 0;
			}
			return new Unistring(this.clusters.slice(start, start + length));
		},
		slice: function (start, end) {
			start = this._ensureIndex(start);
			end = this._ensureIndex(end, true);
			return new Unistring(this.clusters.slice(start, end));
		},
		concat: function (s) {
			return this.insert(s, this.clusters.length);
		},
		indexOf: function (s) {
			s = this._toUnistring(s, 'indexOf');

			var whole = this.toString();
			var part = s.toString();
			var rawIndex = 0;
			var clusterIndex = 0;

			while ((rawIndex = whole.indexOf(part, rawIndex)) >= 0) {
				while (clusterIndex < this.clusters.length
					   && this.clusters[clusterIndex].rawIndex < rawIndex) {
					clusterIndex++;
				}

				if (clusterIndex >= this.clusters.length) {
					return -1;
				}

				if (this.substr(clusterIndex, s.length).toString() == part) {
					return clusterIndex;
				}

				rawIndex++;
			}

			return -1;
		},
		lastIndexOf: function (s) {
			s = this._toUnistring(s, 'lastIndexOf');

			var whole = this.toString();
			var part = s.toString();
			var rawIndex = whole.length - 1;
			var clusterIndex = this.clusters.length - 1;

			while (rawIndex >= 0
				   && (rawIndex = whole.lastIndexOf(part, rawIndex)) >= 0) {
				while (clusterIndex >= 0
					   && this.clusters[clusterIndex].rawIndex > rawIndex) {
					clusterIndex--;
				}

				if (clusterIndex < 0) {
					return -1;
				}

				if (this.substr(clusterIndex, s.length).toString() == part) {
					return clusterIndex;
				}

				rawIndex--;
			}

			return -1;
		},
		toLowerCase: function (useLocale) {
			var method = useLocale && 'toLocaleLowerCase' in String.prototype ?
				'toLocaleLowerCase' : 'toLowerCase';
			return new Unistring(this.toString()[method]());
		},
		toUpperCase: function (useLocale) {
			var method = useLocale && 'toLocaleUpperCase' in String.prototype ?
				'toLocaleUpperCase' : 'toUpperCase';
			return new Unistring(this.toString()[method]());
		}
	};

	/*
	 * exporting
	 */

	Unistring.getCodePointArray = resolveSurrogates;
	Unistring.getGraphemeBreakProp = graphemeFinder;
	Unistring.getWordBreakProp = wordFinder;
	Unistring.getScriptProp = scriptFinder;
	Unistring.getUTF16FromCodePoint = getUTF16FromCodePoint;
	Unistring.getCodePointString = getCodePointString;
	Unistring.getWords = getWords;
	Unistring.GBP = GBP;
	Unistring.WBP = WBP;
	Unistring.SCRIPT = SCRIPT;

	if (typeof module !== 'undefined' && typeof exports !== 'undefined') {
		module.exports = Unistring;
	}
	else {
		global.Unistring = Unistring;
	}

})(this);

// vim:set ts=4 sw=4 fenc=UTF-8 ff=unix ft=javascript fdm=marker fmr=<<<,>>> :
