/**
 * Unistring: breaks a native string into an array of grapheme cluster,
 *            and provides native string like manipulation methods.
 * =============================================================================
 *
 *
 * @author akahuku@gmail.com
 * @license MIT
 */

(function (global) {
	'use strict';

	/*
	 * data table, taken from:
	 * http://www.unicode.org/Public/8.0.0/ucd/auxiliary/GraphemeBreakProperty.txt
	 */

	// GENERATED CODE START <<<1
	// This data was generated by the command 'node mkdata.js -g'.
	var GRAPHEME_BREAK_PROPS = '\
000000000A0005000A000000010004000B000000020005000D000000010003000E00000012000500\
7F00000021000500AD00000001000500000300007000060083040000050006008804000002000600\
910500002D000600BF05000001000600C105000002000600C405000002000600C705000001000600\
0006000006000500100600000B0006001C060000010005004B060000150006007006000001000600\
D606000007000600DD06000001000500DF06000006000600E706000002000600EA06000004000600\
0F070000010005001107000001000600300700001B000600A60700000B000600EB07000009000600\
16080000040006001B08000009000600250800000300060029080000050006005908000003000600\
E30800002000060003090000010008003A090000010006003B090000010008003C09000001000600\
3E09000003000800410900000800060049090000040008004D090000010006004E09000002000800\
5109000007000600620900000200060081090000010006008209000002000800BC09000001000600\
BE09000001000600BF09000002000800C109000004000600C709000002000800CB09000002000800\
CD09000001000600D709000001000600E209000002000600010A000002000600030A000001000800\
3C0A0000010006003E0A000003000800410A000002000600470A0000020006004B0A000003000600\
510A000001000600700A000002000600750A000001000600810A000002000600830A000001000800\
BC0A000001000600BE0A000003000800C10A000005000600C70A000002000600C90A000001000800\
CB0A000002000800CD0A000001000600E20A000002000600010B000001000600020B000002000800\
3C0B0000010006003E0B0000010006003F0B000001000600400B000001000800410B000004000600\
470B0000020008004B0B0000020008004D0B000001000600560B000001000600570B000001000600\
620B000002000600820B000001000600BE0B000001000600BF0B000001000800C00B000001000600\
C10B000002000800C60B000003000800CA0B000003000800CD0B000001000600D70B000001000600\
000C000001000600010C0000030008003E0C000003000600410C000004000800460C000003000600\
4A0C000004000600550C000002000600620C000002000600810C000001000600820C000002000800\
BC0C000001000600BE0C000001000800BF0C000001000600C00C000002000800C20C000001000600\
C30C000002000800C60C000001000600C70C000002000800CA0C000002000800CC0C000002000600\
D50C000002000600E20C000002000600010D000001000600020D0000020008003E0D000001000600\
3F0D000002000800410D000004000600460D0000030008004A0D0000030008004D0D000001000600\
570D000001000600620D000002000600820D000002000800CA0D000001000600CF0D000001000600\
D00D000002000800D20D000003000600D60D000001000600D80D000007000800DF0D000001000600\
F20D000002000800310E000001000600330E000001000800340E000007000600470E000008000600\
B10E000001000600B30E000001000800B40E000006000600BB0E000002000600C80E000006000600\
180F000002000600350F000001000600370F000001000600390F0000010006003E0F000002000800\
710F00000E0006007F0F000001000800800F000005000600860F0000020006008D0F00000B000600\
990F000024000600C60F0000010006002D1000000400060031100000010008003210000006000600\
39100000020006003B100000020008003D1000000200060056100000020008005810000002000600\
5E100000030006007110000004000600821000000100060084100000010008008510000002000600\
8D100000010006009D1000000100060000110000600009006011000048000A00A811000058000B00\
5D130000030006001217000003000600321700000300060052170000020006007217000002000600\
B417000002000600B617000001000800B717000007000600BE17000008000800C617000001000600\
C717000002000800C91700000B000600DD170000010006000B180000030006000E18000001000500\
A9180000010006002019000003000600231900000400080027190000020006002919000003000800\
3019000002000800321900000100060033190000060008003919000003000600171A000002000600\
191A0000020008001B1A000001000600551A000001000800561A000001000600571A000001000800\
581A000007000600601A000001000600621A000001000600651A0000080006006D1A000006000800\
731A00000A0006007F1A000001000600B01A00000E000600BE1A000001000600001B000004000600\
041B000001000800341B000001000600351B000001000800361B0000050006003B1B000001000800\
3C1B0000010006003D1B000005000800421B000001000600431B0000020008006B1B000009000600\
801B000002000600821B000001000800A11B000001000800A21B000004000600A61B000002000800\
A81B000002000600AA1B000001000800AB1B000003000600E61B000001000600E71B000001000800\
E81B000002000600EA1B000003000800ED1B000001000600EE1B000001000800EF1B000003000600\
F21B000002000800241C0000080008002C1C000008000600341C000002000800361C000002000600\
D01C000003000600D41C00000D000600E11C000001000800E21C000007000600ED1C000001000600\
F21C000002000800F41C000001000600F81C000002000600C01D000036000600FC1D000004000600\
0B200000010005000C200000020006000E2000000200050028200000010005002920000001000500\
2A2000000500050060200000050005006520000001000500662000000A000500D02000000D000600\
DD20000004000600E120000001000600E220000003000600E52000000C000600EF2C000003000600\
7F2D000001000600E02D0000200006002A300000040006002E300000020006009930000002000600\
6FA600000100060070A600000300060074A600000A0006009EA6000002000600F0A6000002000600\
02A800000100060006A80000010006000BA800000100060023A800000200080025A8000002000600\
27A800000100080080A8000002000800B4A8000010000800C4A8000001000600E0A8000012000600\
26A900000800060047A900000B00060052A900000200080060A900001D00090080A9000003000600\
83A9000001000800B3A9000001000600B4A9000002000800B6A9000004000600BAA9000002000800\
BCA9000001000600BDA9000004000800E5A900000100060029AA0000060006002FAA000002000800\
31AA00000200060033AA00000200080035AA00000200060043AA0000010006004CAA000001000600\
4DAA0000010008007CAA000001000600B0AA000001000600B2AA000003000600B7AA000002000600\
BEAA000002000600C1AA000001000600EBAA000001000800ECAA000002000600EEAA000002000800\
F5AA000001000800F6AA000001000600E3AB000002000800E5AB000001000600E6AB000002000800\
E8AB000001000600E9AB000002000800ECAB000001000800EDAB00000100060000AC000001000C00\
01AC00001B000D001CAC000001000C001DAC00001B000D0038AC000001000C0039AC00001B000D00\
54AC000001000C0055AC00001B000D0070AC000001000C0071AC00001B000D008CAC000001000C00\
8DAC00001B000D00A8AC000001000C00A9AC00001B000D00C4AC000001000C00C5AC00001B000D00\
E0AC000001000C00E1AC00001B000D00FCAC000001000C00FDAC00001B000D0018AD000001000C00\
19AD00001B000D0034AD000001000C0035AD00001B000D0050AD000001000C0051AD00001B000D00\
6CAD000001000C006DAD00001B000D0088AD000001000C0089AD00001B000D00A4AD000001000C00\
A5AD00001B000D00C0AD000001000C00C1AD00001B000D00DCAD000001000C00DDAD00001B000D00\
F8AD000001000C00F9AD00001B000D0014AE000001000C0015AE00001B000D0030AE000001000C00\
31AE00001B000D004CAE000001000C004DAE00001B000D0068AE000001000C0069AE00001B000D00\
84AE000001000C0085AE00001B000D00A0AE000001000C00A1AE00001B000D00BCAE000001000C00\
BDAE00001B000D00D8AE000001000C00D9AE00001B000D00F4AE000001000C00F5AE00001B000D00\
10AF000001000C0011AF00001B000D002CAF000001000C002DAF00001B000D0048AF000001000C00\
49AF00001B000D0064AF000001000C0065AF00001B000D0080AF000001000C0081AF00001B000D00\
9CAF000001000C009DAF00001B000D00B8AF000001000C00B9AF00001B000D00D4AF000001000C00\
D5AF00001B000D00F0AF000001000C00F1AF00001B000D000CB0000001000C000DB000001B000D00\
28B0000001000C0029B000001B000D0044B0000001000C0045B000001B000D0060B0000001000C00\
61B000001B000D007CB0000001000C007DB000001B000D0098B0000001000C0099B000001B000D00\
B4B0000001000C00B5B000001B000D00D0B0000001000C00D1B000001B000D00ECB0000001000C00\
EDB000001B000D0008B1000001000C0009B100001B000D0024B1000001000C0025B100001B000D00\
40B1000001000C0041B100001B000D005CB1000001000C005DB100001B000D0078B1000001000C00\
79B100001B000D0094B1000001000C0095B100001B000D00B0B1000001000C00B1B100001B000D00\
CCB1000001000C00CDB100001B000D00E8B1000001000C00E9B100001B000D0004B2000001000C00\
05B200001B000D0020B2000001000C0021B200001B000D003CB2000001000C003DB200001B000D00\
58B2000001000C0059B200001B000D0074B2000001000C0075B200001B000D0090B2000001000C00\
91B200001B000D00ACB2000001000C00ADB200001B000D00C8B2000001000C00C9B200001B000D00\
E4B2000001000C00E5B200001B000D0000B3000001000C0001B300001B000D001CB3000001000C00\
1DB300001B000D0038B3000001000C0039B300001B000D0054B3000001000C0055B300001B000D00\
70B3000001000C0071B300001B000D008CB3000001000C008DB300001B000D00A8B3000001000C00\
A9B300001B000D00C4B3000001000C00C5B300001B000D00E0B3000001000C00E1B300001B000D00\
FCB3000001000C00FDB300001B000D0018B4000001000C0019B400001B000D0034B4000001000C00\
35B400001B000D0050B4000001000C0051B400001B000D006CB4000001000C006DB400001B000D00\
88B4000001000C0089B400001B000D00A4B4000001000C00A5B400001B000D00C0B4000001000C00\
C1B400001B000D00DCB4000001000C00DDB400001B000D00F8B4000001000C00F9B400001B000D00\
14B5000001000C0015B500001B000D0030B5000001000C0031B500001B000D004CB5000001000C00\
4DB500001B000D0068B5000001000C0069B500001B000D0084B5000001000C0085B500001B000D00\
A0B5000001000C00A1B500001B000D00BCB5000001000C00BDB500001B000D00D8B5000001000C00\
D9B500001B000D00F4B5000001000C00F5B500001B000D0010B6000001000C0011B600001B000D00\
2CB6000001000C002DB600001B000D0048B6000001000C0049B600001B000D0064B6000001000C00\
65B600001B000D0080B6000001000C0081B600001B000D009CB6000001000C009DB600001B000D00\
B8B6000001000C00B9B600001B000D00D4B6000001000C00D5B600001B000D00F0B6000001000C00\
F1B600001B000D000CB7000001000C000DB700001B000D0028B7000001000C0029B700001B000D00\
44B7000001000C0045B700001B000D0060B7000001000C0061B700001B000D007CB7000001000C00\
7DB700001B000D0098B7000001000C0099B700001B000D00B4B7000001000C00B5B700001B000D00\
D0B7000001000C00D1B700001B000D00ECB7000001000C00EDB700001B000D0008B8000001000C00\
09B800001B000D0024B8000001000C0025B800001B000D0040B8000001000C0041B800001B000D00\
5CB8000001000C005DB800001B000D0078B8000001000C0079B800001B000D0094B8000001000C00\
95B800001B000D00B0B8000001000C00B1B800001B000D00CCB8000001000C00CDB800001B000D00\
E8B8000001000C00E9B800001B000D0004B9000001000C0005B900001B000D0020B9000001000C00\
21B900001B000D003CB9000001000C003DB900001B000D0058B9000001000C0059B900001B000D00\
74B9000001000C0075B900001B000D0090B9000001000C0091B900001B000D00ACB9000001000C00\
ADB900001B000D00C8B9000001000C00C9B900001B000D00E4B9000001000C00E5B900001B000D00\
00BA000001000C0001BA00001B000D001CBA000001000C001DBA00001B000D0038BA000001000C00\
39BA00001B000D0054BA000001000C0055BA00001B000D0070BA000001000C0071BA00001B000D00\
8CBA000001000C008DBA00001B000D00A8BA000001000C00A9BA00001B000D00C4BA000001000C00\
C5BA00001B000D00E0BA000001000C00E1BA00001B000D00FCBA000001000C00FDBA00001B000D00\
18BB000001000C0019BB00001B000D0034BB000001000C0035BB00001B000D0050BB000001000C00\
51BB00001B000D006CBB000001000C006DBB00001B000D0088BB000001000C0089BB00001B000D00\
A4BB000001000C00A5BB00001B000D00C0BB000001000C00C1BB00001B000D00DCBB000001000C00\
DDBB00001B000D00F8BB000001000C00F9BB00001B000D0014BC000001000C0015BC00001B000D00\
30BC000001000C0031BC00001B000D004CBC000001000C004DBC00001B000D0068BC000001000C00\
69BC00001B000D0084BC000001000C0085BC00001B000D00A0BC000001000C00A1BC00001B000D00\
BCBC000001000C00BDBC00001B000D00D8BC000001000C00D9BC00001B000D00F4BC000001000C00\
F5BC00001B000D0010BD000001000C0011BD00001B000D002CBD000001000C002DBD00001B000D00\
48BD000001000C0049BD00001B000D0064BD000001000C0065BD00001B000D0080BD000001000C00\
81BD00001B000D009CBD000001000C009DBD00001B000D00B8BD000001000C00B9BD00001B000D00\
D4BD000001000C00D5BD00001B000D00F0BD000001000C00F1BD00001B000D000CBE000001000C00\
0DBE00001B000D0028BE000001000C0029BE00001B000D0044BE000001000C0045BE00001B000D00\
60BE000001000C0061BE00001B000D007CBE000001000C007DBE00001B000D0098BE000001000C00\
99BE00001B000D00B4BE000001000C00B5BE00001B000D00D0BE000001000C00D1BE00001B000D00\
ECBE000001000C00EDBE00001B000D0008BF000001000C0009BF00001B000D0024BF000001000C00\
25BF00001B000D0040BF000001000C0041BF00001B000D005CBF000001000C005DBF00001B000D00\
78BF000001000C0079BF00001B000D0094BF000001000C0095BF00001B000D00B0BF000001000C00\
B1BF00001B000D00CCBF000001000C00CDBF00001B000D00E8BF000001000C00E9BF00001B000D00\
04C0000001000C0005C000001B000D0020C0000001000C0021C000001B000D003CC0000001000C00\
3DC000001B000D0058C0000001000C0059C000001B000D0074C0000001000C0075C000001B000D00\
90C0000001000C0091C000001B000D00ACC0000001000C00ADC000001B000D00C8C0000001000C00\
C9C000001B000D00E4C0000001000C00E5C000001B000D0000C1000001000C0001C100001B000D00\
1CC1000001000C001DC100001B000D0038C1000001000C0039C100001B000D0054C1000001000C00\
55C100001B000D0070C1000001000C0071C100001B000D008CC1000001000C008DC100001B000D00\
A8C1000001000C00A9C100001B000D00C4C1000001000C00C5C100001B000D00E0C1000001000C00\
E1C100001B000D00FCC1000001000C00FDC100001B000D0018C2000001000C0019C200001B000D00\
34C2000001000C0035C200001B000D0050C2000001000C0051C200001B000D006CC2000001000C00\
6DC200001B000D0088C2000001000C0089C200001B000D00A4C2000001000C00A5C200001B000D00\
C0C2000001000C00C1C200001B000D00DCC2000001000C00DDC200001B000D00F8C2000001000C00\
F9C200001B000D0014C3000001000C0015C300001B000D0030C3000001000C0031C300001B000D00\
4CC3000001000C004DC300001B000D0068C3000001000C0069C300001B000D0084C3000001000C00\
85C300001B000D00A0C3000001000C00A1C300001B000D00BCC3000001000C00BDC300001B000D00\
D8C3000001000C00D9C300001B000D00F4C3000001000C00F5C300001B000D0010C4000001000C00\
11C400001B000D002CC4000001000C002DC400001B000D0048C4000001000C0049C400001B000D00\
64C4000001000C0065C400001B000D0080C4000001000C0081C400001B000D009CC4000001000C00\
9DC400001B000D00B8C4000001000C00B9C400001B000D00D4C4000001000C00D5C400001B000D00\
F0C4000001000C00F1C400001B000D000CC5000001000C000DC500001B000D0028C5000001000C00\
29C500001B000D0044C5000001000C0045C500001B000D0060C5000001000C0061C500001B000D00\
7CC5000001000C007DC500001B000D0098C5000001000C0099C500001B000D00B4C5000001000C00\
B5C500001B000D00D0C5000001000C00D1C500001B000D00ECC5000001000C00EDC500001B000D00\
08C6000001000C0009C600001B000D0024C6000001000C0025C600001B000D0040C6000001000C00\
41C600001B000D005CC6000001000C005DC600001B000D0078C6000001000C0079C600001B000D00\
94C6000001000C0095C600001B000D00B0C6000001000C00B1C600001B000D00CCC6000001000C00\
CDC600001B000D00E8C6000001000C00E9C600001B000D0004C7000001000C0005C700001B000D00\
20C7000001000C0021C700001B000D003CC7000001000C003DC700001B000D0058C7000001000C00\
59C700001B000D0074C7000001000C0075C700001B000D0090C7000001000C0091C700001B000D00\
ACC7000001000C00ADC700001B000D00C8C7000001000C00C9C700001B000D00E4C7000001000C00\
E5C700001B000D0000C8000001000C0001C800001B000D001CC8000001000C001DC800001B000D00\
38C8000001000C0039C800001B000D0054C8000001000C0055C800001B000D0070C8000001000C00\
71C800001B000D008CC8000001000C008DC800001B000D00A8C8000001000C00A9C800001B000D00\
C4C8000001000C00C5C800001B000D00E0C8000001000C00E1C800001B000D00FCC8000001000C00\
FDC800001B000D0018C9000001000C0019C900001B000D0034C9000001000C0035C900001B000D00\
50C9000001000C0051C900001B000D006CC9000001000C006DC900001B000D0088C9000001000C00\
89C900001B000D00A4C9000001000C00A5C900001B000D00C0C9000001000C00C1C900001B000D00\
DCC9000001000C00DDC900001B000D00F8C9000001000C00F9C900001B000D0014CA000001000C00\
15CA00001B000D0030CA000001000C0031CA00001B000D004CCA000001000C004DCA00001B000D00\
68CA000001000C0069CA00001B000D0084CA000001000C0085CA00001B000D00A0CA000001000C00\
A1CA00001B000D00BCCA000001000C00BDCA00001B000D00D8CA000001000C00D9CA00001B000D00\
F4CA000001000C00F5CA00001B000D0010CB000001000C0011CB00001B000D002CCB000001000C00\
2DCB00001B000D0048CB000001000C0049CB00001B000D0064CB000001000C0065CB00001B000D00\
80CB000001000C0081CB00001B000D009CCB000001000C009DCB00001B000D00B8CB000001000C00\
B9CB00001B000D00D4CB000001000C00D5CB00001B000D00F0CB000001000C00F1CB00001B000D00\
0CCC000001000C000DCC00001B000D0028CC000001000C0029CC00001B000D0044CC000001000C00\
45CC00001B000D0060CC000001000C0061CC00001B000D007CCC000001000C007DCC00001B000D00\
98CC000001000C0099CC00001B000D00B4CC000001000C00B5CC00001B000D00D0CC000001000C00\
D1CC00001B000D00ECCC000001000C00EDCC00001B000D0008CD000001000C0009CD00001B000D00\
24CD000001000C0025CD00001B000D0040CD000001000C0041CD00001B000D005CCD000001000C00\
5DCD00001B000D0078CD000001000C0079CD00001B000D0094CD000001000C0095CD00001B000D00\
B0CD000001000C00B1CD00001B000D00CCCD000001000C00CDCD00001B000D00E8CD000001000C00\
E9CD00001B000D0004CE000001000C0005CE00001B000D0020CE000001000C0021CE00001B000D00\
3CCE000001000C003DCE00001B000D0058CE000001000C0059CE00001B000D0074CE000001000C00\
75CE00001B000D0090CE000001000C0091CE00001B000D00ACCE000001000C00ADCE00001B000D00\
C8CE000001000C00C9CE00001B000D00E4CE000001000C00E5CE00001B000D0000CF000001000C00\
01CF00001B000D001CCF000001000C001DCF00001B000D0038CF000001000C0039CF00001B000D00\
54CF000001000C0055CF00001B000D0070CF000001000C0071CF00001B000D008CCF000001000C00\
8DCF00001B000D00A8CF000001000C00A9CF00001B000D00C4CF000001000C00C5CF00001B000D00\
E0CF000001000C00E1CF00001B000D00FCCF000001000C00FDCF00001B000D0018D0000001000C00\
19D000001B000D0034D0000001000C0035D000001B000D0050D0000001000C0051D000001B000D00\
6CD0000001000C006DD000001B000D0088D0000001000C0089D000001B000D00A4D0000001000C00\
A5D000001B000D00C0D0000001000C00C1D000001B000D00DCD0000001000C00DDD000001B000D00\
F8D0000001000C00F9D000001B000D0014D1000001000C0015D100001B000D0030D1000001000C00\
31D100001B000D004CD1000001000C004DD100001B000D0068D1000001000C0069D100001B000D00\
84D1000001000C0085D100001B000D00A0D1000001000C00A1D100001B000D00BCD1000001000C00\
BDD100001B000D00D8D1000001000C00D9D100001B000D00F4D1000001000C00F5D100001B000D00\
10D2000001000C0011D200001B000D002CD2000001000C002DD200001B000D0048D2000001000C00\
49D200001B000D0064D2000001000C0065D200001B000D0080D2000001000C0081D200001B000D00\
9CD2000001000C009DD200001B000D00B8D2000001000C00B9D200001B000D00D4D2000001000C00\
D5D200001B000D00F0D2000001000C00F1D200001B000D000CD3000001000C000DD300001B000D00\
28D3000001000C0029D300001B000D0044D3000001000C0045D300001B000D0060D3000001000C00\
61D300001B000D007CD3000001000C007DD300001B000D0098D3000001000C0099D300001B000D00\
B4D3000001000C00B5D300001B000D00D0D3000001000C00D1D300001B000D00ECD3000001000C00\
EDD300001B000D0008D4000001000C0009D400001B000D0024D4000001000C0025D400001B000D00\
40D4000001000C0041D400001B000D005CD4000001000C005DD400001B000D0078D4000001000C00\
79D400001B000D0094D4000001000C0095D400001B000D00B0D4000001000C00B1D400001B000D00\
CCD4000001000C00CDD400001B000D00E8D4000001000C00E9D400001B000D0004D5000001000C00\
05D500001B000D0020D5000001000C0021D500001B000D003CD5000001000C003DD500001B000D00\
58D5000001000C0059D500001B000D0074D5000001000C0075D500001B000D0090D5000001000C00\
91D500001B000D00ACD5000001000C00ADD500001B000D00C8D5000001000C00C9D500001B000D00\
E4D5000001000C00E5D500001B000D0000D6000001000C0001D600001B000D001CD6000001000C00\
1DD600001B000D0038D6000001000C0039D600001B000D0054D6000001000C0055D600001B000D00\
70D6000001000C0071D600001B000D008CD6000001000C008DD600001B000D00A8D6000001000C00\
A9D600001B000D00C4D6000001000C00C5D600001B000D00E0D6000001000C00E1D600001B000D00\
FCD6000001000C00FDD600001B000D0018D7000001000C0019D700001B000D0034D7000001000C00\
35D700001B000D0050D7000001000C0051D700001B000D006CD7000001000C006DD700001B000D00\
88D7000001000C0089D700001B000D00B0D7000017000A00CBD7000031000B0000D8000000080500\
1EFB00000100060000FE00001000060020FE000010000600FFFE0000010005009EFF000002000600\
F0FF000009000500F9FF000003000500FD01010001000600E0020100010006007603010005000600\
010A010003000600050A0100020006000C0A010004000600380A0100030006003F0A010001000600\
E50A010002000600001001000100080001100100010006000210010001000800381001000F000600\
7F100100030006008210010001000800B010010003000800B310010004000600B710010002000800\
B910010002000600BD10010001000500001101000300060027110100050006002C11010001000800\
2D11010008000600731101000100060080110100020006008211010001000800B311010003000800\
B611010009000600BF11010002000800CA110100030006002C120100030008002F12010003000600\
3212010002000800341201000100060035120100010008003612010002000600DF12010001000600\
E012010003000800E312010008000600001301000200060002130100020008003C13010001000600\
3E130100010006003F13010001000800401301000100060041130100040008004713010002000800\
4B130100030008005713010001000600621301000200080066130100070006007013010005000600\
B014010001000600B114010002000800B314010006000600B914010001000800BA14010001000600\
BB14010002000800BD14010001000600BE14010001000800BF14010002000600C114010001000800\
C214010002000600AF15010001000600B015010002000800B215010004000600B815010004000800\
BC15010002000600BE15010001000800BF15010002000600DC150100020006003016010003000800\
33160100080006003B160100020008003D160100010006003E160100010008003F16010002000600\
AB16010001000600AC16010001000800AD16010001000600AE16010002000800B016010006000600\
B616010001000800B7160100010006001D1701000300060020170100020008002217010004000600\
26170100010008002717010005000600F06A010005000600306B010007000600516F01002E000800\
8F6F0100040006009DBC010002000600A0BC01000400050065D101000100060066D1010001000800\
67D10100030006006DD10100010008006ED101000500060073D10100080005007BD1010008000600\
85D1010007000600AAD101000400060042D201000300060000DA0100370006003BDA010032000600\
75DA01000100060084DA0100010006009BDA010005000600A1DA01000F000600D0E8010007000600\
E6F101001A00070000000E000100050001000E000100050002000E001E00050020000E0060000500\
80000E008000050000010E00F0000600F0010E00100E0500'.replace(
	/[0-9A-F]{2}/g,
	function($0){return String.fromCharCode(parseInt($0, 16))});

	var GBP_Other = 0;
	var GBP_SOT = 1;
	var GBP_EOT = 2;
	var GBP_CR = 3;
	var GBP_LF = 4;
	var GBP_Control = 5;
	var GBP_Extend = 6;
	var GBP_Regional_Indicator = 7;
	var GBP_SpacingMark = 8;
	var GBP_L = 9;
	var GBP_V = 10;
	var GBP_T = 11;
	var GBP_LV = 12;
	var GBP_LVT = 13;

	var GRAPHEME_BREAK_PROP_UNIT_LENGTH = 8;

	function getGBPCodeFromName (name) {
		switch (name) {
		case 'Other': return GBP_Other;
		case 'SOT': return GBP_SOT;
		case 'EOT': return GBP_EOT;
		case 'CR': return GBP_CR;
		case 'LF': return GBP_LF;
		case 'Control': return GBP_Control;
		case 'Extend': return GBP_Extend;
		case 'Regional_Indicator': return GBP_Regional_Indicator;
		case 'SpacingMark': return GBP_SpacingMark;
		case 'L': return GBP_L;
		case 'V': return GBP_V;
		case 'T': return GBP_T;
		case 'LV': return GBP_LV;
		case 'LVT': return GBP_LVT;
		}
		return undefined;
	}
	// GENERATED CODE END
	// >>>

	/*
	 * data table, taken from:
	 * http://www.unicode.org/Public/8.0.0/ucd/auxiliary/WordBreakProperty.txt
	 */

	// GENERATED CODE START <<<1
	// This data was generated by the command 'node mkdata.js -w'.
	var WORD_BREAK_PROPS = '\
0A000000010007000B000000020008000D0000000100060022000000010003002700000001000400\
2C00000001000E002E00000001000F00300000000A0010003A00000001000D003B00000001000E00\
410000001A000C005F00000001001100610000001A000C008500000001000800AA00000001000C00\
AD00000001000B00B500000001000C00B700000001000D00BA00000001000C00C000000017000C00\
D80000001F000C00F8000000C3000C00BB01000001000C00BC01000004000C00C001000004000C00\
C4010000D0000C009402000001000C00950200001B000C00B002000012000C00C60200000C000C00\
D702000001000D00E002000005000C00EC02000001000C00EE02000001000C000003000070000900\
7003000004000C007403000001000C007603000002000C007A03000001000C007B03000003000C00\
7E03000001000E007F03000001000C008603000001000C008703000001000D008803000003000C00\
8C03000001000C008E03000014000C00A303000053000C00F70300008B000C008304000005000900\
88040000020009008A040000A6000C003105000026000C005905000001000C006105000027000C00\
8905000001000E00910500002D000900BF05000001000900C105000002000900C405000002000900\
C705000001000900D00500001B000500F005000003000500F305000001000C00F405000001000D00\
0006000006000B000C06000002000E00100600000B0009001C06000001000B002006000020000C00\
4006000001000C00410600000A000C004B06000015000900600600000A0010006B06000001001000\
6C06000001000E006E06000002000C0070060000010009007106000063000C00D506000001000C00\
D606000007000900DD06000001000B00DF06000006000900E506000002000C00E706000002000900\
EA06000004000900EE06000002000C00F00600000A001000FA06000003000C00FF06000001000C00\
0F07000001000B001007000001000C001107000001000900120700001E000C00300700001B000900\
4D07000059000C00A60700000B000900B107000001000C00C00700000A001000CA07000021000C00\
EB07000009000900F407000002000C00F807000001000E00FA07000001000C000008000016000C00\
16080000040009001A08000001000C001B080000090009002408000001000C002508000003000900\
2808000001000C0029080000050009004008000019000C005908000003000900A008000015000C00\
E30800002000090003090000010009000409000036000C003A090000010009003B09000001000900\
3C090000010009003D09000001000C003E0900000300090041090000080009004909000004000900\
4D090000010009004E090000020009005009000001000C005109000007000900580900000A000C00\
6209000002000900660900000A0010007109000001000C00720900000F000C008109000001000900\
82090000020009008509000008000C008F09000002000C009309000016000C00AA09000007000C00\
B209000001000C00B609000004000C00BC09000001000900BD09000001000C00BE09000003000900\
C109000004000900C709000002000900CB09000002000900CD09000001000900CE09000001000C00\
D709000001000900DC09000002000C00DF09000003000C00E209000002000900E60900000A001000\
F009000002000C00010A000002000900030A000001000900050A000006000C000F0A000002000C00\
130A000016000C002A0A000007000C00320A000002000C00350A000002000C00380A000002000C00\
3C0A0000010009003E0A000003000900410A000002000900470A0000020009004B0A000003000900\
510A000001000900590A000004000C005E0A000001000C00660A00000A001000700A000002000900\
720A000003000C00750A000001000900810A000002000900830A000001000900850A000009000C00\
8F0A000003000C00930A000016000C00AA0A000007000C00B20A000002000C00B50A000005000C00\
BC0A000001000900BD0A000001000C00BE0A000003000900C10A000005000900C70A000002000900\
C90A000001000900CB0A000002000900CD0A000001000900D00A000001000C00E00A000002000C00\
E20A000002000900E60A00000A001000F90A000001000C00010B000001000900020B000002000900\
050B000008000C000F0B000002000C00130B000016000C002A0B000007000C00320B000002000C00\
350B000005000C003C0B0000010009003D0B000001000C003E0B0000010009003F0B000001000900\
400B000001000900410B000004000900470B0000020009004B0B0000020009004D0B000001000900\
560B000001000900570B0000010009005C0B000002000C005F0B000003000C00620B000002000900\
660B00000A001000710B000001000C00820B000001000900830B000001000C00850B000006000C00\
8E0B000003000C00920B000004000C00990B000002000C009C0B000001000C009E0B000002000C00\
A30B000002000C00A80B000003000C00AE0B00000C000C00BE0B000002000900C00B000001000900\
C10B000002000900C60B000003000900CA0B000003000900CD0B000001000900D00B000001000C00\
D70B000001000900E60B00000A001000000C000001000900010C000003000900050C000008000C00\
0E0C000003000C00120C000017000C002A0C000010000C003D0C000001000C003E0C000003000900\
410C000004000900460C0000030009004A0C000004000900550C000002000900580C000003000C00\
600C000002000C00620C000002000900660C00000A001000810C000001000900820C000002000900\
850C000008000C008E0C000003000C00920C000017000C00AA0C00000A000C00B50C000005000C00\
BC0C000001000900BD0C000001000C00BE0C000001000900BF0C000001000900C00C000005000900\
C60C000001000900C70C000002000900CA0C000002000900CC0C000002000900D50C000002000900\
DE0C000001000C00E00C000002000C00E20C000002000900E60C00000A001000F10C000002000C00\
010D000001000900020D000002000900050D000008000C000E0D000003000C00120D000029000C00\
3D0D000001000C003E0D000003000900410D000004000900460D0000030009004A0D000003000900\
4D0D0000010009004E0D000001000C00570D0000010009005F0D000003000C00620D000002000900\
660D00000A0010007A0D000006000C00820D000002000900850D000012000C009A0D000018000C00\
B30D000009000C00BD0D000001000C00C00D000007000C00CA0D000001000900CF0D000003000900\
D20D000003000900D60D000001000900D80D000008000900E60D00000A001000F20D000002000900\
010E000030001600310E000001000900320E000002001600340E000007000900400E000006001600\
460E000001001600470E0000080009004F0E000001001600500E00000A0010005A0E000002001600\
810E000002001700840E000001001700870E0000020017008A0E0000010017008D0E000001001700\
940E000004001700990E000007001700A10E000003001700A50E000001001700A70E000001001700\
AA0E000002001700AD0E000004001700B10E000001000900B20E000002001700B40E000006000900\
BB0E000002000900BD0E000001001700C00E000005001700C60E000001001700C80E000006000900\
D00E00000A001000DC0E000004001700000F000001000C00180F000002000900200F00000A001000\
350F000001000900370F000001000900390F0000010009003E0F000002000900400F000008000C00\
490F000024000C00710F00000E0009007F0F000001000900800F000005000900860F000002000900\
880F000005000C008D0F00000B000900990F000024000900C60F000001000900001000002B001800\
2B100000020009002D10000004000900311000000100090032100000060009003810000001000900\
39100000020009003B100000020009003D100000020009003F10000001001800401000000A001000\
4A100000060018005010000006001800561000000200090058100000020009005A10000004001800\
5E100000030009006110000001001800621000000300090065100000020018006710000007000900\
6E100000030018007110000004000900751000000D00180082100000010009008310000002000900\
851000000200090087100000060009008D100000010009008F10000001000900901000000A001000\
9A100000030009009D100000010009009E10000002001800A010000026000C00C710000001000C00\
CD10000001000C00D01000002B000C00FC10000001000C00FD1000004C010C004A12000004000C00\
5012000007000C005812000001000C005A12000004000C006012000029000C008A12000004000C00\
9012000021000C00B212000004000C00B812000007000C00C012000001000C00C212000004000C00\
C81200000F000C00D812000039000C001213000004000C001813000043000C005D13000003000900\
8013000010000C00A013000056000C00F813000006000C00011400006C020C006F16000011000C00\
811600001A000C00A01600004B000C00EE16000003000C00F116000008000C00001700000D000C00\
0E17000004000C0012170000030009002017000012000C0032170000030009004017000012000C00\
5217000002000900601700000D000C006E17000003000C0072170000020009008017000034001900\
B417000002000900B617000001000900B717000007000900BE17000008000900C617000001000900\
C717000002000900C91700000B000900D417000003001900D717000001001900D817000003001900\
DB17000001001900DC17000001001900DD17000001000900E01700000A001000F01700000A001900\
0B180000030009000E18000001000B00101800000A0010002018000023000C004318000001000C00\
4418000034000C008018000029000C00A918000001000900AA18000001000C00B018000046000C00\
001900001F000C002019000003000900231900000400090027190000020009002919000003000900\
3019000002000900321900000100090033190000060009003919000003000900461900000A001000\
D01900000A001000E019000020001900001A000017000C00171A000002000900191A000002000900\
1B1A000001000900551A000001000900561A000001000900571A000001000900581A000007000900\
601A000001000900611A000001000900621A000001000900631A000002000900651A000008000900\
6D1A000006000900731A00000A0009007F1A000001000900801A00000A001000901A00000A001000\
B01A00000E000900BE1A000001000900001B000004000900041B000001000900051B00002F000C00\
341B000001000900351B000001000900361B0000050009003B1B0000010009003C1B000001000900\
3D1B000005000900421B000001000900431B000002000900451B000007000C00501B00000A001000\
6B1B000009000900801B000002000900821B000001000900831B00001E000C00A11B000001000900\
A21B000004000900A61B000002000900A81B000002000900AA1B000001000900AB1B000003000900\
AE1B000002000C00B01B00000A001000BA1B00002C000C00E61B000001000900E71B000001000900\
E81B000002000900EA1B000003000900ED1B000001000900EE1B000001000900EF1B000003000900\
F21B000002000900001C000024000C00241C0000080009002C1C000008000900341C000002000900\
361C000002000900401C00000A0010004D1C000003000C00501C00000A0010005A1C00001E000C00\
781C000006000C00D01C000003000900D41C00000D000900E11C000001000900E21C000007000900\
E91C000004000C00ED1C000001000900EE1C000004000C00F21C000002000900F41C000001000900\
F51C000002000C00F81C000002000900001D00002C000C002C1D00003F000C006B1D00000D000C00\
781D000001000C00791D000022000C009B1D000025000C00C01D000036000900FC1D000004000900\
001E000016010C00181F000006000C00201F000026000C00481F000006000C00501F000008000C00\
591F000001000C005B1F000001000C005D1F000001000C005F1F00001F000C00801F000035000C00\
B61F000007000C00BE1F000001000C00C21F000003000C00C61F000007000C00D01F000004000C00\
D61F000006000C00E01F00000D000C00F21F000003000C00F61F000007000C000C20000002000900\
0E20000002000B001820000001000F001920000001000F002420000001000F002720000001000D00\
282000000100080029200000010008002A20000005000B003F200000020011004420000001000E00\
54200000010011006020000005000B00662000000A000B007120000001000C007F20000001000C00\
902000000D000C00D02000000D000900DD20000004000900E120000001000900E220000003000900\
E52000000C0009000221000001000C000721000001000C000A2100000A000C001521000001000C00\
1921000005000C002421000001000C002621000001000C002821000001000C002A21000004000C00\
2F21000006000C003521000004000C003921000001000C003C21000004000C004521000005000C00\
4E21000001000C006021000023000C008321000002000C008521000004000C00B624000034000C00\
002C00002F000C00302C00002F000C00602C00001C000C007C2C000002000C007E2C000067000C00\
EB2C000004000C00EF2C000003000900F22C000002000C00002D000026000C00272D000001000C00\
2D2D000001000C00302D000038000C006F2D000001000C007F2D000001000900802D000017000C00\
A02D000007000C00A82D000007000C00B02D000007000C00B82D000007000C00C02D000007000C00\
C82D000007000C00D02D000007000C00D82D000007000C00E02D0000200009002F2E000001000C00\
802E00001A0015009B2E000059001500002F0000D60015000530000001000C000730000001001500\
21300000090015002A300000040009002E3000000200090031300000050014003830000003001500\
3B30000001000C003C30000001000C00413000005600130099300000020009009B30000002001400\
9D300000020014009F30000001001300A030000001001400A13000005A001200FC30000003001400\
FF300000010012000531000029000C00313100005E000C00A03100001B000C00F031000010001200\
D03200002F001200003300005800120000340000B6191500004E0000D651150000A0000015000C00\
15A0000001000C0016A0000077040C00D0A4000028000C00F8A4000006000C0000A500000C010C00\
0CA6000001000C0010A6000010000C0020A600000A0010002AA6000002000C0040A600002E000C00\
6EA6000001000C006FA600000100090070A600000300090074A600000A0009007FA6000001000C00\
80A600001C000C009CA6000002000C009EA6000002000900A0A6000046000C00E6A600000A000C00\
F0A600000200090017A7000009000C0022A700004E000C0070A7000001000C0071A7000017000C00\
88A7000001000C008BA7000004000C008FA7000001000C0090A700001E000C00B0A7000008000C00\
F7A7000001000C00F8A7000002000C00FAA7000001000C00FBA7000007000C0002A8000001000900\
03A8000003000C0006A800000100090007A8000004000C000BA80000010009000CA8000017000C00\
23A800000200090025A800000200090027A800000100090040A8000034000C0080A8000002000900\
82A8000032000C00B4A8000010000900C4A8000001000900D0A800000A001000E0A8000012000900\
F2A8000006000C00FBA8000001000C00FDA8000001000C0000A900000A0010000AA900001C000C00\
26A900000800090030A9000017000C0047A900000B00090052A900000200090060A900001D000C00\
80A900000300090083A900000100090084A900002F000C00B3A9000001000900B4A9000002000900\
B6A9000004000900BAA9000002000900BCA9000001000900BDA9000004000900CFA9000001000C00\
D0A900000A001000E0A9000005001800E5A9000001000900E6A9000001001800E7A9000009001800\
F0A900000A001000FAA900000500180000AA000029000C0029AA0000060009002FAA000002000900\
31AA00000200090033AA00000200090035AA00000200090040AA000003000C0043AA000001000900\
44AA000008000C004CAA0000010009004DAA00000100090050AA00000A00100060AA000010001800\
70AA00000100180071AA00000600180077AA0000030018007AAA0000010018007BAA000001000900\
7CAA0000010009007DAA0000010009007EAA000002001800B0AA000001000900B2AA000003000900\
B7AA000002000900BEAA000002000900C1AA000001000900E0AA00000B000C00EBAA000001000900\
ECAA000002000900EEAA000002000900F2AA000001000C00F3AA000002000C00F5AA000001000900\
F6AA00000100090001AB000006000C0009AB000006000C0011AB000006000C0020AB000007000C00\
28AB000007000C0030AB00002B000C005CAB000004000C0060AB000006000C0070AB000050000C00\
C0AB000023000C00E3AB000002000900E5AB000001000900E6AB000002000900E8AB000001000900\
E9AB000002000900ECAB000001000900EDAB000001000900F0AB00000A00100000AC0000A42B0C00\
B0D7000017000C00CBD7000031000C0000F900006E01150070FA00006A00150000FB000007000C00\
13FB000005000C001DFB0000010005001EFB0000010009001FFB00000A0005002AFB00000D000500\
38FB0000050005003EFB00000100050040FB00000200050043FB00000200050046FB00000A000500\
50FB000062000C00D3FB00006B010C0050FD000040000C0092FD000036000C00F0FD00000C000C00\
00FE00001000090010FE000001000E0013FE000001000D0014FE000001000E0020FE000010000900\
33FE0000020011004DFE00000300110050FE000001000E0052FE000001000F0054FE000001000E00\
55FE000001000D0070FE000005000C0076FE000087000C00FFFE000001000B0007FF000001000F00\
0CFF000001000E000EFF000001000F001AFF000001000D001BFF000001000E0021FF00001A000C00\
3FFF00000100110041FF00001A000C0066FF00000A00120070FF00000100140071FF00002D001200\
9EFF000002000900A0FF00001F000C00C2FF000006000C00CAFF000006000C00D2FF000006000C00\
DAFF000003000C00F9FF000003000B00000001000C000C000D0001001A000C002800010013000C00\
3C00010002000C003F0001000F000C00500001000E000C00800001007B000C004001010035000C00\
FD01010001000900800201001D000C00A002010031000C00E0020100010009000003010020000C00\
3003010011000C004103010001000C004203010008000C004A03010001000C005003010026000C00\
7603010005000900800301001E000C00A003010024000C00C803010008000C00D103010005000C00\
0004010050000C00500401004E000C00A00401000A0010000005010028000C003005010034000C00\
0006010037010C004007010016000C006007010008000C000008010006000C000808010001000C00\
0A0801002C000C003708010002000C003C08010001000C003F08010017000C006008010017000C00\
800801001F000C00E008010013000C00F408010002000C000009010016000C00200901001A000C00\
8009010038000C00BE09010002000C00000A010001000C00010A010003000900050A010002000900\
0C0A010004000900100A010004000C00150A010003000C00190A01001B000C00380A010003000900\
3F0A010001000900600A01001D000C00800A01001D000C00C00A010008000C00C90A01001C000C00\
E50A010002000900000B010036000C00400B010016000C00600B010013000C00800B010012000C00\
000C010049000C00800C010033000C00C00C010033000C0000100100010009000110010001000900\
02100100010009000310010035000C00381001000F000900661001000A0010007F10010003000900\
8210010001000900831001002D000C00B010010003000900B310010004000900B710010002000900\
B910010002000900BD10010001000B00D010010019000C00F01001000A0010000011010003000900\
0311010024000C0027110100050009002C110100010009002D11010008000900361101000A001000\
5011010023000C0073110100010009007611010001000C0080110100020009008211010001000900\
8311010030000C00B311010003000900B611010009000900BF11010002000900C111010004000C00\
CA11010003000900D01101000A001000DA11010001000C00DC11010001000C000012010012000C00\
1312010019000C002C120100030009002F1201000300090032120100020009003412010001000900\
351201000100090036120100020009008012010007000C008812010001000C008A12010004000C00\
8F1201000F000C009F1201000A000C00B01201002F000C00DF12010001000900E012010003000900\
E312010008000900F01201000A001000001301000200090002130100020009000513010008000C00\
0F13010002000C001313010016000C002A13010007000C003213010002000C003513010005000C00\
3C130100010009003D13010001000C003E1301000200090040130100010009004113010004000900\
47130100020009004B130100030009005013010001000C0057130100010009005D13010005000C00\
6213010002000900661301000700090070130100050009008014010030000C00B014010003000900\
B314010006000900B914010001000900BA14010001000900BB14010004000900BF14010002000900\
C114010001000900C214010002000900C414010002000C00C714010001000C00D01401000A001000\
801501002F000C00AF15010003000900B215010004000900B815010004000900BC15010002000900\
BE15010001000900BF15010002000900D815010004000C00DC150100020009000016010030000C00\
301601000300090033160100080009003B160100020009003D160100010009003E16010001000900\
3F160100020009004416010001000C00501601000A001000801601002B000C00AB16010001000900\
AC16010001000900AD16010001000900AE16010002000900B016010006000900B616010001000900\
B716010001000900C01601000A0010001D1701000300090020170100020009002217010004000900\
26170100010009002717010005000900301701000A001000A018010040000C00E01801000A001000\
FF18010001000C00C01A010039000C00002001009A030C00002401006F000C0080240100C4000C00\
003001002F040C000044010047020C000068010039020C00406A01001F000C00606A01000A001000\
D06A01001E000C00F06A010005000900006B010030000C00306B010007000900406B010004000C00\
506B01000A001000636B010015000C007D6B010013000C00006F010045000C00506F010001000C00\
516F01002E0009008F6F010004000900936F01000D000C0000B001000100120000BC01006B000C00\
70BC01000D000C0080BC010009000C0090BC01000A000C009DBC010002000900A0BC010004000B00\
65D101000200090067D10100030009006DD101000600090073D1010008000B007BD1010008000900\
85D1010007000900AAD101000400090042D201000300090000D4010055000C0056D4010047000C00\
9ED4010002000C00A2D4010001000C00A5D4010002000C00A9D4010004000C00AED401000C000C00\
BBD4010001000C00BDD4010007000C00C5D4010041000C0007D5010004000C000DD5010008000C00\
16D5010007000C001ED501001C000C003BD5010004000C0040D5010005000C0046D5010001000C00\
4AD5010007000C0052D5010054010C00A8D6010019000C00C2D6010019000C00DCD601001F000C00\
FCD6010019000C0016D701001F000C0036D7010019000C0050D701001F000C0070D7010019000C00\
8AD701001F000C00AAD7010019000C00C4D7010008000C00CED701003200100000DA010037000900\
3BDA01003200090075DA01000100090084DA0100010009009BDA010005000900A1DA01000F000900\
00E80100C5000C00D0E801000700090000EE010004000C0005EE01001B000C0021EE010002000C00\
24EE010001000C0027EE010001000C0029EE01000A000C0034EE010004000C0039EE010001000C00\
3BEE010001000C0042EE010001000C0047EE010001000C0049EE010001000C004BEE010001000C00\
4DEE010003000C0051EE010002000C0054EE010001000C0057EE010001000C0059EE010001000C00\
5BEE010001000C005DEE010001000C005FEE010001000C0061EE010002000C0064EE010001000C00\
67EE010004000C006CEE010007000C0074EE010004000C0079EE010004000C007EEE010001000C00\
80EE01000A000C008BEE010011000C00A1EE010003000C00A5EE010005000C00ABEE010011000C00\
30F101001A000C0050F101001A000C0070F101001A000C00E6F101001A000A0000000200D7A61500\
00A702003510150040B70200DE00150020B802008216150000F802001E02150001000E0001000B00\
20000E0060000B0000010E00F0000900'.replace(
	/[0-9A-F]{2}/g,
	function($0){return String.fromCharCode(parseInt($0, 16))});

	var WBP_Other = 0;
	var WBP_SOT = 1;
	var WBP_EOT = 2;
	var WBP_Double_Quote = 3;
	var WBP_Single_Quote = 4;
	var WBP_Hebrew_Letter = 5;
	var WBP_CR = 6;
	var WBP_LF = 7;
	var WBP_Newline = 8;
	var WBP_Extend = 9;
	var WBP_Regional_Indicator = 10;
	var WBP_Format = 11;
	var WBP_ALetter = 12;
	var WBP_MidLetter = 13;
	var WBP_MidNum = 14;
	var WBP_MidNumLet = 15;
	var WBP_Numeric = 16;
	var WBP_ExtendNumLet = 17;
	var WBP_Katakana = 18;
	var WBP_Hiragana = 19;
	var WBP_KanaExtension = 20;
	var WBP_Han = 21;
	var WBP_Thai = 22;
	var WBP_Lao = 23;
	var WBP_Myanmar = 24;
	var WBP_Khmer = 25;

	var WORD_BREAK_PROP_UNIT_LENGTH = 8;

	function getWBPCodeFromName (name) {
		switch (name) {
		case 'Other': return WBP_Other;
		case 'SOT': return WBP_SOT;
		case 'EOT': return WBP_EOT;
		case 'Double_Quote': return WBP_Double_Quote;
		case 'Single_Quote': return WBP_Single_Quote;
		case 'Hebrew_Letter': return WBP_Hebrew_Letter;
		case 'CR': return WBP_CR;
		case 'LF': return WBP_LF;
		case 'Newline': return WBP_Newline;
		case 'Extend': return WBP_Extend;
		case 'Regional_Indicator': return WBP_Regional_Indicator;
		case 'Format': return WBP_Format;
		case 'ALetter': return WBP_ALetter;
		case 'MidLetter': return WBP_MidLetter;
		case 'MidNum': return WBP_MidNum;
		case 'MidNumLet': return WBP_MidNumLet;
		case 'Numeric': return WBP_Numeric;
		case 'ExtendNumLet': return WBP_ExtendNumLet;
		case 'Katakana': return WBP_Katakana;
		case 'Hiragana': return WBP_Hiragana;
		case 'KanaExtension': return WBP_KanaExtension;
		case 'Han': return WBP_Han;
		case 'Thai': return WBP_Thai;
		case 'Lao': return WBP_Lao;
		case 'Myanmar': return WBP_Myanmar;
		case 'Khmer': return WBP_Khmer;
		}
		return undefined;
	}
	// GENERATED CODE END
	// >>>

	/*
	 * utility functions
	 */

	function pick2 (data, index) {
		return data.charCodeAt(index)
			|  data.charCodeAt(index + 1) << 8;
	}

	function pick3 (data, index) {
		return data.charCodeAt(index)
			|  data.charCodeAt(index + 1) << 8
			|  data.charCodeAt(index + 2) << 16;
	}

	function pick4 (data, index) {
		return data.charCodeAt(index)
			|  data.charCodeAt(index + 1) << 8
			|  data.charCodeAt(index + 2) << 16
			|  data.charCodeAt(index + 3) << 24;
	}

	function resolveSurrogates (s) {
		var result = [];
		s.replace(/[\ud800-\udb7f][\udc00-\udfff]|[\s\S]/g, function ($0) {
			if ($0.length == 2) {
				var hcp = $0.charCodeAt(0);
				var lcp = $0.charCodeAt(1);
				result.push(
					((hcp & 0x03c0) + 0x0040) << 10
					| (hcp & 0x003f) << 10
					| (lcp & 0x03ff)
				);
			}
			else {
				result.push($0.charCodeAt(0));
			}
		});
		return result;
	}

	function build (chars) {
		var result = [];
		var prevProp = GBP_SOT;
		var prevIndex = 0;
		var rawIndex = 0;
		for (var i = 0, goal = chars.length; i < goal; i++) {
			var nextProp = find(
				chars[i], GRAPHEME_BREAK_PROPS,
				GRAPHEME_BREAK_PROP_UNIT_LENGTH, GBP_Other);
			if (canBreak(prevProp, nextProp)) {
				if (prevIndex < i) {
					var grapheme = new Grapheme(chars.slice(prevIndex, i), rawIndex);
					result.push(grapheme);
					rawIndex += grapheme.rawString.length;
				}
				prevIndex = i;
			}
			prevProp = nextProp;
		}

		if (canBreak(prevProp, GBP_EOT)) {
			if (prevIndex < i) {
				result.push(
					new Grapheme(chars.slice(prevIndex, i), rawIndex)
				);
			}
		}

		return result;
	}

	function find (cp, table, units, otherValue) {
		var left = 0, right = ((table.length / units) >> 0) - 1;
		var middle, index, middlecp, length;

		while (left <= right) {
			middle = ((left + right) / 2) >> 0;
			index = middle * units;
			middlecp = pick4(table, index);
			length = pick2(table, index + 4);

			if (middlecp + length - 1 < cp) {
				left = middle + 1;
			}
			else if (cp < middlecp) {
				right = middle - 1;
			}
			else {
				return pick2(table, index + 6);
			}
		}

		return otherValue;
	}

	function canBreak (prev, next) {
		/*
		 * This rules are taken from:
		 * http://unicode.org/reports/tr29/, Version 8.0.0, 2015-06-01
		 * ===========================================================
		 */

		// Break at the start and end of text.
		//   GB1: sot  ÷
		if (prev == GBP_SOT) return true;

		//   GB2: ÷  eot
		if (next == GBP_EOT) return true;

		// Do not break between a CR and LF.
		// Otherwise, break before and after controls.
		//   GB3: CR  ×  LF
		if (prev == GBP_CR && next == GBP_LF) return false;

		//   GB4: ( Control | CR | LF )  ÷
		if (prev == GBP_Control || prev == GBP_CR || prev == GBP_LF) return true;

		//   GB5: ÷  ( Control | CR | LF )
		if (next == GBP_Control || next == GBP_CR || next == GBP_LF) return true;

		// Do not break Hangul syllable sequences.
		//   GB6: L  ×  ( L | V | LV | LVT )
		if (prev == GBP_L && (next == GBP_L || next == GBP_V || next == GBP_LV || next == GBP_LVT)) return false;

		//   GB7: ( LV | V )  ×  ( V | T )
		if ((prev == GBP_LV || prev == GBP_V) && (next == GBP_V || next == GBP_T)) return false;

		//   GB8: ( LVT | T)  ×  T
		if ((prev == GBP_LVT || prev == GBP_T) && next == GBP_T) return false;

		// Do not break between regional indicator symbols.
		//   GB8a  Regional_Indicator  ×  Regional_Indicator
		if (prev == GBP_Regional_Indicator && next == GBP_Regional_Indicator) return false;

		// Do not break before extending characters.
		//   GB9: ×  Extend
		if (next == GBP_Extend) return false;

		// Only for extended grapheme clusters:
		// Do not break before SpacingMarks, or after Prepend characters.
		//   GB9a     ×  SpacingMark
		if (next == GBP_SpacingMark) return false;

		//   GB9b  Prepend  ×
		//   NOTE: At this time (Unicode 8.0), Prepend property has no characters.

		// Otherwise, break everywhere.
		//   GB10: Any  ÷  Any
		return true;
	}

	function getUTF16FromCodePoint (cp) {
		var p = (cp & 0x1f0000) >> 16;
		var o = cp & 0xffff;
		if (p) {
			return String.fromCharCode(0xd800 | ((p - 1) << 6) | ((o & 0xfc00) >> 10)) +
				String.fromCharCode(0xdc00 | (o & 0x03ff));
		}
		else {
			return String.fromCharCode(o);
		}
	}

	function getWords (s) {
		var buf = [
			[WBP_SOT, undefined, undefined],
			[WBP_SOT, undefined, undefined]
		];
		var index = 0;
		var prevProp;
		s.replace(/[\ud800-\udb7f][\udc00-\udfff]|[\s\S]/g, function ($0) {
			var codePoint;
			if ($0.length == 2) {
				var hcp = $0.charCodeAt(0);
				var lcp = $0.charCodeAt(1);
				codePoint =
					((hcp & 0x03c0) + 0x0040) << 10
					| (hcp & 0x003f) << 10
					| (lcp & 0x03ff);
			}
			else {
				codePoint = $0.charCodeAt(0);
			}
			var p = find(
				codePoint, WORD_BREAK_PROPS,
				WORD_BREAK_PROP_UNIT_LENGTH, WBP_Other);
			if (p == WBP_CR || p == WBP_LF || p == WBP_Newline) {
				prevProp = undefined;
			}
			else if (p == WBP_Extend || p == WBP_Format) {
				if (prevProp == undefined) {
					prevProp = p;
				}
				else {
					p = undefined;
				}
			}
			else {
				prevProp = p;
			}
			if (p != undefined) {
				buf.push([p, codePoint, index]);
			}
			index += $0.length;
		});

		buf.push(
			[WBP_EOT, undefined, index],
			[WBP_EOT, undefined, undefined]
		);

		var result = [];
		var prevIndex = 0;
		for (var i = 2, goal = buf.length - 1; i < goal; i++) {
			if (canBreakWord(
				buf[i - 2][0], buf[i - 1][0],
				buf[i][0], buf[i + 1][0])) {
				var index = buf[i][2];
				if (prevIndex < index) {
					result.push({
						text: s.substring(prevIndex, index),
						index: prevIndex,
						length: index - prevIndex
					});
					prevIndex = index;
				}
			}
		}

		return result;
	}

	function canBreakWord (p2, p1, current, n1) {
		/*
		 * This rules are taken from:
		 * http://unicode.org/reports/tr29/, Version 8.0.0, 2015-06-01
		 * ===========================================================
		 */

		//Break at the start and end of text.
		//  WB1: sot  ÷
		if (p1 == WBP_SOT) return true;

		//  WB2:  ÷  eot
		if (current == WBP_EOT) return true;

		//Do not break within CRLF.
		//  WB3: CR  ×  LF
		if (p1 == WBP_CR && current == WBP_LF) return false;

		//Otherwise break before and after Newlines (including CR and LF)
		//  WB3a: (Newline | CR | LF)  ÷
		if (p1 == WBP_Newline || p1 == WBP_CR || p1 == WBP_LF) return true;

		//  WB3b:  ÷  (Newline | CR | LF)
		if (current == WBP_Newline || current == WBP_CR || current == WBP_LF) return true;

		//Ignore Format and Extend characters, except when they appear at the
		//beginning of a region of text.
		//(See Section 6.2, Replacing Ignore Rules.)
		//  WB4: X (Extend | Format)*  →  X
		/* this rule is processed in getWords() */

		//Do not break between most letters.
		//  WB5: AHLetter  ×  AHLetter
		if ((p1 == WBP_ALetter || p1 == WBP_Hebrew_Letter)
		&&  (current == WBP_Hebrew_Letter || current == WBP_ALetter)) return false;

		//Do not break letters across certain punctuation.
		//  WB6: AHLetter  ×  (MidLetter | MidNumLetQ) AHLetter
		if ((p1 == WBP_ALetter || p1 == WBP_Hebrew_Letter)
		&&  (current == WBP_MidLetter || current == WBP_MidNumLet || current == WBP_Single_Quote)
		&&  (n1 == WBP_ALetter || n1 == WBP_Hebrew_Letter)) return false;

		//  WB7: AHLetter (MidLetter | MidNumLetQ)  ×  AHLetter
		if ((p2 == WBP_ALetter || p2 == WBP_Hebrew_Letter)
		&&  (p1 == WBP_MidLetter || p1 == WBP_MidNumLet || p1 == WBP_Single_Quote)
		&&  (current == WBP_ALetter || current == WBP_Hebrew_Letter)) return false;

		//  WB7a: Hebrew_Letter  ×  Single_Quote
		if (p1 == WBP_Hebrew_Letter && current == WBP_Single_Quote) return false;

		//  WB7b: Hebrew_Letter  ×  Double_Quote Hebrew_Letter
		if (p1 == WBP_Hebrew_Letter
		&&  current == WBP_Double_Quote
		&&  n1 == WBP_Hebrew_Letter) return false;

		//  WB7c: Hebrew_Letter Double_Quote  ×  Hebrew_Letter
		if (p2 == WBP_Hebrew_Letter
		&&  p1 == WBP_Double_Quote
		&&  current == WBP_Hebrew_Letter) return false;

		//Do not break within sequences of digits, or digits adjacent to
		//letters (“3a”, or “A3”).
		//  WB8: Numeric  ×  Numeric
		if (p1 == WBP_Numeric && current == WBP_Numeric) return false;

		//  WB9: AHLetter  ×  Numeric
		if ((p1 == WBP_ALetter || p1 == WBP_Hebrew_Letter)
		&&  current == WBP_Numeric) return false;

		//  WB10: Numeric  ×  AHLetter
		if (p1 == WBP_Numeric
		&&  (current == WBP_ALetter || current == WBP_Hebrew_Letter)) return false;

		//Do not break within sequences, such as “3.2” or “3,456.789”.
		//  WB11: Numeric (MidNum | MidNumLetQ)  ×  Numeric
		if (p2 == WBP_Numeric
		&&  (p1 == WBP_MidNum || p1 == WBP_MidNumLet || p1 == WBP_Single_Quote)
		&&  current == WBP_Numeric) return false;

		//  WB12: Numeric  ×  (MidNum | MidNumLetQ) Numeric
		if (p1 == WBP_Numeric
		&&  (current == WBP_MidNum || current == WBP_MidNumLet || current == WBP_Single_Quote)
		&&  n1 == WBP_Numeric) return false;

		//Do not break between Katakana.
		//  WB13: Katakana  ×  Katakana
		//  [unistring extension]: do not use this rule. use WB13-unistring-1 instead of.
		//if (p1 == WBP_Katakana && current == WBP_Katakana) return false;

		//[unistring extension]: Do not break between Katakana, Hiragana, KanaExtension
		//  WB13-unistring-1: Katakana       ×  Katakana
		//                    Hiragana       ×  Hiragana
		//                    KanaExtension  ×  KanaExtension
		if ((p1 == WBP_Katakana || p1 == WBP_Hiragana || p1 == WBP_KanaExtension)
		&&  current == p1) return false;

		//[unistring extension]: Do not break between Kana and its extension
		//  WB13-unistring-2: (Katakana | Hiragana)  ×  KanaExtension
		if ((p1 == WBP_Katakana || p1 == WBP_Hiragana)
		&&  current == WBP_KanaExtension) return false;

		//[unistring extension]: Do not break between Kana and its extension
		//  WB13-unistring-3: KanaExtension  ×  (Katakana | Hiragana)
		if (p1 == WBP_KanaExtension
		&&  (current == WBP_Katakana || current == WBP_Hiragana)) return false;

		//[unistring extension]: Do not break between some scripts
		//  WB13-unistring-4: Han      ×  Han
		//                    Thai     ×  Thai
		//                    Lao      ×  Lao
		//                    Myanmar  ×  Myanmar
		//                    Khmer    ×  Khmer
		if ((p1 == WBP_Han || p1 == WBP_Thai || p1 == WBP_Lao || p1 == WBP_Myanmar || p1 == WBP_Khmer)
		&&  current == p1) return false;

		//Do not break from extenders.
		//  WB13a: (AHLetter | Numeric | Katakana | Hiragana | ExtendNumLet)  ×  ExtendNumLet
		//  [unistring extension]: added Hiragana and KanaExtension
		if ((p1 == WBP_ALetter || p1 == WBP_Hebrew_Letter
			|| p1 == WBP_Numeric || p1 == WBP_Katakana || p1 == WBP_Hiragana
			|| p1 == WBP_KanaExtension || p1 == WBP_ExtendNumLet)
		&&  current == WBP_ExtendNumLet) return false;

		//  WB13b: ExtendNumLet  ×  (AHLetter | Numeric | Katakana | Hiragana)
		//  [unistring extension]: added Hiragana and KanaExtension
		if (p1 == WBP_ExtendNumLet
		&&  (current == WBP_ALetter || current == WBP_Hebrew_Letter
			|| current == WBP_Numeric || current == WBP_Katakana
			|| current == WBP_Hiragana || current == WBP_KanaExtension)) return false;

		//Do not break between regional indicator symbols.
		//  WB13c: Regional_Indicator  ×  Regional_Indicator
		if (p1 == WBP_Regional_Indicator && current == WBP_Regional_Indicator) return false;

		//Otherwise, break everywhere (including around ideographs).
		//  WB14: Any  ÷  Any
		return true;
	}

	/*
	 * Grapheme class
	 */

	function Grapheme (codePoints, rawIndex) {
		if (codePoints != undefined) {
			this.codePoints = codePoints;
			this.updateRawString();
		}
		if (rawIndex != undefined) {
			this.rawIndex = rawIndex;
		}
	}

	Grapheme.prototype = {
		toString: function () {
			return this.rawString;
		},
		clone: function () {
			var result = new Grapheme;
			result.codePoints = this.codePoints.slice();
			result.rawString = this.rawString;
			result.rawIndex = this.rawIndex;
			return result;
		},
		updateRawString: function () {
			this.rawString = this.codePoints.reduce(function (result, cp) {
				return result + getUTF16FromCodePoint(cp);
			}, '');
		},
		dump: function (detail) {
			if (detail) {
				var log = [];
				log.push('codePoints: [' + this.codePoints.map(function (cp) {
					if (cp < 0x10000) {
						return 'U+' + ('0000' + cp.toString(16).toUpperCase()).substr(-4);
					}
					else {
						return 'U+' + cp.toString(16).toUpperCase();
					}
				}).join(', ') + ']');
				log.push('  rawIndex: ' + this.rawIndex);
				log.push(' rawString: (' + this.rawString.length + ') "' + this.rawString + '"');
				return log.join('\n');
			}
			else {
				return this.codePoints
					.map(function (cp) {
						if (cp < 0x10000) {
							return ('0000' + cp.toString(16).toUpperCase()).substr(-4);
						}
						else {
							return cp.toString(16).toUpperCase();
						}
					})
					.join(' × ');
			}
		}
	};

	/*
	 * Unistring class
	 */

	function Unistring (s) {
		if (!(this instanceof Unistring)) {
			return new Unistring(s);
		}
		if (typeof s == 'string') {
			this.clusters = build(resolveSurrogates(s));
		}
		else if (s instanceof Array) {
			this.clusters = [];
			var rawIndex = 0;
			for (var i = 0, goal = s.length; i < goal; i++) {
				if (!(s[i] instanceof Grapheme)) {
					throw new Error(
						'Unistring: invalid cluster class: ' +
						Object.prototype.toString.call(s[i]));
				}
				this.clusters[i] = s[i].clone();
				this.clusters[i].rawIndex = rawIndex;
				rawIndex += this.clusters[i].rawString.length;
			}
		}
		else {
			throw new Error('Unistring: invalid argument');
		}
	}

	Unistring.prototype = {
		_ensureIndex: function (index, isEnd) {
			if (index == undefined) {
				index = isEnd ? this.clusters.length : 0;
			}
			if (index < 0) {
				index = this.clusters.length + index;
			}
			return Math.max(0, Math.min(index, this.clusters.length));
		},
		_toUnistring: function (s, caller) {
			if (typeof s == 'string') {
				return new Unistring(s);
			}
			else if (s instanceof Unistring) {
				return s;
			}
			else {
				throw new Error(
					'Unistring#' + (caller || '') + ': invalid argument');
			}
		},

		/*
		 * methods
		 */

		clone: function () {
			return new Unistring(this.clusters.slice());
		},
		dump: function (detail) {
			var log = [];
			if (detail) {
				this.clusters.forEach(function (g, index) {
					log.push('*** Grapheme Cluster #' + index + ' ***');
					log.push(g.dump(detail));
				});
				return log.join('\n');
			}
			else {
				return '÷ ' + this.clusters
					.map(function (g) {return g.dump(detail)})
					.join(' ÷ ') + ' ÷';
			}
		},
		toString: function () {
			return this.clusters.reduce(function (result, g) {
				return result + g.toString();
			}, '');
		},
		delete: function (start, length) {
			start = this._ensureIndex(start);
			if (length == undefined || start + length > this.clusters.length) {
				length = this.clusters.length - start;
			}
			length = Math.max(0, length);

			var delta = 0;
			for (var i = start, goal = start + length; i < goal; i++) {
				delta += this.clusters[i].rawString.length;
			}
			for (var i = start + length, goal = this.clusters.length; i < goal; i++) {
				this.clusters[i].rawIndex -= delta;
			}

			this.clusters.splice(start, length);
			return this;
		},
		insert: function (s, start) {
			start = this._ensureIndex(start);
			s = this._toUnistring(s, 'insert').clusters.slice();

			var srcDelta = 0;
			var dstDelta = 0;
			if (start == this.clusters.length) {
				if (this.clusters.length) {
					var last = this.clusters.length - 1;
					srcDelta = this.clusters[last].rawIndex +
						this.clusters[last].rawString.length;
				}
			}
			else {
				srcDelta = this.clusters[start].rawIndex;
			}

			for (var i = 0, goal = s.length; i < goal; i++) {
				s[i].rawIndex += srcDelta;
				dstDelta += s[i].rawString.length;
			}
			for (var i = start, goal = this.clusters.length; i < goal; i++) {
				this.clusters[i].rawIndex += dstDelta;
			}

			s.unshift(start, 0);
			this.clusters.splice.apply(this.clusters, s);
			return this;
		},
		append: function (s) {
			return this.insert(s, this.clusters.length);
		},
		codePointsAt: function (index) {
			index = this._ensureIndex(index);
			if (index < 0 || index >= this.clusters.length) return undefined;
			return this.clusters[index].codePoints;
		},
		clusterAt: function (index) {
			return this.rawStringAt.apply(this, arguments);
		},
		rawStringAt: function (index) {
			index = this._ensureIndex(index);
			if (index < 0 || index >= this.clusters.length) return '';
			return this.clusters[index].rawString;
		},
		rawIndexAt: function (index) {
			index = this._ensureIndex(index);
			if (index < 0 || index >= this.clusters.length) return NaN;
			return this.clusters[index].rawIndex;
		},
		forEach: function () {
			this.clusters.forEach.apply(this.clusters, arguments);
		},

		/*
		 * string like properties and methods
		 */

		get length () {
			return this.clusters.length;
		},
		charAt: function (index) {
			if (index < 0 || index >= this.clusters.length) return '';
			return this.clusters[index].rawString.charAt(0);
		},
		charCodeAt: function (index) {
			if (index < 0 || index >= this.clusters.length) return NaN;
			return this.clusters[index].codePoints[0];
		},
		substring: function (start, end) {
			if (start == undefined) {
				start = 0;
			}
			if (end == undefined) {
				end = this.clusters.length;
			}
			start = Math.max(0, Math.min(start, this.clusters.length));
			end = Math.max(0, Math.min(end, this.clusters.length));
			if (start > end) {
				var tmp = start;
				start = end;
				end = tmp;
			}
			return new Unistring(this.clusters.slice(start, end));
		},
		substr: function (start, length) {
			start = this._ensureIndex(start);
			if (length == undefined || start + length > this.clusters.length) {
				length = this.clusters.length - start;
			}
			if (length < 0) {
				length = 0;
			}
			return new Unistring(this.clusters.slice(start, start + length));
		},
		slice: function (start, end) {
			start = this._ensureIndex(start);
			end = this._ensureIndex(end, true);
			return new Unistring(this.clusters.slice(start, end));
		},
		concat: function (s) {
			return this.insert(s, this.clusters.length);
		},
		indexOf: function (s) {
			s = this._toUnistring(s, 'indexOf');

			var whole = this.toString();
			var part = s.toString();
			var rawIndex = 0;
			var clusterIndex = 0;

			while ((rawIndex = whole.indexOf(part, rawIndex)) >= 0) {
				while (clusterIndex < this.clusters.length
					   && this.clusters[clusterIndex].rawIndex < rawIndex) {
					clusterIndex++;
				}

				if (clusterIndex >= this.clusters.length) {
					return -1;
				}

				if (this.substr(clusterIndex, s.length).toString() == part) {
					return clusterIndex;
				}

				rawIndex++;
			}

			return -1;
		},
		lastIndexOf: function (s) {
			s = this._toUnistring(s, 'lastIndexOf');

			var whole = this.toString();
			var part = s.toString();
			var rawIndex = whole.length - 1;
			var clusterIndex = this.clusters.length - 1;

			while (rawIndex >= 0
				   && (rawIndex = whole.lastIndexOf(part, rawIndex)) >= 0) {
				while (clusterIndex >= 0
					   && this.clusters[clusterIndex].rawIndex > rawIndex) {
					clusterIndex--;
				}

				if (clusterIndex < 0) {
					return -1;
				}

				if (this.substr(clusterIndex, s.length).toString() == part) {
					return clusterIndex;
				}

				rawIndex--;
			}

			return -1;
		}
	};

	/*
	 * exporting
	 */

	Unistring.resolveSurrogates = resolveSurrogates;
	Unistring.findGraphemeBreakProp = function (codePoint) {
		return find(
			codePoint, GRAPHEME_BREAK_PROPS,
			GRAPHEME_BREAK_PROP_UNIT_LENGTH, GBP_Other);
	};
	Unistring.getUTF16FromCodePoint = getUTF16FromCodePoint;
	Unistring.getGBPCodeFromName = getGBPCodeFromName;
	Unistring.getWBPCodeFromName = getWBPCodeFromName;
	Unistring.getWords = getWords;

	Unistring.GBP_Other = GBP_Other;
	Unistring.GBP_SOT = GBP_SOT;
	Unistring.GBP_EOT = GBP_EOT;
	Unistring.GBP_CR = GBP_CR;
	Unistring.GBP_LF = GBP_LF;
	Unistring.GBP_Control = GBP_Control;
	Unistring.GBP_Extend = GBP_Extend;
	Unistring.GBP_Regional_Indicator = GBP_Regional_Indicator;
	Unistring.GBP_SpacingMark = GBP_SpacingMark;
	Unistring.GBP_L = GBP_L;
	Unistring.GBP_V = GBP_V;
	Unistring.GBP_T = GBP_T;
	Unistring.GBP_LV = GBP_LV;
	Unistring.GBP_LVT = GBP_LVT;

	Unistring.WBP_Other = WBP_Other;
	Unistring.WBP_SOT = WBP_SOT;
	Unistring.WBP_EOT = WBP_EOT;
	Unistring.WBP_Double_Quote = WBP_Double_Quote;
	Unistring.WBP_Single_Quote = WBP_Single_Quote;
	Unistring.WBP_Hebrew_Letter = WBP_Hebrew_Letter;
	Unistring.WBP_CR = WBP_CR;
	Unistring.WBP_LF = WBP_LF;
	Unistring.WBP_Newline = WBP_Newline;
	Unistring.WBP_Extend = WBP_Extend;
	Unistring.WBP_Regional_Indicator = WBP_Regional_Indicator;
	Unistring.WBP_Format = WBP_Format;
	Unistring.WBP_ALetter = WBP_ALetter;
	Unistring.WBP_MidLetter = WBP_MidLetter;
	Unistring.WBP_MidNum = WBP_MidNum;
	Unistring.WBP_MidNumLet = WBP_MidNumLet;
	Unistring.WBP_Numeric = WBP_Numeric;
	Unistring.WBP_ExtendNumLet = WBP_ExtendNumLet;
	Unistring.WBP_Katakana = WBP_Katakana;
	Unistring.WBP_Hiragana = WBP_Hiragana;
	Unistring.WBP_KanaExtension = WBP_KanaExtension;
	Unistring.WBP_Han = WBP_Han;
	Unistring.WBP_Thai = WBP_Thai;
	Unistring.WBP_Lao = WBP_Lao;
	Unistring.WBP_Myanmar = WBP_Myanmar;
	Unistring.WBP_Khmer = WBP_Khmer;

	if (typeof module !== 'undefined' && typeof exports !== 'undefined') {
		module.exports = Unistring;
	}
	else {
		global.Unistring = Unistring;
	}

})(this);

// vim:set ts=4 sw=4 fenc=UTF-8 ff=unix ft=javascript fdm=marker fmr=<<<,>>> :
