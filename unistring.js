/**
 * Unistring: breaks a native string into an array of grapheme cluster,
 *            and provides native string like manipulation methods.
 * =============================================================================
 *
 *
 * @author akahuku@gmail.com
 * @license MIT
 */

(function (global) {
	'use strict';

	/*
	 * data table, taken from:
	 * http://www.unicode.org/Public/8.0.0/ucd/auxiliary/GraphemeBreakProperty.txt
	 */

	// GENERATED CODE START <<<1
	// This data was generated by the command 'node mkdata.js'.
	var GRAPHEME_BREAK_PROPS = '\
000000000A0005000A000000010004000B000000020005000D000000010003000E00000012000500\
7F00000021000500AD00000001000500000300007000060083040000050006008804000002000600\
910500002D000600BF05000001000600C105000002000600C405000002000600C705000001000600\
0006000006000500100600000B0006001C060000010005004B060000150006007006000001000600\
D606000007000600DD06000001000500DF06000006000600E706000002000600EA06000004000600\
0F070000010005001107000001000600300700001B000600A60700000B000600EB07000009000600\
16080000040006001B08000009000600250800000300060029080000050006005908000003000600\
E30800002000060003090000010008003A090000010006003B090000010008003C09000001000600\
3E09000003000800410900000800060049090000040008004D090000010006004E09000002000800\
5109000007000600620900000200060081090000010006008209000002000800BC09000001000600\
BE09000001000600BF09000002000800C109000004000600C709000002000800CB09000002000800\
CD09000001000600D709000001000600E209000002000600010A000002000600030A000001000800\
3C0A0000010006003E0A000003000800410A000002000600470A0000020006004B0A000003000600\
510A000001000600700A000002000600750A000001000600810A000002000600830A000001000800\
BC0A000001000600BE0A000003000800C10A000005000600C70A000002000600C90A000001000800\
CB0A000002000800CD0A000001000600E20A000002000600010B000001000600020B000002000800\
3C0B0000010006003E0B0000010006003F0B000001000600400B000001000800410B000004000600\
470B0000020008004B0B0000020008004D0B000001000600560B000001000600570B000001000600\
620B000002000600820B000001000600BE0B000001000600BF0B000001000800C00B000001000600\
C10B000002000800C60B000003000800CA0B000003000800CD0B000001000600D70B000001000600\
000C000001000600010C0000030008003E0C000003000600410C000004000800460C000003000600\
4A0C000004000600550C000002000600620C000002000600810C000001000600820C000002000800\
BC0C000001000600BE0C000001000800BF0C000001000600C00C000002000800C20C000001000600\
C30C000002000800C60C000001000600C70C000002000800CA0C000002000800CC0C000002000600\
D50C000002000600E20C000002000600010D000001000600020D0000020008003E0D000001000600\
3F0D000002000800410D000004000600460D0000030008004A0D0000030008004D0D000001000600\
570D000001000600620D000002000600820D000002000800CA0D000001000600CF0D000001000600\
D00D000002000800D20D000003000600D60D000001000600D80D000007000800DF0D000001000600\
F20D000002000800310E000001000600330E000001000800340E000007000600470E000008000600\
B10E000001000600B30E000001000800B40E000006000600BB0E000002000600C80E000006000600\
180F000002000600350F000001000600370F000001000600390F0000010006003E0F000002000800\
710F00000E0006007F0F000001000800800F000005000600860F0000020006008D0F00000B000600\
990F000024000600C60F0000010006002D1000000400060031100000010008003210000006000600\
39100000020006003B100000020008003D1000000200060056100000020008005810000002000600\
5E100000030006007110000004000600821000000100060084100000010008008510000002000600\
8D100000010006009D1000000100060000110000600009006011000048000A00A811000058000B00\
5D130000030006001217000003000600321700000300060052170000020006007217000002000600\
B417000002000600B617000001000800B717000007000600BE17000008000800C617000001000600\
C717000002000800C91700000B000600DD170000010006000B180000030006000E18000001000500\
A9180000010006002019000003000600231900000400080027190000020006002919000003000800\
3019000002000800321900000100060033190000060008003919000003000600171A000002000600\
191A0000020008001B1A000001000600551A000001000800561A000001000600571A000001000800\
581A000007000600601A000001000600621A000001000600651A0000080006006D1A000006000800\
731A00000A0006007F1A000001000600B01A00000E000600BE1A000001000600001B000004000600\
041B000001000800341B000001000600351B000001000800361B0000050006003B1B000001000800\
3C1B0000010006003D1B000005000800421B000001000600431B0000020008006B1B000009000600\
801B000002000600821B000001000800A11B000001000800A21B000004000600A61B000002000800\
A81B000002000600AA1B000001000800AB1B000003000600E61B000001000600E71B000001000800\
E81B000002000600EA1B000003000800ED1B000001000600EE1B000001000800EF1B000003000600\
F21B000002000800241C0000080008002C1C000008000600341C000002000800361C000002000600\
D01C000003000600D41C00000D000600E11C000001000800E21C000007000600ED1C000001000600\
F21C000002000800F41C000001000600F81C000002000600C01D000036000600FC1D000004000600\
0B200000010005000C200000020006000E2000000200050028200000010005002920000001000500\
2A2000000500050060200000050005006520000001000500662000000A000500D02000000D000600\
DD20000004000600E120000001000600E220000003000600E52000000C000600EF2C000003000600\
7F2D000001000600E02D0000200006002A300000040006002E300000020006009930000002000600\
6FA600000100060070A600000300060074A600000A0006009EA6000002000600F0A6000002000600\
02A800000100060006A80000010006000BA800000100060023A800000200080025A8000002000600\
27A800000100080080A8000002000800B4A8000010000800C4A8000001000600E0A8000012000600\
26A900000800060047A900000B00060052A900000200080060A900001D00090080A9000003000600\
83A9000001000800B3A9000001000600B4A9000002000800B6A9000004000600BAA9000002000800\
BCA9000001000600BDA9000004000800E5A900000100060029AA0000060006002FAA000002000800\
31AA00000200060033AA00000200080035AA00000200060043AA0000010006004CAA000001000600\
4DAA0000010008007CAA000001000600B0AA000001000600B2AA000003000600B7AA000002000600\
BEAA000002000600C1AA000001000600EBAA000001000800ECAA000002000600EEAA000002000800\
F5AA000001000800F6AA000001000600E3AB000002000800E5AB000001000600E6AB000002000800\
E8AB000001000600E9AB000002000800ECAB000001000800EDAB00000100060000AC000001000C00\
01AC00001B000D001CAC000001000C001DAC00001B000D0038AC000001000C0039AC00001B000D00\
54AC000001000C0055AC00001B000D0070AC000001000C0071AC00001B000D008CAC000001000C00\
8DAC00001B000D00A8AC000001000C00A9AC00001B000D00C4AC000001000C00C5AC00001B000D00\
E0AC000001000C00E1AC00001B000D00FCAC000001000C00FDAC00001B000D0018AD000001000C00\
19AD00001B000D0034AD000001000C0035AD00001B000D0050AD000001000C0051AD00001B000D00\
6CAD000001000C006DAD00001B000D0088AD000001000C0089AD00001B000D00A4AD000001000C00\
A5AD00001B000D00C0AD000001000C00C1AD00001B000D00DCAD000001000C00DDAD00001B000D00\
F8AD000001000C00F9AD00001B000D0014AE000001000C0015AE00001B000D0030AE000001000C00\
31AE00001B000D004CAE000001000C004DAE00001B000D0068AE000001000C0069AE00001B000D00\
84AE000001000C0085AE00001B000D00A0AE000001000C00A1AE00001B000D00BCAE000001000C00\
BDAE00001B000D00D8AE000001000C00D9AE00001B000D00F4AE000001000C00F5AE00001B000D00\
10AF000001000C0011AF00001B000D002CAF000001000C002DAF00001B000D0048AF000001000C00\
49AF00001B000D0064AF000001000C0065AF00001B000D0080AF000001000C0081AF00001B000D00\
9CAF000001000C009DAF00001B000D00B8AF000001000C00B9AF00001B000D00D4AF000001000C00\
D5AF00001B000D00F0AF000001000C00F1AF00001B000D000CB0000001000C000DB000001B000D00\
28B0000001000C0029B000001B000D0044B0000001000C0045B000001B000D0060B0000001000C00\
61B000001B000D007CB0000001000C007DB000001B000D0098B0000001000C0099B000001B000D00\
B4B0000001000C00B5B000001B000D00D0B0000001000C00D1B000001B000D00ECB0000001000C00\
EDB000001B000D0008B1000001000C0009B100001B000D0024B1000001000C0025B100001B000D00\
40B1000001000C0041B100001B000D005CB1000001000C005DB100001B000D0078B1000001000C00\
79B100001B000D0094B1000001000C0095B100001B000D00B0B1000001000C00B1B100001B000D00\
CCB1000001000C00CDB100001B000D00E8B1000001000C00E9B100001B000D0004B2000001000C00\
05B200001B000D0020B2000001000C0021B200001B000D003CB2000001000C003DB200001B000D00\
58B2000001000C0059B200001B000D0074B2000001000C0075B200001B000D0090B2000001000C00\
91B200001B000D00ACB2000001000C00ADB200001B000D00C8B2000001000C00C9B200001B000D00\
E4B2000001000C00E5B200001B000D0000B3000001000C0001B300001B000D001CB3000001000C00\
1DB300001B000D0038B3000001000C0039B300001B000D0054B3000001000C0055B300001B000D00\
70B3000001000C0071B300001B000D008CB3000001000C008DB300001B000D00A8B3000001000C00\
A9B300001B000D00C4B3000001000C00C5B300001B000D00E0B3000001000C00E1B300001B000D00\
FCB3000001000C00FDB300001B000D0018B4000001000C0019B400001B000D0034B4000001000C00\
35B400001B000D0050B4000001000C0051B400001B000D006CB4000001000C006DB400001B000D00\
88B4000001000C0089B400001B000D00A4B4000001000C00A5B400001B000D00C0B4000001000C00\
C1B400001B000D00DCB4000001000C00DDB400001B000D00F8B4000001000C00F9B400001B000D00\
14B5000001000C0015B500001B000D0030B5000001000C0031B500001B000D004CB5000001000C00\
4DB500001B000D0068B5000001000C0069B500001B000D0084B5000001000C0085B500001B000D00\
A0B5000001000C00A1B500001B000D00BCB5000001000C00BDB500001B000D00D8B5000001000C00\
D9B500001B000D00F4B5000001000C00F5B500001B000D0010B6000001000C0011B600001B000D00\
2CB6000001000C002DB600001B000D0048B6000001000C0049B600001B000D0064B6000001000C00\
65B600001B000D0080B6000001000C0081B600001B000D009CB6000001000C009DB600001B000D00\
B8B6000001000C00B9B600001B000D00D4B6000001000C00D5B600001B000D00F0B6000001000C00\
F1B600001B000D000CB7000001000C000DB700001B000D0028B7000001000C0029B700001B000D00\
44B7000001000C0045B700001B000D0060B7000001000C0061B700001B000D007CB7000001000C00\
7DB700001B000D0098B7000001000C0099B700001B000D00B4B7000001000C00B5B700001B000D00\
D0B7000001000C00D1B700001B000D00ECB7000001000C00EDB700001B000D0008B8000001000C00\
09B800001B000D0024B8000001000C0025B800001B000D0040B8000001000C0041B800001B000D00\
5CB8000001000C005DB800001B000D0078B8000001000C0079B800001B000D0094B8000001000C00\
95B800001B000D00B0B8000001000C00B1B800001B000D00CCB8000001000C00CDB800001B000D00\
E8B8000001000C00E9B800001B000D0004B9000001000C0005B900001B000D0020B9000001000C00\
21B900001B000D003CB9000001000C003DB900001B000D0058B9000001000C0059B900001B000D00\
74B9000001000C0075B900001B000D0090B9000001000C0091B900001B000D00ACB9000001000C00\
ADB900001B000D00C8B9000001000C00C9B900001B000D00E4B9000001000C00E5B900001B000D00\
00BA000001000C0001BA00001B000D001CBA000001000C001DBA00001B000D0038BA000001000C00\
39BA00001B000D0054BA000001000C0055BA00001B000D0070BA000001000C0071BA00001B000D00\
8CBA000001000C008DBA00001B000D00A8BA000001000C00A9BA00001B000D00C4BA000001000C00\
C5BA00001B000D00E0BA000001000C00E1BA00001B000D00FCBA000001000C00FDBA00001B000D00\
18BB000001000C0019BB00001B000D0034BB000001000C0035BB00001B000D0050BB000001000C00\
51BB00001B000D006CBB000001000C006DBB00001B000D0088BB000001000C0089BB00001B000D00\
A4BB000001000C00A5BB00001B000D00C0BB000001000C00C1BB00001B000D00DCBB000001000C00\
DDBB00001B000D00F8BB000001000C00F9BB00001B000D0014BC000001000C0015BC00001B000D00\
30BC000001000C0031BC00001B000D004CBC000001000C004DBC00001B000D0068BC000001000C00\
69BC00001B000D0084BC000001000C0085BC00001B000D00A0BC000001000C00A1BC00001B000D00\
BCBC000001000C00BDBC00001B000D00D8BC000001000C00D9BC00001B000D00F4BC000001000C00\
F5BC00001B000D0010BD000001000C0011BD00001B000D002CBD000001000C002DBD00001B000D00\
48BD000001000C0049BD00001B000D0064BD000001000C0065BD00001B000D0080BD000001000C00\
81BD00001B000D009CBD000001000C009DBD00001B000D00B8BD000001000C00B9BD00001B000D00\
D4BD000001000C00D5BD00001B000D00F0BD000001000C00F1BD00001B000D000CBE000001000C00\
0DBE00001B000D0028BE000001000C0029BE00001B000D0044BE000001000C0045BE00001B000D00\
60BE000001000C0061BE00001B000D007CBE000001000C007DBE00001B000D0098BE000001000C00\
99BE00001B000D00B4BE000001000C00B5BE00001B000D00D0BE000001000C00D1BE00001B000D00\
ECBE000001000C00EDBE00001B000D0008BF000001000C0009BF00001B000D0024BF000001000C00\
25BF00001B000D0040BF000001000C0041BF00001B000D005CBF000001000C005DBF00001B000D00\
78BF000001000C0079BF00001B000D0094BF000001000C0095BF00001B000D00B0BF000001000C00\
B1BF00001B000D00CCBF000001000C00CDBF00001B000D00E8BF000001000C00E9BF00001B000D00\
04C0000001000C0005C000001B000D0020C0000001000C0021C000001B000D003CC0000001000C00\
3DC000001B000D0058C0000001000C0059C000001B000D0074C0000001000C0075C000001B000D00\
90C0000001000C0091C000001B000D00ACC0000001000C00ADC000001B000D00C8C0000001000C00\
C9C000001B000D00E4C0000001000C00E5C000001B000D0000C1000001000C0001C100001B000D00\
1CC1000001000C001DC100001B000D0038C1000001000C0039C100001B000D0054C1000001000C00\
55C100001B000D0070C1000001000C0071C100001B000D008CC1000001000C008DC100001B000D00\
A8C1000001000C00A9C100001B000D00C4C1000001000C00C5C100001B000D00E0C1000001000C00\
E1C100001B000D00FCC1000001000C00FDC100001B000D0018C2000001000C0019C200001B000D00\
34C2000001000C0035C200001B000D0050C2000001000C0051C200001B000D006CC2000001000C00\
6DC200001B000D0088C2000001000C0089C200001B000D00A4C2000001000C00A5C200001B000D00\
C0C2000001000C00C1C200001B000D00DCC2000001000C00DDC200001B000D00F8C2000001000C00\
F9C200001B000D0014C3000001000C0015C300001B000D0030C3000001000C0031C300001B000D00\
4CC3000001000C004DC300001B000D0068C3000001000C0069C300001B000D0084C3000001000C00\
85C300001B000D00A0C3000001000C00A1C300001B000D00BCC3000001000C00BDC300001B000D00\
D8C3000001000C00D9C300001B000D00F4C3000001000C00F5C300001B000D0010C4000001000C00\
11C400001B000D002CC4000001000C002DC400001B000D0048C4000001000C0049C400001B000D00\
64C4000001000C0065C400001B000D0080C4000001000C0081C400001B000D009CC4000001000C00\
9DC400001B000D00B8C4000001000C00B9C400001B000D00D4C4000001000C00D5C400001B000D00\
F0C4000001000C00F1C400001B000D000CC5000001000C000DC500001B000D0028C5000001000C00\
29C500001B000D0044C5000001000C0045C500001B000D0060C5000001000C0061C500001B000D00\
7CC5000001000C007DC500001B000D0098C5000001000C0099C500001B000D00B4C5000001000C00\
B5C500001B000D00D0C5000001000C00D1C500001B000D00ECC5000001000C00EDC500001B000D00\
08C6000001000C0009C600001B000D0024C6000001000C0025C600001B000D0040C6000001000C00\
41C600001B000D005CC6000001000C005DC600001B000D0078C6000001000C0079C600001B000D00\
94C6000001000C0095C600001B000D00B0C6000001000C00B1C600001B000D00CCC6000001000C00\
CDC600001B000D00E8C6000001000C00E9C600001B000D0004C7000001000C0005C700001B000D00\
20C7000001000C0021C700001B000D003CC7000001000C003DC700001B000D0058C7000001000C00\
59C700001B000D0074C7000001000C0075C700001B000D0090C7000001000C0091C700001B000D00\
ACC7000001000C00ADC700001B000D00C8C7000001000C00C9C700001B000D00E4C7000001000C00\
E5C700001B000D0000C8000001000C0001C800001B000D001CC8000001000C001DC800001B000D00\
38C8000001000C0039C800001B000D0054C8000001000C0055C800001B000D0070C8000001000C00\
71C800001B000D008CC8000001000C008DC800001B000D00A8C8000001000C00A9C800001B000D00\
C4C8000001000C00C5C800001B000D00E0C8000001000C00E1C800001B000D00FCC8000001000C00\
FDC800001B000D0018C9000001000C0019C900001B000D0034C9000001000C0035C900001B000D00\
50C9000001000C0051C900001B000D006CC9000001000C006DC900001B000D0088C9000001000C00\
89C900001B000D00A4C9000001000C00A5C900001B000D00C0C9000001000C00C1C900001B000D00\
DCC9000001000C00DDC900001B000D00F8C9000001000C00F9C900001B000D0014CA000001000C00\
15CA00001B000D0030CA000001000C0031CA00001B000D004CCA000001000C004DCA00001B000D00\
68CA000001000C0069CA00001B000D0084CA000001000C0085CA00001B000D00A0CA000001000C00\
A1CA00001B000D00BCCA000001000C00BDCA00001B000D00D8CA000001000C00D9CA00001B000D00\
F4CA000001000C00F5CA00001B000D0010CB000001000C0011CB00001B000D002CCB000001000C00\
2DCB00001B000D0048CB000001000C0049CB00001B000D0064CB000001000C0065CB00001B000D00\
80CB000001000C0081CB00001B000D009CCB000001000C009DCB00001B000D00B8CB000001000C00\
B9CB00001B000D00D4CB000001000C00D5CB00001B000D00F0CB000001000C00F1CB00001B000D00\
0CCC000001000C000DCC00001B000D0028CC000001000C0029CC00001B000D0044CC000001000C00\
45CC00001B000D0060CC000001000C0061CC00001B000D007CCC000001000C007DCC00001B000D00\
98CC000001000C0099CC00001B000D00B4CC000001000C00B5CC00001B000D00D0CC000001000C00\
D1CC00001B000D00ECCC000001000C00EDCC00001B000D0008CD000001000C0009CD00001B000D00\
24CD000001000C0025CD00001B000D0040CD000001000C0041CD00001B000D005CCD000001000C00\
5DCD00001B000D0078CD000001000C0079CD00001B000D0094CD000001000C0095CD00001B000D00\
B0CD000001000C00B1CD00001B000D00CCCD000001000C00CDCD00001B000D00E8CD000001000C00\
E9CD00001B000D0004CE000001000C0005CE00001B000D0020CE000001000C0021CE00001B000D00\
3CCE000001000C003DCE00001B000D0058CE000001000C0059CE00001B000D0074CE000001000C00\
75CE00001B000D0090CE000001000C0091CE00001B000D00ACCE000001000C00ADCE00001B000D00\
C8CE000001000C00C9CE00001B000D00E4CE000001000C00E5CE00001B000D0000CF000001000C00\
01CF00001B000D001CCF000001000C001DCF00001B000D0038CF000001000C0039CF00001B000D00\
54CF000001000C0055CF00001B000D0070CF000001000C0071CF00001B000D008CCF000001000C00\
8DCF00001B000D00A8CF000001000C00A9CF00001B000D00C4CF000001000C00C5CF00001B000D00\
E0CF000001000C00E1CF00001B000D00FCCF000001000C00FDCF00001B000D0018D0000001000C00\
19D000001B000D0034D0000001000C0035D000001B000D0050D0000001000C0051D000001B000D00\
6CD0000001000C006DD000001B000D0088D0000001000C0089D000001B000D00A4D0000001000C00\
A5D000001B000D00C0D0000001000C00C1D000001B000D00DCD0000001000C00DDD000001B000D00\
F8D0000001000C00F9D000001B000D0014D1000001000C0015D100001B000D0030D1000001000C00\
31D100001B000D004CD1000001000C004DD100001B000D0068D1000001000C0069D100001B000D00\
84D1000001000C0085D100001B000D00A0D1000001000C00A1D100001B000D00BCD1000001000C00\
BDD100001B000D00D8D1000001000C00D9D100001B000D00F4D1000001000C00F5D100001B000D00\
10D2000001000C0011D200001B000D002CD2000001000C002DD200001B000D0048D2000001000C00\
49D200001B000D0064D2000001000C0065D200001B000D0080D2000001000C0081D200001B000D00\
9CD2000001000C009DD200001B000D00B8D2000001000C00B9D200001B000D00D4D2000001000C00\
D5D200001B000D00F0D2000001000C00F1D200001B000D000CD3000001000C000DD300001B000D00\
28D3000001000C0029D300001B000D0044D3000001000C0045D300001B000D0060D3000001000C00\
61D300001B000D007CD3000001000C007DD300001B000D0098D3000001000C0099D300001B000D00\
B4D3000001000C00B5D300001B000D00D0D3000001000C00D1D300001B000D00ECD3000001000C00\
EDD300001B000D0008D4000001000C0009D400001B000D0024D4000001000C0025D400001B000D00\
40D4000001000C0041D400001B000D005CD4000001000C005DD400001B000D0078D4000001000C00\
79D400001B000D0094D4000001000C0095D400001B000D00B0D4000001000C00B1D400001B000D00\
CCD4000001000C00CDD400001B000D00E8D4000001000C00E9D400001B000D0004D5000001000C00\
05D500001B000D0020D5000001000C0021D500001B000D003CD5000001000C003DD500001B000D00\
58D5000001000C0059D500001B000D0074D5000001000C0075D500001B000D0090D5000001000C00\
91D500001B000D00ACD5000001000C00ADD500001B000D00C8D5000001000C00C9D500001B000D00\
E4D5000001000C00E5D500001B000D0000D6000001000C0001D600001B000D001CD6000001000C00\
1DD600001B000D0038D6000001000C0039D600001B000D0054D6000001000C0055D600001B000D00\
70D6000001000C0071D600001B000D008CD6000001000C008DD600001B000D00A8D6000001000C00\
A9D600001B000D00C4D6000001000C00C5D600001B000D00E0D6000001000C00E1D600001B000D00\
FCD6000001000C00FDD600001B000D0018D7000001000C0019D700001B000D0034D7000001000C00\
35D700001B000D0050D7000001000C0051D700001B000D006CD7000001000C006DD700001B000D00\
88D7000001000C0089D700001B000D00B0D7000017000A00CBD7000031000B0000D8000000080500\
1EFB00000100060000FE00001000060020FE000010000600FFFE0000010005009EFF000002000600\
F0FF000009000500F9FF000003000500FD01010001000600E0020100010006007603010005000600\
010A010003000600050A0100020006000C0A010004000600380A0100030006003F0A010001000600\
E50A010002000600001001000100080001100100010006000210010001000800381001000F000600\
7F100100030006008210010001000800B010010003000800B310010004000600B710010002000800\
B910010002000600BD10010001000500001101000300060027110100050006002C11010001000800\
2D11010008000600731101000100060080110100020006008211010001000800B311010003000800\
B611010009000600BF11010002000800CA110100030006002C120100030008002F12010003000600\
3212010002000800341201000100060035120100010008003612010002000600DF12010001000600\
E012010003000800E312010008000600001301000200060002130100020008003C13010001000600\
3E130100010006003F13010001000800401301000100060041130100040008004713010002000800\
4B130100030008005713010001000600621301000200080066130100070006007013010005000600\
B014010001000600B114010002000800B314010006000600B914010001000800BA14010001000600\
BB14010002000800BD14010001000600BE14010001000800BF14010002000600C114010001000800\
C214010002000600AF15010001000600B015010002000800B215010004000600B815010004000800\
BC15010002000600BE15010001000800BF15010002000600DC150100020006003016010003000800\
33160100080006003B160100020008003D160100010006003E160100010008003F16010002000600\
AB16010001000600AC16010001000800AD16010001000600AE16010002000800B016010006000600\
B616010001000800B7160100010006001D1701000300060020170100020008002217010004000600\
26170100010008002717010005000600F06A010005000600306B010007000600516F01002E000800\
8F6F0100040006009DBC010002000600A0BC01000400050065D101000100060066D1010001000800\
67D10100030006006DD10100010008006ED101000500060073D10100080005007BD1010008000600\
85D1010007000600AAD101000400060042D201000300060000DA0100370006003BDA010032000600\
75DA01000100060084DA0100010006009BDA010005000600A1DA01000F000600D0E8010007000600\
E6F101001A00070000000E000100050001000E000100050002000E001E00050020000E0060000500\
80000E008000050000010E00F0000600F0010E00100E0500'.replace(
	/[0-9A-F]{2}/g,
	function($0){return String.fromCharCode(parseInt($0, 16))});

	var GBP_Other = 0;
	var GBP_SOT = 1;
	var GBP_EOT = 2;
	var GBP_CR = 3;
	var GBP_LF = 4;
	var GBP_Control = 5;
	var GBP_Extend = 6;
	var GBP_Regional_Indicator = 7;
	var GBP_SpacingMark = 8;
	var GBP_L = 9;
	var GBP_V = 10;
	var GBP_T = 11;
	var GBP_LV = 12;
	var GBP_LVT = 13;

	var GRAPHEME_BREAK_PROP_UNIT_LENGTH = 8;

	function getGBPCodeFromName (name) {
		switch (name) {
		case 'Other': return GBP_Other;
		case 'SOT': return GBP_SOT;
		case 'EOT': return GBP_EOT;
		case 'CR': return GBP_CR;
		case 'LF': return GBP_LF;
		case 'Control': return GBP_Control;
		case 'Extend': return GBP_Extend;
		case 'Regional_Indicator': return GBP_Regional_Indicator;
		case 'SpacingMark': return GBP_SpacingMark;
		case 'L': return GBP_L;
		case 'V': return GBP_V;
		case 'T': return GBP_T;
		case 'LV': return GBP_LV;
		case 'LVT': return GBP_LVT;
		}
		return undefined;
	}
	// GENERATED CODE END
	// >>>

	/*
	 * utility functions
	 */

	function pick2 (data, index) {
		return data.charCodeAt(index)
			|  data.charCodeAt(index + 1) << 8;
	}

	function pick3 (data, index) {
		return data.charCodeAt(index)
			|  data.charCodeAt(index + 1) << 8
			|  data.charCodeAt(index + 2) << 16;
	}

	function pick4 (data, index) {
		return data.charCodeAt(index)
			|  data.charCodeAt(index + 1) << 8
			|  data.charCodeAt(index + 2) << 16
			|  data.charCodeAt(index + 3) << 24;
	}

	function resolveSurrogates (s) {
		var result = [];
		s.replace(/[\ud800-\udb7f][\udc00-\udfff]|[\s\S]/g, function ($0) {
			if ($0.length == 2) {
				var hcp = $0.charCodeAt(0);
				var lcp = $0.charCodeAt(1);
				result.push(
					((hcp & 0x03c0) + 0x0040) << 10
					| (hcp & 0x003f) << 10
					| (lcp & 0x03ff)
				);
			}
			else {
				result.push($0.charCodeAt(0));
			}
		});
		return result;
	}

	function build (chars) {
		var result = [];
		var prevProp = GBP_SOT;
		var prevIndex = 0;
		var rawIndex = 0;
		for (var i = 0, goal = chars.length; i < goal; i++) {
			var nextProp = find(chars[i]);
			if (canBreak(prevProp, nextProp)) {
				if (prevIndex < i) {
					var grapheme = new Grapheme(chars.slice(prevIndex, i), rawIndex);
					result.push(grapheme);
					rawIndex += grapheme.rawString.length;
				}
				prevIndex = i;
			}
			prevProp = nextProp;
		}

		if (canBreak(prevProp, GBP_EOT)) {
			if (prevIndex < i) {
				result.push(
					new Grapheme(chars.slice(prevIndex, i), rawIndex)
				);
			}
		}

		return result;
	}

	function find (cp) {
		var table = GRAPHEME_BREAK_PROPS;
		var units = GRAPHEME_BREAK_PROP_UNIT_LENGTH;
		var left = 0, right = ((table.length / units) >> 0) - 1;
		var middle, index, middlecp, length;

		while (left <= right) {
			middle = ((left + right) / 2) >> 0;
			index = middle * units;
			middlecp = pick4(table, index);
			length = pick2(table, index + 4);

			if (middlecp + length - 1 < cp) {
				left = middle + 1;
			}
			else if (cp < middlecp) {
				right = middle - 1;
			}
			else {
				return pick2(table, index + 6);
			}
		}

		return GBP_Other;
	}

	function canBreak (prev, next) {
		/*
		 * This rules are taken from:
		 * http://unicode.org/reports/tr29/, Version 8.0.0, 2015-06-01
		 * ===========================================================
		 */

		// Break at the start and end of text.
		//   GB1: sot  ÷
		if (prev == GBP_SOT) return true;

		//   GB2: ÷  eot
		if (next == GBP_EOT) return true;

		// Do not break between a CR and LF.
		// Otherwise, break before and after controls.
		//   GB3: CR  ×  LF
		if (prev == GBP_CR && next == GBP_LF) return false;

		//   GB4: ( Control | CR | LF )  ÷
		if (prev == GBP_Control || prev == GBP_CR || prev == GBP_LF) return true;

		//   GB5: ÷  ( Control | CR | LF )
		if (next == GBP_Control || next == GBP_CR || next == GBP_LF) return true;

		// Do not break Hangul syllable sequences.
		//   GB6: L  ×  ( L | V | LV | LVT )
		if (prev == GBP_L && (next == GBP_L || next == GBP_V || next == GBP_LV || next == GBP_LVT)) return false;

		//   GB7: ( LV | V )  ×  ( V | T )
		if ((prev == GBP_LV || prev == GBP_V) && (next == GBP_V || next == GBP_T)) return false;

		//   GB8: ( LVT | T)  ×  T
		if ((prev == GBP_LVT || prev == GBP_T) && next == GBP_T) return false;

		// Do not break between regional indicator symbols.
		//   GB8a  Regional_Indicator  ×  Regional_Indicator
		if (prev == GBP_Regional_Indicator && next == GBP_Regional_Indicator) return false;

		// Do not break before extending characters.
		//   GB9: ×  Extend
		if (next == GBP_Extend) return false;

		// Only for extended grapheme clusters:
		// Do not break before SpacingMarks, or after Prepend characters.
		//   GB9a     ×  SpacingMark
		if (next == GBP_SpacingMark) return false;

		//   GB9b  Prepend  ×
		//   NOTE: At this time (Unicode 8.0), Prepend property has no characters.

		// Otherwise, break everywhere.
		//   GB10: Any  ÷  Any
		return true;
	}

	function getUTF16FromCodePoint (cp) {
		var p = (cp & 0x1f0000) >> 16;
		var o = cp & 0xffff;
		if (p) {
			return String.fromCharCode(0xd800 | ((p - 1) << 6) | ((o & 0xfc00) >> 10)) +
				String.fromCharCode(0xdc00 | (o & 0x03ff));
		}
		else {
			return String.fromCharCode(o);
		}
	}

	/*
	 * Grapheme class
	 */

	function Grapheme (codePoints, rawIndex) {
		if (codePoints != undefined) {
			this.codePoints = codePoints;
			this.updateRawString();
		}
		if (rawIndex != undefined) {
			this.rawIndex = rawIndex;
		}
	}

	Grapheme.prototype = {
		toString: function () {
			return this.rawString;
		},
		clone: function () {
			var result = new Grapheme;
			result.codePoints = this.codePoints.slice();
			result.rawString = this.rawString;
			result.rawIndex = this.rawIndex;
			return result;
		},
		updateRawString: function () {
			this.rawString = this.codePoints.reduce(function (result, cp) {
				return result + getUTF16FromCodePoint(cp);
			}, '');
		},
		dump: function (detail) {
			if (detail) {
				var log = [];
				log.push('codePoints: [' + this.codePoints.map(function (cp) {
					if (cp < 0x10000) {
						return 'U+' + ('0000' + cp.toString(16).toUpperCase()).substr(-4);
					}
					else {
						return 'U+' + cp.toString(16).toUpperCase();
					}
				}).join(', ') + ']');
				log.push('  rawIndex: ' + this.rawIndex);
				log.push(' rawString: (' + this.rawString.length + ') "' + this.rawString + '"');
				return log.join('\n');
			}
			else {
				return this.codePoints
					.map(function (cp) {
						if (cp < 0x10000) {
							return ('0000' + cp.toString(16).toUpperCase()).substr(-4);
						}
						else {
							return cp.toString(16).toUpperCase();
						}
					})
					.join(' × ');
			}
		}
	};

	/*
	 * Unistring class
	 */

	function Unistring (s) {
		if (!(this instanceof Unistring)) {
			return new Unistring(s);
		}
		if (typeof s == 'string') {
			this.clusters = build(resolveSurrogates(s));
		}
		else if (s instanceof Array) {
			this.clusters = [];
			var rawIndex = 0;
			for (var i = 0, goal = s.length; i < goal; i++) {
				if (!(s[i] instanceof Grapheme)) {
					throw new Error(
						'Unistring: invalid cluster class: ' +
						Object.prototype.toString.call(s[i]));
				}
				this.clusters[i] = s[i].clone();
				this.clusters[i].rawIndex = rawIndex;
				rawIndex += this.clusters[i].rawString.length;
			}
		}
		else {
			throw new Error('Unistring: invalid argument');
		}
	}

	Unistring.prototype = {
		_ensureIndex: function (index, isEnd) {
			if (index == undefined) {
				index = isEnd ? this.clusters.length : 0;
			}
			if (index < 0) {
				index = this.clusters.length + index;
			}
			return Math.max(0, Math.min(index, this.clusters.length));
		},
		_toUnistring: function (s, caller) {
			if (typeof s == 'string') {
				return new Unistring(s);
			}
			else if (s instanceof Unistring) {
				return s;
			}
			else {
				throw new Error(
					'Unistring#' + (caller || '') + ': invalid argument');
			}
		},

		/*
		 * methods
		 */

		clone: function () {
			return new Unistring(this.clusters.slice());
		},
		dump: function (detail) {
			var log = [];
			if (detail) {
				this.clusters.forEach(function (g, index) {
					log.push('*** Grapheme Cluster #' + index + ' ***');
					log.push(g.dump(detail));
				});
				return log.join('\n');
			}
			else {
				return '÷ ' + this.clusters
					.map(function (g) {return g.dump(detail)})
					.join(' ÷ ') + ' ÷';
			}
		},
		toString: function () {
			return this.clusters.reduce(function (result, g) {
				return result + g.toString();
			}, '');
		},
		delete: function (start, length) {
			start = this._ensureIndex(start);
			if (length == undefined || start + length > this.clusters.length) {
				length = this.clusters.length - start;
			}
			length = Math.max(0, length);

			var delta = 0;
			for (var i = start, goal = start + length; i < goal; i++) {
				delta += this.clusters[i].rawString.length;
			}
			for (var i = start + length, goal = this.clusters.length; i < goal; i++) {
				this.clusters[i].rawIndex -= delta;
			}

			this.clusters.splice(start, length);
			return this;
		},
		insert: function (s, start) {
			start = this._ensureIndex(start);
			s = this._toUnistring(s, 'insert').clusters.slice();

			var srcDelta = 0;
			var dstDelta = 0;
			if (start == this.clusters.length) {
				if (this.clusters.length) {
					var last = this.clusters.length - 1;
					srcDelta = this.clusters[last].rawIndex +
						this.clusters[last].rawString.length;
				}
			}
			else {
				srcDelta = this.clusters[start].rawIndex;
			}

			for (var i = 0, goal = s.length; i < goal; i++) {
				s[i].rawIndex += srcDelta;
				dstDelta += s[i].rawString.length;
			}
			for (var i = start, goal = this.clusters.length; i < goal; i++) {
				this.clusters[i].rawIndex += dstDelta;
			}

			s.unshift(start, 0);
			this.clusters.splice.apply(this.clusters, s);
			return this;
		},
		append: function (s) {
			return this.insert(s, this.clusters.length);
		},
		codePointsAt: function (index) {
			index = this._ensureIndex(index);
			if (index < 0 || index >= this.clusters.length) return undefined;
			return this.clusters[index].codePoints;
		},
		clusterAt: function (index) {
			return this.rawStringAt.apply(this, arguments);
		},
		rawStringAt: function (index) {
			index = this._ensureIndex(index);
			if (index < 0 || index >= this.clusters.length) return '';
			return this.clusters[index].rawString;
		},
		rawIndexAt: function (index) {
			index = this._ensureIndex(index);
			if (index < 0 || index >= this.clusters.length) return NaN;
			return this.clusters[index].rawIndex;
		},
		forEach: function () {
			this.clusters.forEach.apply(this.clusters, arguments);
		},

		/*
		 * string like properties and methods
		 */

		get length () {
			return this.clusters.length;
		},
		charAt: function (index) {
			if (index < 0 || index >= this.clusters.length) return '';
			return this.clusters[index].rawString.charAt(0);
		},
		charCodeAt: function (index) {
			if (index < 0 || index >= this.clusters.length) return NaN;
			return this.clusters[index].codePoints[0];
		},
		substring: function (start, end) {
			if (start == undefined) {
				start = 0;
			}
			if (end == undefined) {
				end = this.clusters.length;
			}
			start = Math.max(0, Math.min(start, this.clusters.length));
			end = Math.max(0, Math.min(end, this.clusters.length));
			if (start > end) {
				var tmp = start;
				start = end;
				end = tmp;
			}
			return new Unistring(this.clusters.slice(start, end));
		},
		substr: function (start, length) {
			start = this._ensureIndex(start);
			if (length == undefined || start + length > this.clusters.length) {
				length = this.clusters.length - start;
			}
			if (length < 0) {
				length = 0;
			}
			return new Unistring(this.clusters.slice(start, start + length));
		},
		slice: function (start, end) {
			start = this._ensureIndex(start);
			end = this._ensureIndex(end, true);
			return new Unistring(this.clusters.slice(start, end));
		},
		concat: function (s) {
			return this.insert(s, this.clusters.length);
		},
		indexOf: function (s) {
			s = this._toUnistring(s, 'indexOf');

			var whole = this.toString();
			var part = s.toString();
			var rawIndex = 0;
			var clusterIndex = 0;

			while ((rawIndex = whole.indexOf(part, rawIndex)) >= 0) {
				while (clusterIndex < this.clusters.length
					   && this.clusters[clusterIndex].rawIndex < rawIndex) {
					clusterIndex++;
				}

				if (clusterIndex >= this.clusters.length) {
					return -1;
				}

				if (this.substr(clusterIndex, s.length).toString() == part) {
					return clusterIndex;
				}

				rawIndex++;
			}

			return -1;
		},
		lastIndexOf: function (s) {
			s = this._toUnistring(s, 'lastIndexOf');

			var whole = this.toString();
			var part = s.toString();
			var rawIndex = whole.length - 1;
			var clusterIndex = this.clusters.length - 1;

			while (rawIndex >= 0
				   && (rawIndex = whole.lastIndexOf(part, rawIndex)) >= 0) {
				while (clusterIndex >= 0
					   && this.clusters[clusterIndex].rawIndex > rawIndex) {
					clusterIndex--;
				}

				if (clusterIndex < 0) {
					return -1;
				}

				if (this.substr(clusterIndex, s.length).toString() == part) {
					return clusterIndex;
				}

				rawIndex--;
			}

			return -1;
		}
	};

	/*
	 * exporting
	 */

	Unistring.resolveSurrogates = resolveSurrogates;
	Unistring.build = build;
	Unistring.find = find;
	Unistring.canBreak = canBreak;
	Unistring.getUTF16FromCodePoint = getUTF16FromCodePoint;
	Unistring.getGBPCodeFromName = getGBPCodeFromName;

	Unistring.GBP_Other = GBP_Other;
	Unistring.GBP_SOT = GBP_SOT;
	Unistring.GBP_EOT = GBP_EOT;
	Unistring.GBP_CR = GBP_CR;
	Unistring.GBP_LF = GBP_LF;
	Unistring.GBP_Control = GBP_Control;
	Unistring.GBP_Extend = GBP_Extend;
	Unistring.GBP_Regional_Indicator = GBP_Regional_Indicator;
	Unistring.GBP_SpacingMark = GBP_SpacingMark;
	Unistring.GBP_L = GBP_L;
	Unistring.GBP_V = GBP_V;
	Unistring.GBP_T = GBP_T;
	Unistring.GBP_LV = GBP_LV;
	Unistring.GBP_LVT = GBP_LVT;

	if (typeof module !== 'undefined' && typeof exports !== 'undefined') {
		module.exports = Unistring;
	}
	else {
		global.Unistring = Unistring;
	}

})(this);

// vim:set ts=4 sw=4 fenc=UTF-8 ff=unix ft=javascript fdm=marker fmr=<<<,>>> :
